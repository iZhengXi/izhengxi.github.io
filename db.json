{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/ads.txt","path":"ads.txt","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/upyun.png","path":"images/upyun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/codeblock/copy-code.styl","path":"css/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/ads.txt","hash":"4df9ddea0c1f84a5415bf7f4da1e39fae922ab37","modified":1643211826000},{"_id":"source/_data/links.yml","hash":"71166e0450786a44f06964721fa94ddbb3d7c4b4","modified":1643211826000},{"_id":"source/_posts/Get和Post请求的区别.md","hash":"c4b443db3411f7ec5e8507b3845a8b7ddaaea8c8","modified":1643211826000},{"_id":"source/_posts/Hexo主题hexo-theme-matery配置DaoVoice 实现在线聊天功能.md","hash":"b50ac01c3c945a59c78acabce174d3b88ffeaeb6","modified":1643211826000},{"_id":"source/_posts/Linux下安装软件的几种方法.md","hash":"184080093b4fb14acdc8bb7d4e8113a38f6cbb34","modified":1643211826000},{"_id":"source/_posts/Python中if __name__ == '__main__' 该如何正确理解_.md","hash":"8187a79db271f37eab2dca4d3b46599cd79e5197","modified":1643211826000},{"_id":"source/_posts/Python中正则表达式的基本使用.md","hash":"40118414348e4bbf2e87d1fc3a3feb1ffec14440","modified":1643211826000},{"_id":"source/_posts/Python虚拟环境——virtualenv.md","hash":"a2ae1e4f5284c5f13b0c0446ad9d3b89d1b62019","modified":1643211826000},{"_id":"source/_posts/Vue 文档风格的 Typora 主题.md","hash":"465c816be69370a8826923f911211d3c6f240a96","modified":1643253222385},{"_id":"source/_posts/python中函数和方法的区别.md","hash":"74cc16cda3c6fefa447047ff296dfb03d528ba1b","modified":1643211826000},{"_id":"source/_posts/scrapy安装失败.md","hash":"4ec55545d27f8e2847605a6ce2763b119a4c313f","modified":1643211826000},{"_id":"source/_posts/win10环境hexo-admin插件实现本地后台管理博客.md","hash":"4173f23fc7cd057b260f111a8dee598fa8332a86","modified":1643211826000},{"_id":"source/_posts/【Keep主题】为Hexo博客添加谷歌广告.md","hash":"eb3405ac39adec80e58c30577678813d4c9a6617","modified":1643211826000},{"_id":"source/_posts/一款高效去除PDF水印的软件.md","hash":"01f9120c056fe435f22806d3131865c02138b2bd","modified":1643211826000},{"_id":"source/_posts/免费及收费图床推荐.md","hash":"686e457792fcfb7a6acd7b1ad034481433b1ae72","modified":1643211826000},{"_id":"source/_posts/几个常用的正则表达式可视化网站.md","hash":"eb82c37fd495a26a2b796ce26b6c0fdff93e165d","modified":1643211826000},{"_id":"source/_posts/利用Aria2打造一个离线的OneDrive网盘.md","hash":"339aa8627de88685d9e58df305ea83ae4d46261b","modified":1643253083130},{"_id":"source/_posts/利用Github Actions+Hexo+Github Pages实现完全在线写博客.md","hash":"9869493cc1b3810a1206d4dbd83b96e7662b2c6e","modified":1643253186737},{"_id":"source/_posts/前后端同学必会的Linux基础命令.md","hash":"825120aacc8ba582ffc3915010773fcdc96954ec","modified":1643211826000},{"_id":"source/_posts/只需3行代码15秒就能抠图的Python神库.md","hash":"52a0b2179fe209e86141cc0d22ccd4e37ae29104","modified":1643211826000},{"_id":"source/_posts/宝塔面板安装Cloudreve——自建不限容量的在线网盘.md","hash":"9ea32b40411200baf09cb40fcd042e213aad7300","modified":1643253051925},{"_id":"source/_posts/宝塔面板部署Hexo.md","hash":"e7458e2aea0be2e905bd10581b9c1d4dd5bfeeff","modified":1643253003328},{"_id":"source/_posts/数组的下标为什么从0开始.md","hash":"a4a370dcaf1fb9ef623ddfb08a23e1dd772a10ec","modified":1643211826000},{"_id":"source/_posts/用Python打造一个文献下载器.md","hash":"19babb785a9e566e7d070e92b255ead5a89d305f","modified":1643211826000},{"_id":"source/about/index.md","hash":"a8cae342087b34ed7e21411d767218c95807b631","modified":1643211826000},{"_id":"source/categories/index.md","hash":"6dfd01ad30049739ca0e5baefd3cca5149f189d4","modified":1643211826000},{"_id":"source/links/index.md","hash":"3a2d9c7e1d2c5b96f0be0de1b4d7f473797fae43","modified":1643211826000},{"_id":"source/tags/index.md","hash":"5c4d0dca4b4460f544a9fc50104bd7cced26bb33","modified":1643211826000},{"_id":"node_modules/hexo-theme-keep/.editorconfig","hash":"26a27140a04ad1873639b19f8240fb2bae367878","modified":1643343276058},{"_id":"node_modules/hexo-theme-keep/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1643343276064},{"_id":"node_modules/hexo-theme-keep/README.md","hash":"06ef53a5daecd42cfe7d653f9331e5ea66f1f590","modified":1643343276171},{"_id":"node_modules/hexo-theme-keep/README_zh-CN.md","hash":"d3bfa4f8720b73455d9e77f3e918de60daca01d7","modified":1643343276169},{"_id":"node_modules/hexo-theme-keep/README_zh-TW.md","hash":"9913cf385c568a516055b27a9c944cc95263b3bc","modified":1643343276170},{"_id":"node_modules/hexo-theme-keep/_config.yml","hash":"8b55eae3ac7e7fc2d508d161f32a765083d3a7a9","modified":1643343276342},{"_id":"node_modules/hexo-theme-keep/package.json","hash":"a3be00d629d52f6cadde16fea48a0f68c288da07","modified":1643343276168},{"_id":"node_modules/hexo-theme-keep/languages/en.yml","hash":"11902f5813fc994a0620580d3caecad0bd4f4bec","modified":1643343276345},{"_id":"node_modules/hexo-theme-keep/languages/zh-CN.yml","hash":"f8b9da63093739b5b7a555e8d1aa0f30d38171dc","modified":1643343276347},{"_id":"node_modules/hexo-theme-keep/languages/zh-TW.yml","hash":"428b304a3ad542072bb578ed312bb06794a654e1","modified":1643343276349},{"_id":"node_modules/hexo-theme-keep/layout/archive-content.ejs","hash":"89e256133a128858702f3bd0a6cf8330f5a8f2f7","modified":1643343276071},{"_id":"node_modules/hexo-theme-keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1643343276075},{"_id":"node_modules/hexo-theme-keep/layout/article-content.ejs","hash":"9597d26784b62b0060950e8af2f71322013d3828","modified":1643343276077},{"_id":"node_modules/hexo-theme-keep/layout/category-content.ejs","hash":"9293aba389c0664335b3308cbb343e603ff1f24f","modified":1643343276083},{"_id":"node_modules/hexo-theme-keep/layout/category-list.ejs","hash":"17ea257cb28fb63c1e1650c157541d90a4f7fba5","modified":1643343276084},{"_id":"node_modules/hexo-theme-keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1643343276085},{"_id":"node_modules/hexo-theme-keep/layout/home-content.ejs","hash":"c6897b9a1f88f157bf9cb935fba43a13911871eb","modified":1643343276102},{"_id":"node_modules/hexo-theme-keep/layout/index.ejs","hash":"d04b5608fc801f00e247e7355c89a8643dc76914","modified":1643343276105},{"_id":"node_modules/hexo-theme-keep/layout/layout.ejs","hash":"a2d3f1ee6a79810de41d80b80c087f675f86ef84","modified":1643343276106},{"_id":"node_modules/hexo-theme-keep/layout/page.ejs","hash":"ad0d0452ee61277805ac30c8d97b9bdd3d09cf89","modified":1643343276111},{"_id":"node_modules/hexo-theme-keep/layout/tag-content.ejs","hash":"379fad48764e11d7962f7cec730b0a6e932ef4a3","modified":1643343276121},{"_id":"node_modules/hexo-theme-keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1643343276122},{"_id":"node_modules/hexo-theme-keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1643343276124},{"_id":"node_modules/hexo-theme-keep/scripts/use-source-data.js","hash":"0dcab564f400e1775af8e839d9f1a219d0c003bb","modified":1643343276165},{"_id":"node_modules/hexo-theme-keep/layout/_partial/archive-list.ejs","hash":"c51a44fd234c7bc5e265f6c0afe3b4c9ca665b0c","modified":1643343276074},{"_id":"node_modules/hexo-theme-keep/layout/_partial/article-copyright-info.ejs","hash":"2fec371f5b6f97cc6fc242aced9baacce93a6f86","modified":1643343276079},{"_id":"node_modules/hexo-theme-keep/layout/_partial/article-meta-info.ejs","hash":"fb04ac78cfee23b5f73b8721925e9c7fc168e2aa","modified":1643343276081},{"_id":"node_modules/hexo-theme-keep/layout/_partial/first-screen.ejs","hash":"e28d781dd6868b08e9007393495fae75c6e502aa","modified":1643343276090},{"_id":"node_modules/hexo-theme-keep/layout/_partial/footer.ejs","hash":"7ef185f52364e891791472e365d2e4441f738aa3","modified":1643343276091},{"_id":"node_modules/hexo-theme-keep/layout/_partial/friends-link.ejs","hash":"e659c6a12c80ebf0cbe9f38a58425248702f8d2f","modified":1643343276093},{"_id":"node_modules/hexo-theme-keep/layout/_partial/head.ejs","hash":"697eb90b6448d1dcecc0fc19f1033086697bb2f8","modified":1643343276098},{"_id":"node_modules/hexo-theme-keep/layout/_partial/header.ejs","hash":"bb57e24ef7005175824f19ff4cb8537ce4771590","modified":1643343276100},{"_id":"node_modules/hexo-theme-keep/layout/_partial/home-article-meta-info.ejs","hash":"f26d28c92ca79287d45cf20da6fdb0f68815c655","modified":1643343276101},{"_id":"node_modules/hexo-theme-keep/layout/_partial/image-viewer.ejs","hash":"c30d3f046035b6c63ee90fc961f67cbc2d6073af","modified":1643343276104},{"_id":"node_modules/hexo-theme-keep/layout/_partial/local-search.ejs","hash":"747cd0ac75f31c9837abcbf5e06eac5501089d96","modified":1643343276108},{"_id":"node_modules/hexo-theme-keep/layout/_partial/page-template.ejs","hash":"adec4312027a76b5969e78a2dd245563e4e6333f","modified":1643343276109},{"_id":"node_modules/hexo-theme-keep/layout/_partial/paginator.ejs","hash":"4183e4991a30132010d6428c9b2c51d198d268d8","modified":1643343276112},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post-tools.ejs","hash":"44a271ffbfb3af5c715ab25777cc58ddf9f62f82","modified":1643343276116},{"_id":"node_modules/hexo-theme-keep/layout/_partial/progress-bar.ejs","hash":"791c78e36e4191f5a738964d4fba545be2649cea","modified":1643343276117},{"_id":"node_modules/hexo-theme-keep/layout/_partial/scripts.ejs","hash":"ea08752ab79d3c61e31fae9dd49afc0feff6f36a","modified":1643343276118},{"_id":"node_modules/hexo-theme-keep/layout/_partial/side-tools.ejs","hash":"3439e47a03651a3540541ba85d9ab0c9b456fc04","modified":1643343276120},{"_id":"node_modules/hexo-theme-keep/layout/_partial/tagcloud.ejs","hash":"3c1f80ec34a4db4d242b8b1c024ffa8de0ddac78","modified":1643343276123},{"_id":"node_modules/hexo-theme-keep/layout/_partial/toc.ejs","hash":"27844ed7c138d907c25d0e198f5425fe0c0299b2","modified":1643343276125},{"_id":"node_modules/hexo-theme-keep/scripts/filters/lazyload-handle.js","hash":"c62dc757815b23c04bfd9112136d39a7deb5709a","modified":1643343276153},{"_id":"node_modules/hexo-theme-keep/scripts/filters/link-handle.js","hash":"4c8fd067eaf4cce4776413abe90a9ea3f1f04bc7","modified":1643343276158},{"_id":"node_modules/hexo-theme-keep/scripts/helpers/export-config.js","hash":"9099191029226a04aa7e633920dc3458fef940e7","modified":1643343276150},{"_id":"node_modules/hexo-theme-keep/scripts/helpers/helper.js","hash":"9b149793aac46a1d7550ca2db49e215feffe1178","modified":1643343276152},{"_id":"node_modules/hexo-theme-keep/source/css/font-awesome.min.css","hash":"2c2236d61417d354b5cbbc907dfc9c0eb1325a7f","modified":1643343276069},{"_id":"node_modules/hexo-theme-keep/source/css/style.styl","hash":"e193b9f313c20f91504e4115a07e94e93ac383f8","modified":1643343276215},{"_id":"node_modules/hexo-theme-keep/source/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1643343276224},{"_id":"node_modules/hexo-theme-keep/source/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1643343276226},{"_id":"node_modules/hexo-theme-keep/source/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1643343276259},{"_id":"node_modules/hexo-theme-keep/source/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1643343276261},{"_id":"node_modules/hexo-theme-keep/source/images/upyun.png","hash":"f014175dd78c3ed5249e69c91603e20a3efcd330","modified":1643343276174},{"_id":"node_modules/hexo-theme-keep/source/js/back2top.js","hash":"4be3dfc5ea5d134de22dddce950204c3fc05a659","modified":1643343276145},{"_id":"node_modules/hexo-theme-keep/source/js/code-copy.js","hash":"0fa4f5c6b1b4fa2dd059a3fabd975cb5236aa68e","modified":1643343276146},{"_id":"node_modules/hexo-theme-keep/source/js/dark-light-toggle.js","hash":"3941485684abdc9170f68b536c7cab57f03d68db","modified":1643343276148},{"_id":"node_modules/hexo-theme-keep/source/js/header-shrink.js","hash":"5a95ba1079638342689aa31ae331b0ad29423cfb","modified":1643343276151},{"_id":"node_modules/hexo-theme-keep/source/js/lazyload.js","hash":"9b1d7be063feff3a4268190575959a81604cef95","modified":1643343276154},{"_id":"node_modules/hexo-theme-keep/source/js/left-side-toggle.js","hash":"2396af1662b0cc8bf525c7cfed2f212a752a3b20","modified":1643343276156},{"_id":"node_modules/hexo-theme-keep/source/js/local-search.js","hash":"a76838dbc9b3dc683b7653d0e60c2a824316d598","modified":1643343276160},{"_id":"node_modules/hexo-theme-keep/source/js/main.js","hash":"52f9e2ccb2b93399bf2480aac989c702484b8aec","modified":1643343276161},{"_id":"node_modules/hexo-theme-keep/source/js/toc.js","hash":"089573f669c7eaae7b3b88a1f4b94c630983f520","modified":1643343276163},{"_id":"node_modules/hexo-theme-keep/source/js/utils.js","hash":"356c23107a336b682a7101dfc856fa6e0e6cdb76","modified":1643343276166},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1643343276135},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1643343276316},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1643343276336},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1643343276293},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/comment.ejs","hash":"3567cb1acb984e13cf7b6ac047467298cd6e98e3","modified":1643343276088},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/gitalk.ejs","hash":"cff08caa0a70bf276500ccdbf2965865399d985b","modified":1643343276095},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/twikoo.ejs","hash":"5d75b54edfcfb6112ac2c50fa7f4040e3716261d","modified":1643343276127},{"_id":"node_modules/hexo-theme-keep/layout/_partial/pjax/pjax.ejs","hash":"db76ce10f71e0aed717c4734ef2efbdc4b860c16","modified":1643343276115},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/valine.ejs","hash":"1c58eb3e1f0bf06758787ff91c56924210de6665","modified":1643343276128},{"_id":"node_modules/hexo-theme-keep/source/css/common/animated.styl","hash":"064493c99c4d1d19803fc544251f4fbc491e7a1d","modified":1643343276176},{"_id":"node_modules/hexo-theme-keep/source/css/common/basic.styl","hash":"2ecd4b0d469038a0753ad2de3eb2ba8c20f809db","modified":1643343276184},{"_id":"node_modules/hexo-theme-keep/source/css/common/keep-theme.styl","hash":"48acc1b0b18b5c34d758118bad135b7cea18b5a1","modified":1643343276203},{"_id":"node_modules/hexo-theme-keep/source/css/common/markdown.styl","hash":"73a96b2e7bdbaa1e98fd2a9928a05c56763d9064","modified":1643343276206},{"_id":"node_modules/hexo-theme-keep/source/css/common/variables.styl","hash":"db80d2ad6d99267bbc13abe7b11660cae04cc023","modified":1643343276223},{"_id":"node_modules/hexo-theme-keep/source/css/layout/archive-content.styl","hash":"254ca2715de67d5783adfae40723a7917b6d9f8a","modified":1643343276177},{"_id":"node_modules/hexo-theme-keep/source/css/layout/article-content.styl","hash":"8f62a171debaa09d653328d0c76e170f82351a40","modified":1643343276181},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-content.styl","hash":"9af1e7fbc52aad0b4a47593813961a32a1d2b5c5","modified":1643343276186},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-list.styl","hash":"28ea212b14e664d08de4ce93db1e0153e48a11ed","modified":1643343276187},{"_id":"node_modules/hexo-theme-keep/source/css/layout/home-content.styl","hash":"029336439c79ece32d25f8fee9dc018206fbcd1b","modified":1643343276201},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page.styl","hash":"c189508f4c6d807ef822af7bb9177f12e7532b94","modified":1643343276210},{"_id":"node_modules/hexo-theme-keep/source/css/layout/tag-content.styl","hash":"73af0b51aee119b2135dc8cd53cd3a3ad215fff6","modified":1643343276217},{"_id":"node_modules/hexo-theme-keep/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1643343276144},{"_id":"node_modules/hexo-theme-keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1643343276162},{"_id":"node_modules/hexo-theme-keep/source/css/common/codeblock/code-theme.styl","hash":"8b6131af54382b7959c255d58c52474564c91bf8","modified":1643343276189},{"_id":"node_modules/hexo-theme-keep/source/css/common/codeblock/copy-code.styl","hash":"eac367ec543527a7533490fa19b451a452684614","modified":1643343276193},{"_id":"node_modules/hexo-theme-keep/source/css/common/codeblock/highlight.styl","hash":"081f08ed399c4fc6227ab15109595a211693462b","modified":1643343276199},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/archive-list.styl","hash":"e85adfdd6fd83d2529988da644df51ddffbc87f5","modified":1643343276179},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/article-copyright-info.styl","hash":"ae286cb8c7e788a7d393774c9e9c394352e48e72","modified":1643343276182},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/article-meta-info.styl","hash":"8ca83a4fe1afbb15669becebcde3ed0e12ac07bb","modified":1643343276183},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/first-screen.styl","hash":"9422e7d052f9e8a81d5a9acf12af9670fe2c41bb","modified":1643343276194},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/footer.styl","hash":"0610a37f2eba1b6ee2ed138e3367d80be55c9d7d","modified":1643343276195},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/header.styl","hash":"2bfe1bddb6224958f29e77bcb730cb7af547a5ae","modified":1643343276198},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/image-viewer.styl","hash":"fb82ac6589304cf1e3ed7ff2904108641882ddbc","modified":1643343276202},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/local-search.styl","hash":"a381afa2de855d968810c4f6680436fd31c63d55","modified":1643343276204},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/page-template.styl","hash":"97768d3f95e8cf36fd3f783a5deb7e8fcaa5c67d","modified":1643343276208},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/paginator.styl","hash":"2fbe611351cdeee678626c22aa268132693936b2","modified":1643343276211},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post-tools.styl","hash":"7c642dfdd54ed60aadb2f162e25c4fc5720716b7","modified":1643343276212},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/progress-bar.styl","hash":"c2b9474d130df3605578b77d76c604234a2b0f6f","modified":1643343276213},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/side-tools.styl","hash":"f1cec5eb066c13f17d0acc997790404d059fbd3f","modified":1643343276214},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/tagcloud.styl","hash":"39d03031033aa3bb9d3a76fdb5056966334e9221","modified":1643343276218},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/toc.styl","hash":"c19d5833234c510ac1b8358cfcb7e33af29c3f6d","modified":1643343276219},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/comment.styl","hash":"9874482d9a8bf623abc28f8fa9c2bbfeb55067a6","modified":1643343276191},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/gitalk.styl","hash":"09d223d23c8f032da4f156efebab46102b15942d","modified":1643343276196},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/twikoo.styl","hash":"8225224a5c6d688e4ecd2e5557e8b2c5c43e2cf4","modified":1643343276221},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/valine.styl","hash":"dbff6bc6ecb6a20068047e6f7532e1d2df627929","modified":1643343276222},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1643343276328},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1643343276314},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1643343276322},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1643343276340},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1643343276133},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1643343276287},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1643343276236},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1643343276141},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1643343276308},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1643343276230},{"_id":"node_modules/hexo-theme-keep/source/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1643343276257},{"_id":"public/atom.xml","hash":"a4adea49f09bd579dd66f95f860b67a03f22f387","modified":1643344301094},{"_id":"public/search.json","hash":"3ac9fcc473c36659b37f31cb228d055a61e448a1","modified":1643344301094},{"_id":"public/about/index.html","hash":"766e6cb727438eaf3b55a2124c6bf825fd51178f","modified":1643344301094},{"_id":"public/categories/index.html","hash":"c3d05361abfe2b6f0c6f1d6a330de196a6faa437","modified":1643344301094},{"_id":"public/tags/index.html","hash":"8cb5423bdbe1036493835f48dbe5a4d65facb1db","modified":1643344301094},{"_id":"public/categories/编程笔记/page/2/index.html","hash":"d82c7de0f4855f43c0caffb40028e54796aa6da9","modified":1643344301094},{"_id":"public/categories/编程笔记/Python/index.html","hash":"a07543194e7b4c79774bc6af1fd569a073ac1334","modified":1643344301094},{"_id":"public/categories/网站建设/Hexo/index.html","hash":"060f8e23d7378e6013f22df9f5059369aab9e3e1","modified":1643344301094},{"_id":"public/categories/网络资源/index.html","hash":"19348fa89658bd64f6ac3578d3fbf7abc3649c0b","modified":1643344301094},{"_id":"public/categories/编程笔记/Linux/index.html","hash":"677555eb1744ba93d2125b65fdeec1dfde9a2d86","modified":1643344301094},{"_id":"public/tags/Hexo/index.html","hash":"f2949e6da4b7fd2a2d943e97376ff4fd6f9c9b38","modified":1643344301094},{"_id":"public/tags/matery/index.html","hash":"44f89a642a81fbe3d47b74ac1f8f24f1fd3b2201","modified":1643344301094},{"_id":"public/tags/Linux/index.html","hash":"01dc29525c2b90dad6bd7b9989b491e8690f393a","modified":1643344301094},{"_id":"public/tags/正则表达式/index.html","hash":"686b7ad8b30251da6670c23e3ce13a341b07ce33","modified":1643344301094},{"_id":"public/tags/virtualenv/index.html","hash":"ac341709221f69f356c8abf372e77b8be4852bdf","modified":1643344301094},{"_id":"public/tags/Typora/index.html","hash":"1690b00c3b598e8fd5b181fd3461603df48baa5f","modified":1643344301094},{"_id":"public/tags/Vue/index.html","hash":"6c309d5ee0ac1f8171466123d97d21ad84c78a33","modified":1643344301094},{"_id":"public/tags/scrapy/index.html","hash":"bcd3766342364d8fed61e73db4d3e88bbc3699a8","modified":1643344301094},{"_id":"public/tags/谷歌广告/index.html","hash":"9b35a205c91f46fe438619e7563ae8f25a8a1151","modified":1643344301094},{"_id":"public/tags/万彩办公大师/index.html","hash":"5ec41a480a156c788f093a580503247e18748595","modified":1643344301094},{"_id":"public/tags/jsdeliver/index.html","hash":"edf1479efdc6a30fc08a0d28d165d4eecd8456d1","modified":1643344301094},{"_id":"public/tags/Github/index.html","hash":"8d2af16c781ceee2362a4ff26f3643aea8196474","modified":1643344301094},{"_id":"public/tags/CDN/index.html","hash":"212e5307e48962059d4e29599d97da1177bccc28","modified":1643344301094},{"_id":"public/tags/PicX/index.html","hash":"4796de6a73b5d40919022ae9764d0019ee1583d6","modified":1643344301094},{"_id":"public/tags/SM-MS/index.html","hash":"4e69ae54b35ee59254680c80595659c5dd041e2f","modified":1643344301094},{"_id":"public/tags/Aria2/index.html","hash":"3bc2e4f43973a9b055a7804cb7b4bc7f60b2c573","modified":1643344301094},{"_id":"public/tags/Rclone/index.html","hash":"c0e0877dbcec732561c580061623a439351635ad","modified":1643344301094},{"_id":"public/tags/Github-Actions/index.html","hash":"f53702f644c5b50dd3f5c936b5784984ac2c068d","modified":1643344301094},{"_id":"public/tags/Github-Pages/index.html","hash":"bd700b156e7899566e554421b6c1a26c3bef4b45","modified":1643344301094},{"_id":"public/tags/宝塔/index.html","hash":"03adb606fa15239f64eecb0e742e38250bac2599","modified":1643344301094},{"_id":"public/tags/clouddreve/index.html","hash":"6032ea0b2ccc4abd6ccec63778e99f639cfac46f","modified":1643344301094},{"_id":"public/tags/网盘/index.html","hash":"db678bc1c733f41e4bdb681b62e07ac141c917fc","modified":1643344301094},{"_id":"public/tags/数组/index.html","hash":"ffdbb7a842bf852ab6719af6f4d69f3237334003","modified":1643344301094},{"_id":"public/links/index.html","hash":"d2979526aeee235c19f0ce95a9ad64de00314ef7","modified":1643344301094},{"_id":"public/2022/01/25/win10环境hexo-admin插件实现本地后台管理博客/index.html","hash":"c67a32fd03b066879fc757818cefbe1a5c918ca0","modified":1643344301094},{"_id":"public/2022/01/25/Hexo主题hexo-theme-matery配置DaoVoice 实现在线聊天功能/index.html","hash":"0a4a9922f71fbfe53ef0be47f8c87eac30c161b7","modified":1643344301094},{"_id":"public/2022/01/25/scrapy安装失败/index.html","hash":"8d9fa61fcd438d8c7e71307273fae1d90816023c","modified":1643344301094},{"_id":"public/2022/01/25/只需3行代码15秒就能抠图的Python神库/index.html","hash":"67b3d26867331ca96e6a8caeead5345ef6de50fc","modified":1643344301094},{"_id":"public/2022/01/25/Get和Post请求的区别/index.html","hash":"1f29fd697a30e4e11208c883793968ff7f071335","modified":1643344301094},{"_id":"public/2022/01/25/Python中正则表达式的基本使用/index.html","hash":"0eacb1b18c4aacfed1c51151e26da7b4ba977602","modified":1643344301094},{"_id":"public/2022/01/25/免费及收费图床推荐/index.html","hash":"a51ec68870a3ff773c6fc59fccc2c0b992325aba","modified":1643344301094},{"_id":"public/2022/01/25/Python中if __name__ == '__main__' 该如何正确理解_/index.html","hash":"a84640b50e31abc72f7ddf23b42d98f475fa7583","modified":1643344301094},{"_id":"public/2022/01/25/【Keep主题】为Hexo博客添加谷歌广告/index.html","hash":"acc6b599cb0ca2c521045d042788bd012ce79c6f","modified":1643344301094},{"_id":"public/2022/01/23/Linux下安装软件的几种方法/index.html","hash":"f6376e19b484a610fa931fe6dadfe9769a3302dd","modified":1643344301094},{"_id":"public/2022/01/23/用Python打造一个文献下载器/index.html","hash":"da1b7771f9fdf670e67d4ab9dd62aca39a8bf044","modified":1643344301094},{"_id":"public/2022/01/19/利用Github Actions+Hexo+Github Pages实现完全在线写博客/index.html","hash":"3e2e192151ce404ff2337ca363f9336c16517ddf","modified":1643344301094},{"_id":"public/2022/01/19/宝塔面板部署Hexo/index.html","hash":"5640fb1b3b3888835e74a854a0c8e122ae5254af","modified":1643344301094},{"_id":"public/2022/01/19/宝塔面板安装Cloudreve——自建不限容量的在线网盘/index.html","hash":"a98c5778a20a1054c0cd227799c5e17a4ac1b07f","modified":1643344301094},{"_id":"public/2022/01/09/python中函数和方法的区别/index.html","hash":"41df87e277a67bf7d0642c38c6d8f618f6dc0c49","modified":1643344301094},{"_id":"public/2021/01/13/利用Aria2打造一个离线的OneDrive网盘/index.html","hash":"7c21d6f7a4edf6c73b71be6c863566af6e64911c","modified":1643344301094},{"_id":"public/2020/09/13/Python虚拟环境——virtualenv/index.html","hash":"bcb8269aaea8078400bb8cef30ed7869ea26f539","modified":1643344301094},{"_id":"public/2019/05/23/Vue 文档风格的 Typora 主题/index.html","hash":"eff31907fd82463081b42e72d84b09addaa25f96","modified":1643344301094},{"_id":"public/2018/08/13/前后端同学必会的Linux基础命令/index.html","hash":"7cf357513aad19ae5515f776c4b763160c1347bb","modified":1643344301094},{"_id":"public/2018/06/13/一款高效去除PDF水印的软件/index.html","hash":"c4e3d18b25439f3e83cffb054ea40a06ba24d829","modified":1643344301094},{"_id":"public/2017/04/13/数组的下标为什么从0开始/index.html","hash":"e90958a07185ba73ad1b3fd06881e474b5938055","modified":1643344301094},{"_id":"public/2017/01/25/几个常用的正则表达式可视化网站/index.html","hash":"e8a449547e565ce755ea1d6e2aaa791951844fec","modified":1643344301094},{"_id":"public/archives/index.html","hash":"de15edd04e4cee0c059db1cbbf321446345d65b0","modified":1643344301094},{"_id":"public/archives/page/2/index.html","hash":"de15edd04e4cee0c059db1cbbf321446345d65b0","modified":1643344301094},{"_id":"public/archives/page/3/index.html","hash":"de15edd04e4cee0c059db1cbbf321446345d65b0","modified":1643344301094},{"_id":"public/archives/2017/index.html","hash":"0ba52038642405376c69c05e597106dc1a68048a","modified":1643344301094},{"_id":"public/archives/2017/01/index.html","hash":"73b9239d1a78f7e9debfc073d584688c2eb9e0a7","modified":1643344301094},{"_id":"public/archives/2017/04/index.html","hash":"46657b29666ebf56d3d937ff10a7878cbf4db2c4","modified":1643344301094},{"_id":"public/archives/2018/index.html","hash":"e70db4bdd65d24d36118e6f5555851a458697aab","modified":1643344301094},{"_id":"public/archives/2018/06/index.html","hash":"03fe6bb39481114923f2cac1b0b84bf48dd1df4f","modified":1643344301094},{"_id":"public/archives/2018/08/index.html","hash":"2c537d4f330bb18a59b19b39a50ac6cd5fa318c3","modified":1643344301094},{"_id":"public/archives/2019/index.html","hash":"78057603fb01a57aca350da64dc8d0e2bf3cb743","modified":1643344301094},{"_id":"public/archives/2019/05/index.html","hash":"dbb27748117b5df6837365d91335222f3f4b77ef","modified":1643344301094},{"_id":"public/archives/2020/index.html","hash":"d7aebfb848f555c4174cae89bcac1d0cf7756302","modified":1643344301094},{"_id":"public/archives/2020/09/index.html","hash":"29b588322e2222516ac58a0f2ba6e273cd9b1783","modified":1643344301094},{"_id":"public/archives/2021/index.html","hash":"baea0f187dcd91af31ab5b945c0cb9e42dec3eb1","modified":1643344301094},{"_id":"public/archives/2021/01/index.html","hash":"7a5a330cbe1ada1c0781913fdd67c6cf15e5d9cc","modified":1643344301094},{"_id":"public/archives/2022/index.html","hash":"f8910b9482f13c10bdc88ca6beb7b378545d495e","modified":1643344301094},{"_id":"public/archives/2022/page/2/index.html","hash":"f8910b9482f13c10bdc88ca6beb7b378545d495e","modified":1643344301094},{"_id":"public/archives/2022/01/index.html","hash":"39a1d6accebf72a8f5a01918f6ae406ca8f8b06f","modified":1643344301094},{"_id":"public/archives/2022/01/page/2/index.html","hash":"39a1d6accebf72a8f5a01918f6ae406ca8f8b06f","modified":1643344301094},{"_id":"public/categories/编程笔记/index.html","hash":"b3d8ef5f9e541f228910c67ff74be30b9e3e7669","modified":1643344301094},{"_id":"public/categories/网站建设/index.html","hash":"57523e7f0967dea40bfa0cb7d698f8f666c58635","modified":1643344301094},{"_id":"public/index.html","hash":"4df40f64973ab3e28ccfcf467d956d3049f99615","modified":1643344301094},{"_id":"public/page/2/index.html","hash":"6e252194783ae20b527307eeb3afdf0a88ed105f","modified":1643344301094},{"_id":"public/page/3/index.html","hash":"be9be3bc5dffa58ecfa58b60616242d245c6b041","modified":1643344301094},{"_id":"public/tags/Python/index.html","hash":"b97b8ba1fedadf7564a3a317d5cd5d33272aa1f1","modified":1643344301094},{"_id":"public/ads.txt","hash":"4df9ddea0c1f84a5415bf7f4da1e39fae922ab37","modified":1643344301094},{"_id":"public/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1643344301094},{"_id":"public/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1643344301094},{"_id":"public/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1643344301094},{"_id":"public/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1643344301094},{"_id":"public/images/upyun.png","hash":"f014175dd78c3ed5249e69c91603e20a3efcd330","modified":1643344301094},{"_id":"public/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1643344301094},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1643344301094},{"_id":"public/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1643344301094},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1643344301094},{"_id":"public/js/back2top.js","hash":"fc8e85f6704e39ae3a613bbec5dd51d449be8010","modified":1643344301094},{"_id":"public/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1643344301094},{"_id":"public/css/style.css","hash":"2b98555bc781e2f5b702268980b8494292207321","modified":1643344301094},{"_id":"public/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1643344301094},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1643344301094},{"_id":"public/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1643344301094},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1643344301094},{"_id":"public/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1643344301094},{"_id":"public/js/dark-light-toggle.js","hash":"223e6f1d4e6e70956e4661b58c430e1c68def125","modified":1643344301094},{"_id":"public/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1643344301094},{"_id":"public/js/lazyload.js","hash":"95aad532f17d7a8119979fc61ade9e626308a2af","modified":1643344301094},{"_id":"public/js/left-side-toggle.js","hash":"618f7cfc45db4d82b2f1d00d8e9ee936bcf9043b","modified":1643344301094},{"_id":"public/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1643344301094},{"_id":"public/js/main.js","hash":"ca8ed228cc0bc234be74428d029cfd047eec0ed6","modified":1643344301094},{"_id":"public/js/toc.js","hash":"ae69bf65d2b30d299b6ca9e2361d3b6e0db3a077","modified":1643344301094},{"_id":"public/js/utils.js","hash":"a2413711ebf7ffc96eafec2ef45a5d243d3ccdb6","modified":1643344301094},{"_id":"public/css/common/animated.css","hash":"654c7588d80dc8b481a203e3071b3cedd41c7fde","modified":1643344301094},{"_id":"public/css/common/basic.css","hash":"05c0548b2d70355afcf4bc579043d001fb776f1e","modified":1643344301094},{"_id":"public/css/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1643344301094},{"_id":"public/css/common/markdown.css","hash":"8c9fb9f7fb403e76a4446a7e533ebe36dd702483","modified":1643344301094},{"_id":"public/css/common/variables.css","hash":"2fbd21c8a7e67eeb8293e54795b852599261bb6f","modified":1643344301094},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1643344301094},{"_id":"public/css/layout/article-content.css","hash":"032fd87dc40e0252a5ab59a12adc420371bd13bf","modified":1643344301094},{"_id":"public/css/layout/category-content.css","hash":"9687f9cbe029092b633fb804c28ecdcb54860511","modified":1643344301094},{"_id":"public/css/layout/category-list.css","hash":"672859a61a4e93c0514772112fb557395306e940","modified":1643344301094},{"_id":"public/css/layout/home-content.css","hash":"be1438b849ebf82cea573986fbbd1deed5334a72","modified":1643344301094},{"_id":"public/css/layout/page.css","hash":"c9d5a1244b1a393ebf63412cf9ffef43ca48d64e","modified":1643344301094},{"_id":"public/css/layout/tag-content.css","hash":"90b0cff1ef0228035cdca9ade2adef71c6c8fb5e","modified":1643344301094},{"_id":"public/css/common/codeblock/code-theme.css","hash":"5b22fdc854e149bf0432cb9365be7e54fcf17068","modified":1643344301094},{"_id":"public/css/common/codeblock/copy-code.css","hash":"b89f31aee2da7a9abe05293391a90602094095b8","modified":1643344301094},{"_id":"public/css/common/codeblock/highlight.css","hash":"f8ffabf67f1507c8c993c7e7c688eacfb1d5e927","modified":1643344301094},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1643344301094},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1643344301094},{"_id":"public/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1643344301094},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1643344301094},{"_id":"public/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1643344301094},{"_id":"public/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1643344301094},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1643344301094},{"_id":"public/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1643344301094},{"_id":"public/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1643344301094}],"Category":[{"name":"编程笔记","_id":"ckyxwrmlj0004uwvf5pz4ghl2"},{"name":"网站建设","_id":"ckyxwrmlx000buwvf8us7cy2s"},{"name":"Python","parent":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmmg000muwvf67fq7r65"},{"name":"Hexo","parent":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmn00016uwvf50jb4oqc"},{"name":"网络资源","_id":"ckyxwrmn4001fuwvf60d5heu2"},{"name":"Linux","parent":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmnh001xuwvf4g2whkh8"}],"Data":[{"_id":"links","data":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}],"Page":[{"title":"about","date":"2022-01-19T05:41:04.000Z","type":"about","comment":true,"_content":"# 个人简历\n小镇做题家。\n联系方式：howar.zheng#gmail.com(#替换为@)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-01-19 13:41:04\ntype: about\ncomment: true\n---\n# 个人简历\n小镇做题家。\n联系方式：howar.zheng#gmail.com(#替换为@)\n","updated":"2022-01-26T15:43:46.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckyxwrmkx0000uwvfcs7r6x2u","content":"<h1 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h1><p>小镇做题家。<br>联系方式：howar.zheng#gmail.com(#替换为@)</p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h1><p>小镇做题家。<br>联系方式：howar.zheng#gmail.com(#替换为@)</p>\n"},{"title":"categories","date":"2022-01-19T05:41:44.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-01-19 13:41:44\ntype: categories\n---\n","updated":"2022-01-26T15:43:46.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckyxwrmld0002uwvf5z1z1sbr","content":"","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"links","date":"2022-01-19T05:42:07.000Z","type":"links","comment":true,"_content":"**若要交换友链，请先将本站链接添加到你的网站，然后按下列<<格式>>留言：**  \n```yml\nname: HowarZheng\nlink: https://howarzheng.com/\ndescription: Stay Hungry, Stay Foolish\navatar: https://cdn.jsdelivr.net/gh/HowarZheng/howarzheng.github.io@Figure_Bed/20220120/头像.5zculxb5qso.jpg\n```\n\n\n","source":"links/index.md","raw":"---\ntitle: links\ndate: 2022-01-19 13:42:07\ntype: links\ncomment: true\n---\n**若要交换友链，请先将本站链接添加到你的网站，然后按下列<<格式>>留言：**  \n```yml\nname: HowarZheng\nlink: https://howarzheng.com/\ndescription: Stay Hungry, Stay Foolish\navatar: https://cdn.jsdelivr.net/gh/HowarZheng/howarzheng.github.io@Figure_Bed/20220120/头像.5zculxb5qso.jpg\n```\n\n\n","updated":"2022-01-26T15:43:46.000Z","path":"links/index.html","comments":1,"layout":"page","_id":"ckyxwrmlo0006uwvfev266zqt","content":"<p><strong>若要交换友链，请先将本站链接添加到你的网站，然后按下列&lt;&lt;格式&gt;&gt;留言：</strong>  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">HowarZheng</span></span><br><span class=\"line\"><span class=\"attr\">link:</span> <span class=\"string\">https://howarzheng.com/</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">Stay</span> <span class=\"string\">Hungry,</span> <span class=\"string\">Stay</span> <span class=\"string\">Foolish</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/HowarZheng/howarzheng.github.io@Figure_Bed/20220120/头像.5zculxb5qso.jpg</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><strong>若要交换友链，请先将本站链接添加到你的网站，然后按下列&lt;&lt;格式&gt;&gt;留言：</strong>  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">HowarZheng</span></span><br><span class=\"line\"><span class=\"attr\">link:</span> <span class=\"string\">https://howarzheng.com/</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">Stay</span> <span class=\"string\">Hungry,</span> <span class=\"string\">Stay</span> <span class=\"string\">Foolish</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/HowarZheng/howarzheng.github.io@Figure_Bed/20220120/头像.5zculxb5qso.jpg</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"tags","date":"2022-01-19T05:42:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-01-19 13:42:24\ntype: tags\n---\n","updated":"2022-01-26T15:43:46.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckyxwrmls0008uwvfbuno3962","content":"","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"Get和Post请求的区别","date":"2022-01-25T09:52:26.000Z","_content":"\n_Get请求和Post请求是HPPT中最常用的请求，那么他们有什么区别呢？_<br />**我们来看看标准答案：**\n\n> - GET在浏览器回退时是无害的，而POST会再次提交请求。\n> - GET产生的URL地址可以被Bookmark，而POST不可以。\n> - GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n> - GET请求只能进行url编码，而POST支持多种编码方式。\n> - GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n> - GET请求在URL中传送的参数是有长度限制的，而POST么有。\n> - 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n> - GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n> - GET参数通过URL传递，POST放在Request body中。\n\n以上标准答案来自[w3schools](https://www.w3schools.com/)。<br />到这里前端的小伙伴们可能会说，他们的区别是：\n> GET使用URL或Cookie传参，而POST将数据放在BODY中\n\n**这其实是错的！**<br />GET和POST是由HTTP协议定义的。在HTTP协议中，Method和Data（URL， Body， Header）是正交的两个概念，也就是说，使用哪个Method与应用层的数据如何传输是没有相互关系的。<br />HTTP没有要求，如果Method是POST数据就要放在BODY中。也没有要求，如果Method是GET，数据（参数）就一定要放在URL中而不能放在BODY中。<br />因此网上的那些说法都是错的！<br />HTTP是什么？Hyper Text Transfer Protocol（超文本传输协议）的缩写，是基于TCP/IP的关于数据如何在万维网中如何通信的协议。<br />**具有以下特征：**\n\n- 基于tcp/ip、一种网络应用层协议、超文本传输协议HyperText Transfer Protocol\n- 工作方式：客户端请求服务端应答的模式\n- 快速：无状态连接，灵活：可以传输任意对象，对象类型由Content-Type标记\n- 客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据。\n\n我们惊讶的发现，HTTP、Get和Post他们的底层都是TCP/IP，也就是说，GET/POST都是TCP链接。GET能做的，POST也能做。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。<br />HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。<br />另外，GET和POST还有一个重大区别：\n> GET产生一个TCP数据包；POST产生两个TCP数据包。\n\n- 对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n- 而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n> 参考文献：\n\n1. [https://www.oschina.net/news/77354/http-get-post-different](https://www.oschina.net/news/77354/http-get-post-different)\n1. [https://www.w3schools.com/](https://www.w3schools.com/)\n1. [https://juejin.im/entry/597ca6caf265da3e301e64db](https://juejin.im/entry/597ca6caf265da3e301e64db)\n","source":"_posts/Get和Post请求的区别.md","raw":"---\ntitle: Get和Post请求的区别\ndate: 2022-01-25 17:52:26\ntags:\n- Python\ncategories:\n- 编程笔记\n- \tPython\n---\n\n_Get请求和Post请求是HPPT中最常用的请求，那么他们有什么区别呢？_<br />**我们来看看标准答案：**\n\n> - GET在浏览器回退时是无害的，而POST会再次提交请求。\n> - GET产生的URL地址可以被Bookmark，而POST不可以。\n> - GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n> - GET请求只能进行url编码，而POST支持多种编码方式。\n> - GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n> - GET请求在URL中传送的参数是有长度限制的，而POST么有。\n> - 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n> - GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n> - GET参数通过URL传递，POST放在Request body中。\n\n以上标准答案来自[w3schools](https://www.w3schools.com/)。<br />到这里前端的小伙伴们可能会说，他们的区别是：\n> GET使用URL或Cookie传参，而POST将数据放在BODY中\n\n**这其实是错的！**<br />GET和POST是由HTTP协议定义的。在HTTP协议中，Method和Data（URL， Body， Header）是正交的两个概念，也就是说，使用哪个Method与应用层的数据如何传输是没有相互关系的。<br />HTTP没有要求，如果Method是POST数据就要放在BODY中。也没有要求，如果Method是GET，数据（参数）就一定要放在URL中而不能放在BODY中。<br />因此网上的那些说法都是错的！<br />HTTP是什么？Hyper Text Transfer Protocol（超文本传输协议）的缩写，是基于TCP/IP的关于数据如何在万维网中如何通信的协议。<br />**具有以下特征：**\n\n- 基于tcp/ip、一种网络应用层协议、超文本传输协议HyperText Transfer Protocol\n- 工作方式：客户端请求服务端应答的模式\n- 快速：无状态连接，灵活：可以传输任意对象，对象类型由Content-Type标记\n- 客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据。\n\n我们惊讶的发现，HTTP、Get和Post他们的底层都是TCP/IP，也就是说，GET/POST都是TCP链接。GET能做的，POST也能做。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。<br />HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。<br />另外，GET和POST还有一个重大区别：\n> GET产生一个TCP数据包；POST产生两个TCP数据包。\n\n- 对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n- 而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n> 参考文献：\n\n1. [https://www.oschina.net/news/77354/http-get-post-different](https://www.oschina.net/news/77354/http-get-post-different)\n1. [https://www.w3schools.com/](https://www.w3schools.com/)\n1. [https://juejin.im/entry/597ca6caf265da3e301e64db](https://juejin.im/entry/597ca6caf265da3e301e64db)\n","slug":"Get和Post请求的区别","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrml60001uwvf036ra13g","content":"<p><em>Get请求和Post请求是HPPT中最常用的请求，那么他们有什么区别呢？</em><br /><strong>我们来看看标准答案：</strong></p>\n<blockquote>\n<ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被Bookmark，而POST不可以。</li>\n<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n</blockquote>\n<p>以上标准答案来自<a class=\"link\"   href=\"https://www.w3schools.com/\" >w3schools<i class=\"fas fa-external-link-alt\"></i></a>。<br />到这里前端的小伙伴们可能会说，他们的区别是：</p>\n<blockquote>\n<p>GET使用URL或Cookie传参，而POST将数据放在BODY中</p>\n</blockquote>\n<p><strong>这其实是错的！</strong><br />GET和POST是由HTTP协议定义的。在HTTP协议中，Method和Data（URL， Body， Header）是正交的两个概念，也就是说，使用哪个Method与应用层的数据如何传输是没有相互关系的。<br />HTTP没有要求，如果Method是POST数据就要放在BODY中。也没有要求，如果Method是GET，数据（参数）就一定要放在URL中而不能放在BODY中。<br />因此网上的那些说法都是错的！<br />HTTP是什么？Hyper Text Transfer Protocol（超文本传输协议）的缩写，是基于TCP/IP的关于数据如何在万维网中如何通信的协议。<br /><strong>具有以下特征：</strong></p>\n<ul>\n<li>基于tcp/ip、一种网络应用层协议、超文本传输协议HyperText Transfer Protocol</li>\n<li>工作方式：客户端请求服务端应答的模式</li>\n<li>快速：无状态连接，灵活：可以传输任意对象，对象类型由Content-Type标记</li>\n<li>客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据。</li>\n</ul>\n<p>我们惊讶的发现，HTTP、Get和Post他们的底层都是TCP/IP，也就是说，GET/POST都是TCP链接。GET能做的，POST也能做。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。<br />HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。<br />另外，GET和POST还有一个重大区别：</p>\n<blockquote>\n<p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p>\n</blockquote>\n<ul>\n<li>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</li>\n<li>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。<blockquote>\n<p>参考文献：</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><a class=\"link\"   href=\"https://www.oschina.net/news/77354/http-get-post-different\" >https://www.oschina.net/news/77354/http-get-post-different<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.w3schools.com/\" >https://www.w3schools.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://juejin.im/entry/597ca6caf265da3e301e64db\" >https://juejin.im/entry/597ca6caf265da3e301e64db<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><em>Get请求和Post请求是HPPT中最常用的请求，那么他们有什么区别呢？</em><br /><strong>我们来看看标准答案：</strong></p>\n<blockquote>\n<ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被Bookmark，而POST不可以。</li>\n<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n</blockquote>\n<p>以上标准答案来自<a class=\"link\"   href=\"https://www.w3schools.com/\" >w3schools<i class=\"fas fa-external-link-alt\"></i></a>。<br />到这里前端的小伙伴们可能会说，他们的区别是：</p>\n<blockquote>\n<p>GET使用URL或Cookie传参，而POST将数据放在BODY中</p>\n</blockquote>\n<p><strong>这其实是错的！</strong><br />GET和POST是由HTTP协议定义的。在HTTP协议中，Method和Data（URL， Body， Header）是正交的两个概念，也就是说，使用哪个Method与应用层的数据如何传输是没有相互关系的。<br />HTTP没有要求，如果Method是POST数据就要放在BODY中。也没有要求，如果Method是GET，数据（参数）就一定要放在URL中而不能放在BODY中。<br />因此网上的那些说法都是错的！<br />HTTP是什么？Hyper Text Transfer Protocol（超文本传输协议）的缩写，是基于TCP/IP的关于数据如何在万维网中如何通信的协议。<br /><strong>具有以下特征：</strong></p>\n<ul>\n<li>基于tcp/ip、一种网络应用层协议、超文本传输协议HyperText Transfer Protocol</li>\n<li>工作方式：客户端请求服务端应答的模式</li>\n<li>快速：无状态连接，灵活：可以传输任意对象，对象类型由Content-Type标记</li>\n<li>客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据。</li>\n</ul>\n<p>我们惊讶的发现，HTTP、Get和Post他们的底层都是TCP/IP，也就是说，GET/POST都是TCP链接。GET能做的，POST也能做。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。<br />HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。<br />另外，GET和POST还有一个重大区别：</p>\n<blockquote>\n<p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p>\n</blockquote>\n<ul>\n<li>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</li>\n<li>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。<blockquote>\n<p>参考文献：</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><a class=\"link\"   href=\"https://www.oschina.net/news/77354/http-get-post-different\" >https://www.oschina.net/news/77354/http-get-post-different<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.w3schools.com/\" >https://www.w3schools.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://juejin.im/entry/597ca6caf265da3e301e64db\" >https://juejin.im/entry/597ca6caf265da3e301e64db<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"Hexo主题hexo-theme-matery配置DaoVoice 实现在线聊天功能","date":"2022-01-25T10:01:26.000Z","_content":"\n**DaoVoice 可以提供在线联系的功能，可以让静态博客Hexo更加多样和完整。**<br />设置完成效果如下：<br />![](https://vip1.loli.io/2022/01/25/bUaPyOcKD5orTJs.png)\n<a name=\"toc-heading-1\"></a>\n\n## 实现方法\n<a name=\"toc-heading-2\"></a>\n### 注册\n首先需要注册一个 DaoVoice，[点击注册](http://dashboard.daovoice.io/get-started?invite_code=7f3d6e70)。<br />注册成功后，进入后台控制台，进入到 `应用设置-->安装到网站` 页面，**可以得到一个 ** **`app_id`**：**<br />![](https://vip1.loli.io/2022/01/25/mywG9pZqtken3RX.png)<br />**之后复制下的`app_id`\n\n![](https://vip2.loli.io/2022/01/25/ySOsQ39NpXlIcxm.png)<br />接下来，打开`\\themes\\hexo-theme-matery\\layout\\_partial`文件夹下的`footer.ejs`文件<br />在文件末尾写入：\n```javascript\n<script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n      app_id: \"刚刚复制的app_id\"\n    });\n  daovoice('update');\n  </script>\n```\n在主题配置文件 `_config.yml`，添加如下代码：\n```yaml\n# Online contact \ndaovoice: true\ndaovoice_app_id: 这里输入前面复制的app_id\n```\n[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置：<br />![image.png](https://vip1.loli.io/2022/01/25/8QbHw5uLxNmreIF.png)<br />位置可以在 hexo s 调试模式下进行调试，效果满意后部署就可以看到最终效果啦！\n","source":"_posts/Hexo主题hexo-theme-matery配置DaoVoice 实现在线聊天功能.md","raw":"---\ntitle: Hexo主题hexo-theme-matery配置DaoVoice 实现在线聊天功能\ndate: 2022-01-25 18:01:26\ntags:\n- Hexo\n- matery\ncategories:\n- 网站建设\n- \tHexo\n---\n\n**DaoVoice 可以提供在线联系的功能，可以让静态博客Hexo更加多样和完整。**<br />设置完成效果如下：<br />![](https://vip1.loli.io/2022/01/25/bUaPyOcKD5orTJs.png)\n<a name=\"toc-heading-1\"></a>\n\n## 实现方法\n<a name=\"toc-heading-2\"></a>\n### 注册\n首先需要注册一个 DaoVoice，[点击注册](http://dashboard.daovoice.io/get-started?invite_code=7f3d6e70)。<br />注册成功后，进入后台控制台，进入到 `应用设置-->安装到网站` 页面，**可以得到一个 ** **`app_id`**：**<br />![](https://vip1.loli.io/2022/01/25/mywG9pZqtken3RX.png)<br />**之后复制下的`app_id`\n\n![](https://vip2.loli.io/2022/01/25/ySOsQ39NpXlIcxm.png)<br />接下来，打开`\\themes\\hexo-theme-matery\\layout\\_partial`文件夹下的`footer.ejs`文件<br />在文件末尾写入：\n```javascript\n<script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n      app_id: \"刚刚复制的app_id\"\n    });\n  daovoice('update');\n  </script>\n```\n在主题配置文件 `_config.yml`，添加如下代码：\n```yaml\n# Online contact \ndaovoice: true\ndaovoice_app_id: 这里输入前面复制的app_id\n```\n[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置：<br />![image.png](https://vip1.loli.io/2022/01/25/8QbHw5uLxNmreIF.png)<br />位置可以在 hexo s 调试模式下进行调试，效果满意后部署就可以看到最终效果啦！\n","slug":"Hexo主题hexo-theme-matery配置DaoVoice 实现在线聊天功能","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmlf0003uwvf6yps9lv9","content":"<p><strong>DaoVoice 可以提供在线联系的功能，可以让静态博客Hexo更加多样和完整。</strong><br />设置完成效果如下：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/bUaPyOcKD5orTJs.png\"\n                     \n                ><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p><a name=\"toc-heading-2\"></a></p>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>首先需要注册一个 DaoVoice，<a class=\"link\"   href=\"http://dashboard.daovoice.io/get-started?invite_code=7f3d6e70\" >点击注册<i class=\"fas fa-external-link-alt\"></i></a>。<br />注册成功后，进入后台控制台，进入到 <code>应用设置--&gt;安装到网站</code> 页面，**可以得到一个 ** **<code>app_id</code><strong>：</strong><br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/mywG9pZqtken3RX.png\"\n                     \n                ><br />**之后复制下的<code>app_id</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/ySOsQ39NpXlIcxm.png\"\n                     \n                ><br />接下来，打开<code>\\themes\\hexo-theme-matery\\layout\\_partial</code>文件夹下的<code>footer.ejs</code>文件<br />在文件末尾写入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class=\"string\">&quot;DaoVoiceObject&quot;</span>]=r;i[r]=i[r]||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class=\"built_in\">arguments</span>)&#125;,i[r].l=<span class=\"number\">1</span>*<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class=\"number\">0</span>];a.async=<span class=\"number\">1</span>;a.src=g;a.charset=<span class=\"string\">&quot;utf-8&quot;</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>,<span class=\"string\">&quot;script&quot;</span>,(<span class=\"string\">&#x27;https:&#x27;</span> == <span class=\"built_in\">document</span>.location.protocol ? <span class=\"string\">&#x27;https:&#x27;</span> : <span class=\"string\">&#x27;http:&#x27;</span>) + <span class=\"string\">&quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;</span>,<span class=\"string\">&quot;daovoice&quot;</span>)</span><br><span class=\"line\">  daovoice(<span class=\"string\">&#x27;init&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">app_id</span>: <span class=\"string\">&quot;刚刚复制的app_id&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  daovoice(<span class=\"string\">&#x27;update&#x27;</span>);</span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>在主题配置文件 <code>_config.yml</code>，添加如下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Online contact </span></span><br><span class=\"line\"><span class=\"attr\">daovoice:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">daovoice_app_id:</span> <span class=\"string\">这里输入前面复制的app_id</span></span><br></pre></td></tr></table></figure>\n<p><a class=\"link\"   href=\"https://github.com/blinkfox/hexo-theme-matery\" >hexo-theme-matery<i class=\"fas fa-external-link-alt\"></i></a>主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/8QbHw5uLxNmreIF.png\"\n                      alt=\"image.png\"\n                ><br />位置可以在 hexo s 调试模式下进行调试，效果满意后部署就可以看到最终效果啦！</p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><strong>DaoVoice 可以提供在线联系的功能，可以让静态博客Hexo更加多样和完整。</strong><br />设置完成效果如下：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/bUaPyOcKD5orTJs.png\"\n                     \n                ><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p><a name=\"toc-heading-2\"></a></p>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>首先需要注册一个 DaoVoice，<a class=\"link\"   href=\"http://dashboard.daovoice.io/get-started?invite_code=7f3d6e70\" >点击注册<i class=\"fas fa-external-link-alt\"></i></a>。<br />注册成功后，进入后台控制台，进入到 <code>应用设置--&gt;安装到网站</code> 页面，**可以得到一个 ** **<code>app_id</code><strong>：</strong><br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/mywG9pZqtken3RX.png\"\n                     \n                ><br />**之后复制下的<code>app_id</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/ySOsQ39NpXlIcxm.png\"\n                     \n                ><br />接下来，打开<code>\\themes\\hexo-theme-matery\\layout\\_partial</code>文件夹下的<code>footer.ejs</code>文件<br />在文件末尾写入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class=\"string\">&quot;DaoVoiceObject&quot;</span>]=r;i[r]=i[r]||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class=\"built_in\">arguments</span>)&#125;,i[r].l=<span class=\"number\">1</span>*<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class=\"number\">0</span>];a.async=<span class=\"number\">1</span>;a.src=g;a.charset=<span class=\"string\">&quot;utf-8&quot;</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>,<span class=\"string\">&quot;script&quot;</span>,(<span class=\"string\">&#x27;https:&#x27;</span> == <span class=\"built_in\">document</span>.location.protocol ? <span class=\"string\">&#x27;https:&#x27;</span> : <span class=\"string\">&#x27;http:&#x27;</span>) + <span class=\"string\">&quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;</span>,<span class=\"string\">&quot;daovoice&quot;</span>)</span><br><span class=\"line\">  daovoice(<span class=\"string\">&#x27;init&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">app_id</span>: <span class=\"string\">&quot;刚刚复制的app_id&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  daovoice(<span class=\"string\">&#x27;update&#x27;</span>);</span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>在主题配置文件 <code>_config.yml</code>，添加如下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Online contact </span></span><br><span class=\"line\"><span class=\"attr\">daovoice:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">daovoice_app_id:</span> <span class=\"string\">这里输入前面复制的app_id</span></span><br></pre></td></tr></table></figure>\n<p><a class=\"link\"   href=\"https://github.com/blinkfox/hexo-theme-matery\" >hexo-theme-matery<i class=\"fas fa-external-link-alt\"></i></a>主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/8QbHw5uLxNmreIF.png\"\n                      alt=\"image.png\"\n                ><br />位置可以在 hexo s 调试模式下进行调试，效果满意后部署就可以看到最终效果啦！</p>\n"},{"title":"Linux下安装软件的几种方法","date":"2022-01-23T07:32:26.000Z","_content":"首先，我们来看Linux的各个目录的作用。<br />**_Linux的目录像一颗树：_**<br />\n\n![image.png](https://vip1.loli.io/2022/01/25/RCw9iTzF5JPpqQA.png)\n\n<br />每个目录作用如下：<br />![image.png](https://vip2.loli.io/2022/01/25/GlwjsxHNb1UWOgv.png)<br />**_了解了个目录作用后，现在接受Linux下安装应用程序的几种方式。_**<br />\n<a name=\"toc-heading-1\"></a>\n\n## 一、rpm包安装方式步骤：\n1、找到相应的软件包，比如soft.version.rpm，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.version.rpm所在的目录；<br />4、输入rpm -ivh soft.version.rpm<br />**详细介绍：**<br />**1. 安装：**<br />　　我只需简单的一句话，就可以说完。执行：<br />　　rpm –ivh rpm的软件包名<br />　 更高级的，请见下表：<br />　　rpm参数 参数说明<br />　　-i 安装软件<br />　　-t 测试安装，不是真的安装<br />　　-p 显示安装进度<br />　　-f 忽略任何错误<br />　　-U 升级安装<br />　　-v 检测套件是否正确安装<br />　　这些参数可以同时采用。更多的内容可以参考RPM的命令帮助。<br />**2. 卸载：**<br />　　我同样只需简单的一句话，就可以说完。执行：<br />　　rpm –e 软件名<br />　　不过要注意的是，后面使用的是软件名，而不是软件包名。例如，要安装software-1.2.3-1.i386.rpm这个包时，应执行：<br />　　rpm –ivh software-1.2.3-1.i386.rpm<br />　　而当卸载时，则应执行：<br />　　rpm –e software。<br />**另外，在Linux中还提供了象GnoRPM、kpackage等图形化的RPM工具，使得整个过程会更加简单。**\n<a name=\"toc-heading-2\"></a>\n## 二、deb包安装方式步骤：\n1、找到相应的软件包，比如soft.version.deb，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.version.deb所在的目录；<br />4、输入dpkg -i soft.version.deb<br />**详细介绍：**<br />这是Debian Linux提供的一个包管理器，它与RPM十分类似。但由于RPM出现得更早，所以在各种版本的Linux都常见到。而debian的包管理器dpkg则只出现在Debina Linux中，其它Linux版本一般都没有。<br />**1. 安装**<br />　 dpkg –i deb的软件包名<br />　　如：dpkg –i software-1.2.3-1.deb<br />**2. 卸载**<br />　　 dpkg –e 软件名<br />　　如：dpkg –e software<br />**3.查询：**查询当前系统安装的软件包：<br />dpkg –l ‘_软件包名_’<br />如：dpkg –l ‘_software_‘\n<a name=\"toc-heading-3\"></a>\n## 三、tar.gz源代码包安装方式：\n1、找到相应的软件包，比如soft.tar.gz，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.tar.gz所在的目录；<br />4、tar -xzvf soft.tar.gz //一般会生成一个soft目录<br />5、cd soft<br />6、./configure<br />7、make<br />8、make install<br />**详细介绍：**\n\n1. **安装：**<br />　　整个安装过程可以分为以下几步：<br />　　1） 取得应用软件：通过下载、购买光盘的方法获得；<br />　　2）解压缩文件：一般tar包，都会再做一次压缩，如gzip、bz2等，所以你需要先解压。如果是最常见的gz格式，则可以执行：“tar –xvzf 软件包名”，就可以一步完成解压与解包工作。如果不是，则先用解压软件，再执行“tar –xvf 解压后的tar包”进行解包；<br />　　3） 阅读附带的INSTALL文件、README文件；<br />　　4） 执行“./configure”命令为编译做好准备；<br />　　5） 执行“make”命令进行软件编译；<br />　　6） 执行“make install”完成安装；<br />　　7） 执行“make clean”删除安装时产生的临时文件。<br />　　好了，到此大功告成。我们就可以运行应用程序了。但这时，有的读者就会问，我怎么执行呢？这也是一个Linux特色的问题。其实，一般来说， Linux的应用软件的可执行文件会存放在/usr/local/bin目录下！不过这并不是“放四海皆准”的真理，最可靠的还是看这个软件的 INSTALL和README文件，一般都会有说明。\n1. **卸载：**<br />　　通常软件的开发者很少考虑到如何卸载自己的软件，而tar又仅是完成打包的工作，所以并没有提供良好的卸载方法。<br />　　那么是不是说就不能够卸载呢！其实也不是，有两个软件能够解决这个问题，那就是Kinstall和Kife，它们是tar包安装、卸载的黄金搭档。\n<a name=\"toc-heading-4\"></a>\n## 四、tar.bz2源代码包安装方式：\n1、找到相应的软件包，比如soft.tar.bz2，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.tar.bz2所在的目录；<br />4、tar -xjvf soft.tar.bz2 //一般会生成一个soft目录<br />5、cd soft<br />6、./configure<br />7、make<br />8、make install\n<a name=\"toc-heading-5\"></a>\n## 五、apt方式安装：（安装deb包）\n1、打开一个终端，su -成root用户；<br />2、apt-cache search soft 注：soft是你要找的软件的名称或相关信息<br />3、如果2中找到了软件soft.version，则用apt-get install soft.version命令安装软件<br />注：只要你可以上网，只需要用apt-cache search查找软件，用apt-get install软件<br />详细介绍：<br />apt-get是debian，ubuntu发行版的包管理工具，与红帽中的yum工具非常类似。<br />apt-get命令一般需要[root权限](http://baike.baidu.com/view/3967294.htm)执行，所以一般跟着sudo命令例sudo apt-get xxxx\n```bash\napt-get install packagename——安装一个新软件包（参见下文的aptitude）\napt-get remove packagename——卸载一个已安装的软件包（保留配置文件）\napt-get --purge remove packagename——卸载一个已安装的软件包（删除配置文件）\ndpkg --force-all --purge packagename ——有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。\napt-get autoremove——因为apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件。\napt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，可以释放大量的磁盘空间。如果需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。\napt-get clean——这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。\napt-get upgrade——更新所有已安装的软件包\napt-get dist-upgrade——将系统升级到新版本\napt-cache search string——在软件包列表中搜索字符串\napt-cache showpkg pkgs——显示软件包信息。\napt-cache stats——查看库里有多少软件\napt-cache dumpavail——打印可用软件包列表。\napt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。\napt-cache pkgnames——打印软件包列表中所有软件包的名称\n（需要定期运行这一命令以确保您的软件包列表是最新的）\n```\n> 简单的说： dpkg只能安装已经下载到本地机器上的deb包. apt-get能在线下载并安装deb包,能更新系统,\n> 且还能自动处理包与包之间的依赖问题,这个是dpkg工具所不具备的。\n\n<a name=\"toc-heading-6\"></a>\n## 六、yum方式安装：(安装rpm包)\nrpm 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：rpm -ivh。<br />rpm包的安装有个很大的缺点就是文件的关联性太大，有时装一个软件要安装很多其他的软件包，很麻烦。<br />所以为此RedHat小红帽开发了yum安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：yum -y install 。<br />yum并不是一中包，而是安装包的软件。\n> 简单的说： rpm 只能安装已经下载到本地机器上的rpm 包. yum能在线下载并安装rpm包,能更新系统,\n> 且还能自动处理包与包之间的依赖问题,这个是rpm 工具所不具备的。\n\n<a name=\"toc-heading-7\"></a>\n## 七、bin文件安装：\n如果你下载到的软件名是soft.bin，一般情况下是个可执行文件，安装方法如下：<br />1、打开一个终端，su -成root用户；<br />2、chmod +x soft.bin<br />3、./soft.bin //运行这个命令就可以安装软件了\n<a name=\"toc-heading-8\"></a>\n## 八、不需要安装的软件：\n有了些软件，比如lumaqq，是不需要安装的，自带jre解压缩后可直接运行。假设<br />下载的是lumaqq.tar.gz，使用方法如下：<br />1、打开一个终端，su -成root用户；<br />2、tar -xzvf lumaqq.tar.gz //这一步会生成一个叫LumaQQ的目录<br />3、cd LumaQQ<br />4、chmod +x lumaqq //设置lumaqq这个程序文件为可运行<br />5、此时就可以运行lumaqq了，用命令./lumaqq即可，但每次运行要输入全路径或<br />切换到刚才生成的LumaQQ目录里<br />6、为了保证不设置路径就可以用，你可以在/bin目录下建立一个lumaqq的链接，<br />用命令ln -s lumaqq /bin/ 即可，以后任何时候打开一个终端输入lumaqq就可以<br />启动QQ聊天软件了<br />7、 如果你要想lumaqq有个菜单项，使用菜单编辑工具，比如Alacarte Menu<br />Editor，找到上面生成的LumaQQ目录里的lumaqq设置一个菜单项就可以了，当然你<br />也可以直接到 /usr/share/applications目录，按照里面其它*.desktop文件的格<br />式生成一个自己的desktop文件即可。\n> 参考文献：\n\n1. [https://blog.csdn.net/m0_37327416/article/details/78779532](https://blog.csdn.net/m0_37327416/article/details/78779532)\n1. [https://www.jianshu.com/p/e5057c1ca1a1](https://www.jianshu.com/p/e5057c1ca1a1)\n","source":"_posts/Linux下安装软件的几种方法.md","raw":"---\ntitle: Linux下安装软件的几种方法\ndate: 2022-01-23 15:32:26\ntags:\n- Linux\ncategories:\n- 编程笔记\n- \tLinux\n---\n首先，我们来看Linux的各个目录的作用。<br />**_Linux的目录像一颗树：_**<br />\n\n![image.png](https://vip1.loli.io/2022/01/25/RCw9iTzF5JPpqQA.png)\n\n<br />每个目录作用如下：<br />![image.png](https://vip2.loli.io/2022/01/25/GlwjsxHNb1UWOgv.png)<br />**_了解了个目录作用后，现在接受Linux下安装应用程序的几种方式。_**<br />\n<a name=\"toc-heading-1\"></a>\n\n## 一、rpm包安装方式步骤：\n1、找到相应的软件包，比如soft.version.rpm，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.version.rpm所在的目录；<br />4、输入rpm -ivh soft.version.rpm<br />**详细介绍：**<br />**1. 安装：**<br />　　我只需简单的一句话，就可以说完。执行：<br />　　rpm –ivh rpm的软件包名<br />　 更高级的，请见下表：<br />　　rpm参数 参数说明<br />　　-i 安装软件<br />　　-t 测试安装，不是真的安装<br />　　-p 显示安装进度<br />　　-f 忽略任何错误<br />　　-U 升级安装<br />　　-v 检测套件是否正确安装<br />　　这些参数可以同时采用。更多的内容可以参考RPM的命令帮助。<br />**2. 卸载：**<br />　　我同样只需简单的一句话，就可以说完。执行：<br />　　rpm –e 软件名<br />　　不过要注意的是，后面使用的是软件名，而不是软件包名。例如，要安装software-1.2.3-1.i386.rpm这个包时，应执行：<br />　　rpm –ivh software-1.2.3-1.i386.rpm<br />　　而当卸载时，则应执行：<br />　　rpm –e software。<br />**另外，在Linux中还提供了象GnoRPM、kpackage等图形化的RPM工具，使得整个过程会更加简单。**\n<a name=\"toc-heading-2\"></a>\n## 二、deb包安装方式步骤：\n1、找到相应的软件包，比如soft.version.deb，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.version.deb所在的目录；<br />4、输入dpkg -i soft.version.deb<br />**详细介绍：**<br />这是Debian Linux提供的一个包管理器，它与RPM十分类似。但由于RPM出现得更早，所以在各种版本的Linux都常见到。而debian的包管理器dpkg则只出现在Debina Linux中，其它Linux版本一般都没有。<br />**1. 安装**<br />　 dpkg –i deb的软件包名<br />　　如：dpkg –i software-1.2.3-1.deb<br />**2. 卸载**<br />　　 dpkg –e 软件名<br />　　如：dpkg –e software<br />**3.查询：**查询当前系统安装的软件包：<br />dpkg –l ‘_软件包名_’<br />如：dpkg –l ‘_software_‘\n<a name=\"toc-heading-3\"></a>\n## 三、tar.gz源代码包安装方式：\n1、找到相应的软件包，比如soft.tar.gz，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.tar.gz所在的目录；<br />4、tar -xzvf soft.tar.gz //一般会生成一个soft目录<br />5、cd soft<br />6、./configure<br />7、make<br />8、make install<br />**详细介绍：**\n\n1. **安装：**<br />　　整个安装过程可以分为以下几步：<br />　　1） 取得应用软件：通过下载、购买光盘的方法获得；<br />　　2）解压缩文件：一般tar包，都会再做一次压缩，如gzip、bz2等，所以你需要先解压。如果是最常见的gz格式，则可以执行：“tar –xvzf 软件包名”，就可以一步完成解压与解包工作。如果不是，则先用解压软件，再执行“tar –xvf 解压后的tar包”进行解包；<br />　　3） 阅读附带的INSTALL文件、README文件；<br />　　4） 执行“./configure”命令为编译做好准备；<br />　　5） 执行“make”命令进行软件编译；<br />　　6） 执行“make install”完成安装；<br />　　7） 执行“make clean”删除安装时产生的临时文件。<br />　　好了，到此大功告成。我们就可以运行应用程序了。但这时，有的读者就会问，我怎么执行呢？这也是一个Linux特色的问题。其实，一般来说， Linux的应用软件的可执行文件会存放在/usr/local/bin目录下！不过这并不是“放四海皆准”的真理，最可靠的还是看这个软件的 INSTALL和README文件，一般都会有说明。\n1. **卸载：**<br />　　通常软件的开发者很少考虑到如何卸载自己的软件，而tar又仅是完成打包的工作，所以并没有提供良好的卸载方法。<br />　　那么是不是说就不能够卸载呢！其实也不是，有两个软件能够解决这个问题，那就是Kinstall和Kife，它们是tar包安装、卸载的黄金搭档。\n<a name=\"toc-heading-4\"></a>\n## 四、tar.bz2源代码包安装方式：\n1、找到相应的软件包，比如soft.tar.bz2，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.tar.bz2所在的目录；<br />4、tar -xjvf soft.tar.bz2 //一般会生成一个soft目录<br />5、cd soft<br />6、./configure<br />7、make<br />8、make install\n<a name=\"toc-heading-5\"></a>\n## 五、apt方式安装：（安装deb包）\n1、打开一个终端，su -成root用户；<br />2、apt-cache search soft 注：soft是你要找的软件的名称或相关信息<br />3、如果2中找到了软件soft.version，则用apt-get install soft.version命令安装软件<br />注：只要你可以上网，只需要用apt-cache search查找软件，用apt-get install软件<br />详细介绍：<br />apt-get是debian，ubuntu发行版的包管理工具，与红帽中的yum工具非常类似。<br />apt-get命令一般需要[root权限](http://baike.baidu.com/view/3967294.htm)执行，所以一般跟着sudo命令例sudo apt-get xxxx\n```bash\napt-get install packagename——安装一个新软件包（参见下文的aptitude）\napt-get remove packagename——卸载一个已安装的软件包（保留配置文件）\napt-get --purge remove packagename——卸载一个已安装的软件包（删除配置文件）\ndpkg --force-all --purge packagename ——有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。\napt-get autoremove——因为apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件。\napt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，可以释放大量的磁盘空间。如果需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。\napt-get clean——这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。\napt-get upgrade——更新所有已安装的软件包\napt-get dist-upgrade——将系统升级到新版本\napt-cache search string——在软件包列表中搜索字符串\napt-cache showpkg pkgs——显示软件包信息。\napt-cache stats——查看库里有多少软件\napt-cache dumpavail——打印可用软件包列表。\napt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。\napt-cache pkgnames——打印软件包列表中所有软件包的名称\n（需要定期运行这一命令以确保您的软件包列表是最新的）\n```\n> 简单的说： dpkg只能安装已经下载到本地机器上的deb包. apt-get能在线下载并安装deb包,能更新系统,\n> 且还能自动处理包与包之间的依赖问题,这个是dpkg工具所不具备的。\n\n<a name=\"toc-heading-6\"></a>\n## 六、yum方式安装：(安装rpm包)\nrpm 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：rpm -ivh。<br />rpm包的安装有个很大的缺点就是文件的关联性太大，有时装一个软件要安装很多其他的软件包，很麻烦。<br />所以为此RedHat小红帽开发了yum安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：yum -y install 。<br />yum并不是一中包，而是安装包的软件。\n> 简单的说： rpm 只能安装已经下载到本地机器上的rpm 包. yum能在线下载并安装rpm包,能更新系统,\n> 且还能自动处理包与包之间的依赖问题,这个是rpm 工具所不具备的。\n\n<a name=\"toc-heading-7\"></a>\n## 七、bin文件安装：\n如果你下载到的软件名是soft.bin，一般情况下是个可执行文件，安装方法如下：<br />1、打开一个终端，su -成root用户；<br />2、chmod +x soft.bin<br />3、./soft.bin //运行这个命令就可以安装软件了\n<a name=\"toc-heading-8\"></a>\n## 八、不需要安装的软件：\n有了些软件，比如lumaqq，是不需要安装的，自带jre解压缩后可直接运行。假设<br />下载的是lumaqq.tar.gz，使用方法如下：<br />1、打开一个终端，su -成root用户；<br />2、tar -xzvf lumaqq.tar.gz //这一步会生成一个叫LumaQQ的目录<br />3、cd LumaQQ<br />4、chmod +x lumaqq //设置lumaqq这个程序文件为可运行<br />5、此时就可以运行lumaqq了，用命令./lumaqq即可，但每次运行要输入全路径或<br />切换到刚才生成的LumaQQ目录里<br />6、为了保证不设置路径就可以用，你可以在/bin目录下建立一个lumaqq的链接，<br />用命令ln -s lumaqq /bin/ 即可，以后任何时候打开一个终端输入lumaqq就可以<br />启动QQ聊天软件了<br />7、 如果你要想lumaqq有个菜单项，使用菜单编辑工具，比如Alacarte Menu<br />Editor，找到上面生成的LumaQQ目录里的lumaqq设置一个菜单项就可以了，当然你<br />也可以直接到 /usr/share/applications目录，按照里面其它*.desktop文件的格<br />式生成一个自己的desktop文件即可。\n> 参考文献：\n\n1. [https://blog.csdn.net/m0_37327416/article/details/78779532](https://blog.csdn.net/m0_37327416/article/details/78779532)\n1. [https://www.jianshu.com/p/e5057c1ca1a1](https://www.jianshu.com/p/e5057c1ca1a1)\n","slug":"Linux下安装软件的几种方法","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmlq0007uwvfhbtrfmxg","content":"<p>首先，我们来看Linux的各个目录的作用。<br /><strong><em>Linux的目录像一颗树：</em></strong><br /></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/RCw9iTzF5JPpqQA.png\"\n                      alt=\"image.png\"\n                ></p>\n<p><br />每个目录作用如下：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/GlwjsxHNb1UWOgv.png\"\n                      alt=\"image.png\"\n                ><br /><strong><em>了解了个目录作用后，现在接受Linux下安装应用程序的几种方式。</em></strong><br /><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"一、rpm包安装方式步骤：\"><a href=\"#一、rpm包安装方式步骤：\" class=\"headerlink\" title=\"一、rpm包安装方式步骤：\"></a>一、rpm包安装方式步骤：</h2><p>1、找到相应的软件包，比如soft.version.rpm，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.version.rpm所在的目录；<br />4、输入rpm -ivh soft.version.rpm<br /><strong>详细介绍：</strong><br /><strong>1. 安装：</strong><br />　　我只需简单的一句话，就可以说完。执行：<br />　　rpm –ivh rpm的软件包名<br />　 更高级的，请见下表：<br />　　rpm参数 参数说明<br />　　-i 安装软件<br />　　-t 测试安装，不是真的安装<br />　　-p 显示安装进度<br />　　-f 忽略任何错误<br />　　-U 升级安装<br />　　-v 检测套件是否正确安装<br />　　这些参数可以同时采用。更多的内容可以参考RPM的命令帮助。<br /><strong>2. 卸载：</strong><br />　　我同样只需简单的一句话，就可以说完。执行：<br />　　rpm –e 软件名<br />　　不过要注意的是，后面使用的是软件名，而不是软件包名。例如，要安装software-1.2.3-1.i386.rpm这个包时，应执行：<br />　　rpm –ivh software-1.2.3-1.i386.rpm<br />　　而当卸载时，则应执行：<br />　　rpm –e software。<br /><strong>另外，在Linux中还提供了象GnoRPM、kpackage等图形化的RPM工具，使得整个过程会更加简单。</strong><br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"二、deb包安装方式步骤：\"><a href=\"#二、deb包安装方式步骤：\" class=\"headerlink\" title=\"二、deb包安装方式步骤：\"></a>二、deb包安装方式步骤：</h2><p>1、找到相应的软件包，比如soft.version.deb，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.version.deb所在的目录；<br />4、输入dpkg -i soft.version.deb<br /><strong>详细介绍：</strong><br />这是Debian Linux提供的一个包管理器，它与RPM十分类似。但由于RPM出现得更早，所以在各种版本的Linux都常见到。而debian的包管理器dpkg则只出现在Debina Linux中，其它Linux版本一般都没有。<br /><strong>1. 安装</strong><br />　 dpkg –i deb的软件包名<br />　　如：dpkg –i software-1.2.3-1.deb<br /><strong>2. 卸载</strong><br />　　 dpkg –e 软件名<br />　　如：dpkg –e software<br /><strong>3.查询：</strong>查询当前系统安装的软件包：<br />dpkg –l ‘_软件包名_’<br />如：dpkg –l ‘_software_‘<br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"三、tar-gz源代码包安装方式：\"><a href=\"#三、tar-gz源代码包安装方式：\" class=\"headerlink\" title=\"三、tar.gz源代码包安装方式：\"></a>三、tar.gz源代码包安装方式：</h2><p>1、找到相应的软件包，比如soft.tar.gz，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.tar.gz所在的目录；<br />4、tar -xzvf soft.tar.gz //一般会生成一个soft目录<br />5、cd soft<br />6、./configure<br />7、make<br />8、make install<br /><strong>详细介绍：</strong></p>\n<ol>\n<li><strong>安装：</strong><br />　　整个安装过程可以分为以下几步：<br />　　1） 取得应用软件：通过下载、购买光盘的方法获得；<br />　　2）解压缩文件：一般tar包，都会再做一次压缩，如gzip、bz2等，所以你需要先解压。如果是最常见的gz格式，则可以执行：“tar –xvzf 软件包名”，就可以一步完成解压与解包工作。如果不是，则先用解压软件，再执行“tar –xvf 解压后的tar包”进行解包；<br />　　3） 阅读附带的INSTALL文件、README文件；<br />　　4） 执行“./configure”命令为编译做好准备；<br />　　5） 执行“make”命令进行软件编译；<br />　　6） 执行“make install”完成安装；<br />　　7） 执行“make clean”删除安装时产生的临时文件。<br />　　好了，到此大功告成。我们就可以运行应用程序了。但这时，有的读者就会问，我怎么执行呢？这也是一个Linux特色的问题。其实，一般来说， Linux的应用软件的可执行文件会存放在/usr/local/bin目录下！不过这并不是“放四海皆准”的真理，最可靠的还是看这个软件的 INSTALL和README文件，一般都会有说明。</li>\n<li><strong>卸载：</strong><br />　　通常软件的开发者很少考虑到如何卸载自己的软件，而tar又仅是完成打包的工作，所以并没有提供良好的卸载方法。<br />　　那么是不是说就不能够卸载呢！其实也不是，有两个软件能够解决这个问题，那就是Kinstall和Kife，它们是tar包安装、卸载的黄金搭档。<br><a name=\"toc-heading-4\"></a><h2 id=\"四、tar-bz2源代码包安装方式：\"><a href=\"#四、tar-bz2源代码包安装方式：\" class=\"headerlink\" title=\"四、tar.bz2源代码包安装方式：\"></a>四、tar.bz2源代码包安装方式：</h2>1、找到相应的软件包，比如soft.tar.bz2，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.tar.bz2所在的目录；<br />4、tar -xjvf soft.tar.bz2 //一般会生成一个soft目录<br />5、cd soft<br />6、./configure<br />7、make<br />8、make install<br><a name=\"toc-heading-5\"></a><h2 id=\"五、apt方式安装：（安装deb包）\"><a href=\"#五、apt方式安装：（安装deb包）\" class=\"headerlink\" title=\"五、apt方式安装：（安装deb包）\"></a>五、apt方式安装：（安装deb包）</h2>1、打开一个终端，su -成root用户；<br />2、apt-cache search soft 注：soft是你要找的软件的名称或相关信息<br />3、如果2中找到了软件soft.version，则用apt-get install soft.version命令安装软件<br />注：只要你可以上网，只需要用apt-cache search查找软件，用apt-get install软件<br />详细介绍：<br />apt-get是debian，ubuntu发行版的包管理工具，与红帽中的yum工具非常类似。<br />apt-get命令一般需要<a class=\"link\"   href=\"http://baike.baidu.com/view/3967294.htm\" >root权限<i class=\"fas fa-external-link-alt\"></i></a>执行，所以一般跟着sudo命令例sudo apt-get xxxx<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install packagename——安装一个新软件包（参见下文的aptitude）</span><br><span class=\"line\">apt-get remove packagename——卸载一个已安装的软件包（保留配置文件）</span><br><span class=\"line\">apt-get --purge remove packagename——卸载一个已安装的软件包（删除配置文件）</span><br><span class=\"line\">dpkg --force-all --purge packagename ——有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。</span><br><span class=\"line\">apt-get autoremove——因为apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件。</span><br><span class=\"line\">apt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，可以释放大量的磁盘空间。如果需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。</span><br><span class=\"line\">apt-get clean——这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。</span><br><span class=\"line\">apt-get upgrade——更新所有已安装的软件包</span><br><span class=\"line\">apt-get dist-upgrade——将系统升级到新版本</span><br><span class=\"line\">apt-cache search string——在软件包列表中搜索字符串</span><br><span class=\"line\">apt-cache showpkg pkgs——显示软件包信息。</span><br><span class=\"line\">apt-cache stats——查看库里有多少软件</span><br><span class=\"line\">apt-cache dumpavail——打印可用软件包列表。</span><br><span class=\"line\">apt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。</span><br><span class=\"line\">apt-cache pkgnames——打印软件包列表中所有软件包的名称</span><br><span class=\"line\">（需要定期运行这一命令以确保您的软件包列表是最新的）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>简单的说： dpkg只能安装已经下载到本地机器上的deb包. apt-get能在线下载并安装deb包,能更新系统,<br>且还能自动处理包与包之间的依赖问题,这个是dpkg工具所不具备的。</p>\n</blockquote>\n</li>\n</ol>\n<p><a name=\"toc-heading-6\"></a></p>\n<h2 id=\"六、yum方式安装：-安装rpm包\"><a href=\"#六、yum方式安装：-安装rpm包\" class=\"headerlink\" title=\"六、yum方式安装：(安装rpm包)\"></a>六、yum方式安装：(安装rpm包)</h2><p>rpm 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：rpm -ivh。<br />rpm包的安装有个很大的缺点就是文件的关联性太大，有时装一个软件要安装很多其他的软件包，很麻烦。<br />所以为此RedHat小红帽开发了yum安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：yum -y install 。<br />yum并不是一中包，而是安装包的软件。</p>\n<blockquote>\n<p>简单的说： rpm 只能安装已经下载到本地机器上的rpm 包. yum能在线下载并安装rpm包,能更新系统,<br>且还能自动处理包与包之间的依赖问题,这个是rpm 工具所不具备的。</p>\n</blockquote>\n<p><a name=\"toc-heading-7\"></a></p>\n<h2 id=\"七、bin文件安装：\"><a href=\"#七、bin文件安装：\" class=\"headerlink\" title=\"七、bin文件安装：\"></a>七、bin文件安装：</h2><p>如果你下载到的软件名是soft.bin，一般情况下是个可执行文件，安装方法如下：<br />1、打开一个终端，su -成root用户；<br />2、chmod +x soft.bin<br />3、./soft.bin //运行这个命令就可以安装软件了<br><a name=\"toc-heading-8\"></a></p>\n<h2 id=\"八、不需要安装的软件：\"><a href=\"#八、不需要安装的软件：\" class=\"headerlink\" title=\"八、不需要安装的软件：\"></a>八、不需要安装的软件：</h2><p>有了些软件，比如lumaqq，是不需要安装的，自带jre解压缩后可直接运行。假设<br />下载的是lumaqq.tar.gz，使用方法如下：<br />1、打开一个终端，su -成root用户；<br />2、tar -xzvf lumaqq.tar.gz //这一步会生成一个叫LumaQQ的目录<br />3、cd LumaQQ<br />4、chmod +x lumaqq //设置lumaqq这个程序文件为可运行<br />5、此时就可以运行lumaqq了，用命令./lumaqq即可，但每次运行要输入全路径或<br />切换到刚才生成的LumaQQ目录里<br />6、为了保证不设置路径就可以用，你可以在/bin目录下建立一个lumaqq的链接，<br />用命令ln -s lumaqq /bin/ 即可，以后任何时候打开一个终端输入lumaqq就可以<br />启动QQ聊天软件了<br />7、 如果你要想lumaqq有个菜单项，使用菜单编辑工具，比如Alacarte Menu<br />Editor，找到上面生成的LumaQQ目录里的lumaqq设置一个菜单项就可以了，当然你<br />也可以直接到 /usr/share/applications目录，按照里面其它*.desktop文件的格<br />式生成一个自己的desktop文件即可。</p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/m0_37327416/article/details/78779532\" >https://blog.csdn.net/m0_37327416/article/details/78779532<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/e5057c1ca1a1\" >https://www.jianshu.com/p/e5057c1ca1a1<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>首先，我们来看Linux的各个目录的作用。<br /><strong><em>Linux的目录像一颗树：</em></strong><br /></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/RCw9iTzF5JPpqQA.png\"\n                      alt=\"image.png\"\n                ></p>\n<p><br />每个目录作用如下：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/GlwjsxHNb1UWOgv.png\"\n                      alt=\"image.png\"\n                ><br /><strong><em>了解了个目录作用后，现在接受Linux下安装应用程序的几种方式。</em></strong><br /><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"一、rpm包安装方式步骤：\"><a href=\"#一、rpm包安装方式步骤：\" class=\"headerlink\" title=\"一、rpm包安装方式步骤：\"></a>一、rpm包安装方式步骤：</h2><p>1、找到相应的软件包，比如soft.version.rpm，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.version.rpm所在的目录；<br />4、输入rpm -ivh soft.version.rpm<br /><strong>详细介绍：</strong><br /><strong>1. 安装：</strong><br />　　我只需简单的一句话，就可以说完。执行：<br />　　rpm –ivh rpm的软件包名<br />　 更高级的，请见下表：<br />　　rpm参数 参数说明<br />　　-i 安装软件<br />　　-t 测试安装，不是真的安装<br />　　-p 显示安装进度<br />　　-f 忽略任何错误<br />　　-U 升级安装<br />　　-v 检测套件是否正确安装<br />　　这些参数可以同时采用。更多的内容可以参考RPM的命令帮助。<br /><strong>2. 卸载：</strong><br />　　我同样只需简单的一句话，就可以说完。执行：<br />　　rpm –e 软件名<br />　　不过要注意的是，后面使用的是软件名，而不是软件包名。例如，要安装software-1.2.3-1.i386.rpm这个包时，应执行：<br />　　rpm –ivh software-1.2.3-1.i386.rpm<br />　　而当卸载时，则应执行：<br />　　rpm –e software。<br /><strong>另外，在Linux中还提供了象GnoRPM、kpackage等图形化的RPM工具，使得整个过程会更加简单。</strong><br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"二、deb包安装方式步骤：\"><a href=\"#二、deb包安装方式步骤：\" class=\"headerlink\" title=\"二、deb包安装方式步骤：\"></a>二、deb包安装方式步骤：</h2><p>1、找到相应的软件包，比如soft.version.deb，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.version.deb所在的目录；<br />4、输入dpkg -i soft.version.deb<br /><strong>详细介绍：</strong><br />这是Debian Linux提供的一个包管理器，它与RPM十分类似。但由于RPM出现得更早，所以在各种版本的Linux都常见到。而debian的包管理器dpkg则只出现在Debina Linux中，其它Linux版本一般都没有。<br /><strong>1. 安装</strong><br />　 dpkg –i deb的软件包名<br />　　如：dpkg –i software-1.2.3-1.deb<br /><strong>2. 卸载</strong><br />　　 dpkg –e 软件名<br />　　如：dpkg –e software<br /><strong>3.查询：</strong>查询当前系统安装的软件包：<br />dpkg –l ‘_软件包名_’<br />如：dpkg –l ‘_software_‘<br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"三、tar-gz源代码包安装方式：\"><a href=\"#三、tar-gz源代码包安装方式：\" class=\"headerlink\" title=\"三、tar.gz源代码包安装方式：\"></a>三、tar.gz源代码包安装方式：</h2><p>1、找到相应的软件包，比如soft.tar.gz，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.tar.gz所在的目录；<br />4、tar -xzvf soft.tar.gz //一般会生成一个soft目录<br />5、cd soft<br />6、./configure<br />7、make<br />8、make install<br /><strong>详细介绍：</strong></p>\n<ol>\n<li><strong>安装：</strong><br />　　整个安装过程可以分为以下几步：<br />　　1） 取得应用软件：通过下载、购买光盘的方法获得；<br />　　2）解压缩文件：一般tar包，都会再做一次压缩，如gzip、bz2等，所以你需要先解压。如果是最常见的gz格式，则可以执行：“tar –xvzf 软件包名”，就可以一步完成解压与解包工作。如果不是，则先用解压软件，再执行“tar –xvf 解压后的tar包”进行解包；<br />　　3） 阅读附带的INSTALL文件、README文件；<br />　　4） 执行“./configure”命令为编译做好准备；<br />　　5） 执行“make”命令进行软件编译；<br />　　6） 执行“make install”完成安装；<br />　　7） 执行“make clean”删除安装时产生的临时文件。<br />　　好了，到此大功告成。我们就可以运行应用程序了。但这时，有的读者就会问，我怎么执行呢？这也是一个Linux特色的问题。其实，一般来说， Linux的应用软件的可执行文件会存放在/usr/local/bin目录下！不过这并不是“放四海皆准”的真理，最可靠的还是看这个软件的 INSTALL和README文件，一般都会有说明。</li>\n<li><strong>卸载：</strong><br />　　通常软件的开发者很少考虑到如何卸载自己的软件，而tar又仅是完成打包的工作，所以并没有提供良好的卸载方法。<br />　　那么是不是说就不能够卸载呢！其实也不是，有两个软件能够解决这个问题，那就是Kinstall和Kife，它们是tar包安装、卸载的黄金搭档。<br><a name=\"toc-heading-4\"></a><h2 id=\"四、tar-bz2源代码包安装方式：\"><a href=\"#四、tar-bz2源代码包安装方式：\" class=\"headerlink\" title=\"四、tar.bz2源代码包安装方式：\"></a>四、tar.bz2源代码包安装方式：</h2>1、找到相应的软件包，比如soft.tar.bz2，下载到本机某个目录；<br />2、打开一个终端，su -成root用户；<br />3、cd soft.tar.bz2所在的目录；<br />4、tar -xjvf soft.tar.bz2 //一般会生成一个soft目录<br />5、cd soft<br />6、./configure<br />7、make<br />8、make install<br><a name=\"toc-heading-5\"></a><h2 id=\"五、apt方式安装：（安装deb包）\"><a href=\"#五、apt方式安装：（安装deb包）\" class=\"headerlink\" title=\"五、apt方式安装：（安装deb包）\"></a>五、apt方式安装：（安装deb包）</h2>1、打开一个终端，su -成root用户；<br />2、apt-cache search soft 注：soft是你要找的软件的名称或相关信息<br />3、如果2中找到了软件soft.version，则用apt-get install soft.version命令安装软件<br />注：只要你可以上网，只需要用apt-cache search查找软件，用apt-get install软件<br />详细介绍：<br />apt-get是debian，ubuntu发行版的包管理工具，与红帽中的yum工具非常类似。<br />apt-get命令一般需要<a class=\"link\"   href=\"http://baike.baidu.com/view/3967294.htm\" >root权限<i class=\"fas fa-external-link-alt\"></i></a>执行，所以一般跟着sudo命令例sudo apt-get xxxx<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install packagename——安装一个新软件包（参见下文的aptitude）</span><br><span class=\"line\">apt-get remove packagename——卸载一个已安装的软件包（保留配置文件）</span><br><span class=\"line\">apt-get --purge remove packagename——卸载一个已安装的软件包（删除配置文件）</span><br><span class=\"line\">dpkg --force-all --purge packagename ——有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。</span><br><span class=\"line\">apt-get autoremove——因为apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件。</span><br><span class=\"line\">apt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，可以释放大量的磁盘空间。如果需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。</span><br><span class=\"line\">apt-get clean——这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。</span><br><span class=\"line\">apt-get upgrade——更新所有已安装的软件包</span><br><span class=\"line\">apt-get dist-upgrade——将系统升级到新版本</span><br><span class=\"line\">apt-cache search string——在软件包列表中搜索字符串</span><br><span class=\"line\">apt-cache showpkg pkgs——显示软件包信息。</span><br><span class=\"line\">apt-cache stats——查看库里有多少软件</span><br><span class=\"line\">apt-cache dumpavail——打印可用软件包列表。</span><br><span class=\"line\">apt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。</span><br><span class=\"line\">apt-cache pkgnames——打印软件包列表中所有软件包的名称</span><br><span class=\"line\">（需要定期运行这一命令以确保您的软件包列表是最新的）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>简单的说： dpkg只能安装已经下载到本地机器上的deb包. apt-get能在线下载并安装deb包,能更新系统,<br>且还能自动处理包与包之间的依赖问题,这个是dpkg工具所不具备的。</p>\n</blockquote>\n</li>\n</ol>\n<p><a name=\"toc-heading-6\"></a></p>\n<h2 id=\"六、yum方式安装：-安装rpm包\"><a href=\"#六、yum方式安装：-安装rpm包\" class=\"headerlink\" title=\"六、yum方式安装：(安装rpm包)\"></a>六、yum方式安装：(安装rpm包)</h2><p>rpm 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：rpm -ivh。<br />rpm包的安装有个很大的缺点就是文件的关联性太大，有时装一个软件要安装很多其他的软件包，很麻烦。<br />所以为此RedHat小红帽开发了yum安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：yum -y install 。<br />yum并不是一中包，而是安装包的软件。</p>\n<blockquote>\n<p>简单的说： rpm 只能安装已经下载到本地机器上的rpm 包. yum能在线下载并安装rpm包,能更新系统,<br>且还能自动处理包与包之间的依赖问题,这个是rpm 工具所不具备的。</p>\n</blockquote>\n<p><a name=\"toc-heading-7\"></a></p>\n<h2 id=\"七、bin文件安装：\"><a href=\"#七、bin文件安装：\" class=\"headerlink\" title=\"七、bin文件安装：\"></a>七、bin文件安装：</h2><p>如果你下载到的软件名是soft.bin，一般情况下是个可执行文件，安装方法如下：<br />1、打开一个终端，su -成root用户；<br />2、chmod +x soft.bin<br />3、./soft.bin //运行这个命令就可以安装软件了<br><a name=\"toc-heading-8\"></a></p>\n<h2 id=\"八、不需要安装的软件：\"><a href=\"#八、不需要安装的软件：\" class=\"headerlink\" title=\"八、不需要安装的软件：\"></a>八、不需要安装的软件：</h2><p>有了些软件，比如lumaqq，是不需要安装的，自带jre解压缩后可直接运行。假设<br />下载的是lumaqq.tar.gz，使用方法如下：<br />1、打开一个终端，su -成root用户；<br />2、tar -xzvf lumaqq.tar.gz //这一步会生成一个叫LumaQQ的目录<br />3、cd LumaQQ<br />4、chmod +x lumaqq //设置lumaqq这个程序文件为可运行<br />5、此时就可以运行lumaqq了，用命令./lumaqq即可，但每次运行要输入全路径或<br />切换到刚才生成的LumaQQ目录里<br />6、为了保证不设置路径就可以用，你可以在/bin目录下建立一个lumaqq的链接，<br />用命令ln -s lumaqq /bin/ 即可，以后任何时候打开一个终端输入lumaqq就可以<br />启动QQ聊天软件了<br />7、 如果你要想lumaqq有个菜单项，使用菜单编辑工具，比如Alacarte Menu<br />Editor，找到上面生成的LumaQQ目录里的lumaqq设置一个菜单项就可以了，当然你<br />也可以直接到 /usr/share/applications目录，按照里面其它*.desktop文件的格<br />式生成一个自己的desktop文件即可。</p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/m0_37327416/article/details/78779532\" >https://blog.csdn.net/m0_37327416/article/details/78779532<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/e5057c1ca1a1\" >https://www.jianshu.com/p/e5057c1ca1a1<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"Python中if __name__ == '__main__' 该如何正确理解?","date":"2022-01-25T06:32:26.000Z","_content":"\n一个python的文件有两种使用的方法，第一是直接作为脚本执行，第二是import到其他的python脚本中被调用（模块重用）执行。而`if __name__ == 'main':`的作用就是控制这两种情况执行代码的过程，存在`if __name__ == 'main':`时，该脚本可以直接运行，但是作为模块导入后则不会提前运行。<br />例如test.py：\n\n```python\n#test.py\nprint('import the module')\ndef main():\n    print('Hello, World!')\nif __name__ == '__main__':\n    main()\n#end\n```\n直接运行该程序，会输出：\n```python\n>>>python test.py\nimport the module\nHello, World!\n```\n**同时输出了’import the module’和’Hello, World!’**<br />说明:`__name__ == '__main__'`是成立的，所以执行了下面的`main()`<br />**接下来请我们用import的方式**，在CMD中输入`python`，再输入`import test`\n```python\n>>>python\nPython 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>import test\nimport the module    #只输出了这个，没有Hello, World!\n#这个时候\n>>>test.__name__             \n'test'\n>>>__name__                     \n'__main__'\n```\n只输出了’import the module’，没有输出’Hello, World!’<br />可以看出这个时候test模块的**name**=’test’<br />而当前程序的**name**=’**main**‘<br />无论怎样，test.py中的**name** == ‘**main**‘都不会成立的，也就意味着，当你是通过import的方法来执行这个.py文件时，不能运行if **name** == ‘**main**‘:下面的语句或者函数。<br />总结：<br />**name** 是当前模块名，当模块被直接运行时模块名为 **main** 。这句话的意思就是，当模块被直接运行时，以下代码块将被运行，当模块是被导入时，代码块不被运行。\n\n","source":"_posts/Python中if __name__ == '__main__' 该如何正确理解_.md","raw":"---\ntitle: Python中if __name__ == '__main__' 该如何正确理解?\ndate: 2022-01-25 14:32:26\ntags:\n- Python\ncategories:\n- 编程笔记\n-  \tPython\n---\n\n一个python的文件有两种使用的方法，第一是直接作为脚本执行，第二是import到其他的python脚本中被调用（模块重用）执行。而`if __name__ == 'main':`的作用就是控制这两种情况执行代码的过程，存在`if __name__ == 'main':`时，该脚本可以直接运行，但是作为模块导入后则不会提前运行。<br />例如test.py：\n\n```python\n#test.py\nprint('import the module')\ndef main():\n    print('Hello, World!')\nif __name__ == '__main__':\n    main()\n#end\n```\n直接运行该程序，会输出：\n```python\n>>>python test.py\nimport the module\nHello, World!\n```\n**同时输出了’import the module’和’Hello, World!’**<br />说明:`__name__ == '__main__'`是成立的，所以执行了下面的`main()`<br />**接下来请我们用import的方式**，在CMD中输入`python`，再输入`import test`\n```python\n>>>python\nPython 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>import test\nimport the module    #只输出了这个，没有Hello, World!\n#这个时候\n>>>test.__name__             \n'test'\n>>>__name__                     \n'__main__'\n```\n只输出了’import the module’，没有输出’Hello, World!’<br />可以看出这个时候test模块的**name**=’test’<br />而当前程序的**name**=’**main**‘<br />无论怎样，test.py中的**name** == ‘**main**‘都不会成立的，也就意味着，当你是通过import的方法来执行这个.py文件时，不能运行if **name** == ‘**main**‘:下面的语句或者函数。<br />总结：<br />**name** 是当前模块名，当模块被直接运行时模块名为 **main** 。这句话的意思就是，当模块被直接运行时，以下代码块将被运行，当模块是被导入时，代码块不被运行。\n\n","slug":"Python中if __name__ == '__main__' 该如何正确理解_","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmlt0009uwvf41c03kv5","content":"<p>一个python的文件有两种使用的方法，第一是直接作为脚本执行，第二是import到其他的python脚本中被调用（模块重用）执行。而<code>if __name__ == &#39;main&#39;:</code>的作用就是控制这两种情况执行代码的过程，存在<code>if __name__ == &#39;main&#39;:</code>时，该脚本可以直接运行，但是作为模块导入后则不会提前运行。<br />例如test.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#test.py</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;import the module&#x27;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello, World!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"><span class=\"comment\">#end</span></span><br></pre></td></tr></table></figure>\n<p>直接运行该程序，会输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;python test.py</span><br><span class=\"line\"><span class=\"keyword\">import</span> the module</span><br><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure>\n<p><strong>同时输出了’import the module’和’Hello, World!’</strong><br />说明:<code>__name__ == &#39;__main__&#39;</code>是成立的，所以执行了下面的<code>main()</code><br /><strong>接下来请我们用import的方式</strong>，在CMD中输入<code>python</code>，再输入<code>import test</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;python</span><br><span class=\"line\">Python <span class=\"number\">3.6</span><span class=\"number\">.5</span> |Anaconda, Inc.| (default, Mar <span class=\"number\">29</span> <span class=\"number\">2018</span>, <span class=\"number\">13</span>:<span class=\"number\">32</span>:<span class=\"number\">41</span>) [MSC v<span class=\"number\">.1900</span> <span class=\"number\">64</span> bit (AMD64)] on win32</span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> test</span><br><span class=\"line\"><span class=\"keyword\">import</span> the module    <span class=\"comment\">#只输出了这个，没有Hello, World!</span></span><br><span class=\"line\"><span class=\"comment\">#这个时候</span></span><br><span class=\"line\">&gt;&gt;&gt;test.__name__             </span><br><span class=\"line\"><span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">&gt;&gt;&gt;__name__                     </span><br><span class=\"line\"><span class=\"string\">&#x27;__main__&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>只输出了’import the module’，没有输出’Hello, World!’<br />可以看出这个时候test模块的<strong>name</strong>=’test’<br />而当前程序的<strong>name</strong>=’<strong>main</strong>‘<br />无论怎样，test.py中的<strong>name</strong> == ‘<strong>main</strong>‘都不会成立的，也就意味着，当你是通过import的方法来执行这个.py文件时，不能运行if <strong>name</strong> == ‘<strong>main</strong>‘:下面的语句或者函数。<br />总结：<br /><strong>name</strong> 是当前模块名，当模块被直接运行时模块名为 <strong>main</strong> 。这句话的意思就是，当模块被直接运行时，以下代码块将被运行，当模块是被导入时，代码块不被运行。</p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>一个python的文件有两种使用的方法，第一是直接作为脚本执行，第二是import到其他的python脚本中被调用（模块重用）执行。而<code>if __name__ == &#39;main&#39;:</code>的作用就是控制这两种情况执行代码的过程，存在<code>if __name__ == &#39;main&#39;:</code>时，该脚本可以直接运行，但是作为模块导入后则不会提前运行。<br />例如test.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#test.py</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;import the module&#x27;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello, World!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"><span class=\"comment\">#end</span></span><br></pre></td></tr></table></figure>\n<p>直接运行该程序，会输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;python test.py</span><br><span class=\"line\"><span class=\"keyword\">import</span> the module</span><br><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure>\n<p><strong>同时输出了’import the module’和’Hello, World!’</strong><br />说明:<code>__name__ == &#39;__main__&#39;</code>是成立的，所以执行了下面的<code>main()</code><br /><strong>接下来请我们用import的方式</strong>，在CMD中输入<code>python</code>，再输入<code>import test</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;python</span><br><span class=\"line\">Python <span class=\"number\">3.6</span><span class=\"number\">.5</span> |Anaconda, Inc.| (default, Mar <span class=\"number\">29</span> <span class=\"number\">2018</span>, <span class=\"number\">13</span>:<span class=\"number\">32</span>:<span class=\"number\">41</span>) [MSC v<span class=\"number\">.1900</span> <span class=\"number\">64</span> bit (AMD64)] on win32</span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> test</span><br><span class=\"line\"><span class=\"keyword\">import</span> the module    <span class=\"comment\">#只输出了这个，没有Hello, World!</span></span><br><span class=\"line\"><span class=\"comment\">#这个时候</span></span><br><span class=\"line\">&gt;&gt;&gt;test.__name__             </span><br><span class=\"line\"><span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">&gt;&gt;&gt;__name__                     </span><br><span class=\"line\"><span class=\"string\">&#x27;__main__&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>只输出了’import the module’，没有输出’Hello, World!’<br />可以看出这个时候test模块的<strong>name</strong>=’test’<br />而当前程序的<strong>name</strong>=’<strong>main</strong>‘<br />无论怎样，test.py中的<strong>name</strong> == ‘<strong>main</strong>‘都不会成立的，也就意味着，当你是通过import的方法来执行这个.py文件时，不能运行if <strong>name</strong> == ‘<strong>main</strong>‘:下面的语句或者函数。<br />总结：<br /><strong>name</strong> 是当前模块名，当模块被直接运行时模块名为 <strong>main</strong> 。这句话的意思就是，当模块被直接运行时，以下代码块将被运行，当模块是被导入时，代码块不被运行。</p>\n"},{"title":"Python中正则表达式的基本使用","date":"2022-01-25T09:22:09.000Z","_content":"\n**字符串**是编程时涉及到的最多的一种**数据结构**，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。<br />正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它**“匹配”**了，否则，该字符串就是不合法的。<br />所以我们判断一个字符串是否是合法的Email的方法是：<br />**创建一个匹配Email的正则表达式；**\n\n1. 用该正则表达式去匹配用户的输入来判断是否合法。\n1. 因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。\n\n正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。\n> 官方文档：\n> 中文：[https://docs.python.org/zh-cn/3/library/re.html](https://docs.python.org/zh-cn/3/library/re.html)\n> 英文：[https://docs.python.org/3/library/re.html](https://docs.python.org/3/library/re.html)\n\n使用之前，需要引入正则模块(Regular Expression)：<br />`import re #引入正则表达式`<br />主要使用的方法 match(), 从左到右进行匹配：\n```python\n#pattern 为要校验的规则\n#str 为要进行校验的字符串\nresult = re.match(pattern, str) \n#如果result不为None,则group方法则对result进行数据提取\nresult.group()\n```\n匹配规则：<br />1️⃣单字符匹配规则：\n```python\n字符    功能\n.       匹配任意1个字符(除了\\n)\n[]      匹配[]中列举的字符\n\\d      匹配数字,也就是0-9\n\\D      匹配非数字,也就是匹配不是数字的字符\n\\s      匹配空白符,也就是 空格\\tab\n\\S      匹配非空白符,\\s取反\n\\w      陪陪单词字符, a-z, A-Z, 0-9, _\n\\W      匹配非单词字符, \\w取反\n```\n2️⃣表示数量的规则：\n```python\n字符    功能\n*       匹配前一个字符出现0次多次或者无限次,可有可无,可多可少\n+       匹配前一个字符出现1次多次或则无限次,直到出现一次\n?       匹配前一个字符出现1次或者0次,要么有1次,要么没有\n{m}     匹配前一个字符出现m次\n{m,}    匹配前一个字符至少出现m次\n{m,n}   匹配前一个字符出现m到n次\n```\n下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。\n```python\n模式    描述\n^    匹配字符串的开头\n$    匹配字符串的末尾。\n.    匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。\n[...]    用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'\n[^...]    不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。\nre*    匹配0个或多个的表达式。\nre+    匹配1个或多个的表达式。\nre?    匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式\nre{ n}     \nre{ n,}    精确匹配n个前面表达式。\nre{ n, m}    匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式\na| b    匹配a或b\n(re)    G匹配括号内的表达式，也表示一个组\n(?imx)    正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。\n(?-imx)    正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。\n(?: re)    类似 (...), 但是不表示一个组\n(?imx: re)    在括号中使用i, m, 或 x 可选标志\n(?-imx: re)    在括号中不使用i, m, 或 x 可选标志\n(?#...)    注释.\n(?= re)    前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。\n(?! re)    前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功\n(?> re)    匹配的独立模式，省去回溯。\n\\w    匹配字母数字\n\\W    匹配非字母数字\n\\s    匹配任意空白字符，等价于 [\\t\\n\\r\\f].\n\\S    匹配任意非空字符\n\\d    匹配任意数字，等价于 [0-9].\n\\D    匹配任意非数字\n\\A    匹配字符串开始\n\\Z    匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c\n\\z    匹配字符串结束\n\\G    匹配最后匹配完成的位置。\n\\b    匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。\n\\B    匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。\n\\n, \\t, 等.    匹配一个换行符。匹配一个制表符。等\n\\1...\\9    匹配第n个分组的子表达式。\n\\10    匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。\n```\n<a name=\"toc-heading-1\"></a>\n### re库中常用方法\n![image.png](https://vip2.loli.io/2022/01/25/83mX7AGTEdpNVry.png)\n<a name=\"toc-heading-2\"></a>\n\n### 修饰符总结\n![image.png](https://vip2.loli.io/2022/01/25/oik8KEGm6nbaVfC.png)\n<a name=\"toc-heading-3\"></a>\n\n### 常用正则表达式\n```python\n1、匹配email地址:\n[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?\n2、匹配网址URL：\n[a-zA-z]+://[^\\s]*\n3、匹配18位身份证号：\n^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9]|X)$\n4、匹配年月日格式：\n([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8])))\n5、匹配整数：\n^-?[1-9]\\d*$\n6、匹配正整数：\n^[1-9]\\d*$\n7、匹配负整数：\n^-[1-9]\\d*$\n8、匹配空白行：\n\\n\\s*\\r\n```\n> 参考文献：\n\n1. [https://www.jianshu.com/p/7fa6fe0b39af](https://www.jianshu.com/p/7fa6fe0b39af)\n1. [https://www.jianshu.com/p/773c32dcd254](https://www.jianshu.com/p/773c32dcd254)\n1. [https://blog.csdn.net/weixin_40136018/article/details/81183504](https://blog.csdn.net/weixin_40136018/article/details/81183504)\n1. [https://blog.csdn.net/weixin_40907382/article/details/79654372](https://blog.csdn.net/weixin_40907382/article/details/79654372)\n\n\n\n","source":"_posts/Python中正则表达式的基本使用.md","raw":"---\ntitle: Python中正则表达式的基本使用\ndate: 2022-01-25 17:22:09\ntags:\n- Python\n- 正则表达式\ncategories:\n- 编程笔记\n- \tPython\n---\n\n**字符串**是编程时涉及到的最多的一种**数据结构**，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。<br />正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它**“匹配”**了，否则，该字符串就是不合法的。<br />所以我们判断一个字符串是否是合法的Email的方法是：<br />**创建一个匹配Email的正则表达式；**\n\n1. 用该正则表达式去匹配用户的输入来判断是否合法。\n1. 因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。\n\n正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。\n> 官方文档：\n> 中文：[https://docs.python.org/zh-cn/3/library/re.html](https://docs.python.org/zh-cn/3/library/re.html)\n> 英文：[https://docs.python.org/3/library/re.html](https://docs.python.org/3/library/re.html)\n\n使用之前，需要引入正则模块(Regular Expression)：<br />`import re #引入正则表达式`<br />主要使用的方法 match(), 从左到右进行匹配：\n```python\n#pattern 为要校验的规则\n#str 为要进行校验的字符串\nresult = re.match(pattern, str) \n#如果result不为None,则group方法则对result进行数据提取\nresult.group()\n```\n匹配规则：<br />1️⃣单字符匹配规则：\n```python\n字符    功能\n.       匹配任意1个字符(除了\\n)\n[]      匹配[]中列举的字符\n\\d      匹配数字,也就是0-9\n\\D      匹配非数字,也就是匹配不是数字的字符\n\\s      匹配空白符,也就是 空格\\tab\n\\S      匹配非空白符,\\s取反\n\\w      陪陪单词字符, a-z, A-Z, 0-9, _\n\\W      匹配非单词字符, \\w取反\n```\n2️⃣表示数量的规则：\n```python\n字符    功能\n*       匹配前一个字符出现0次多次或者无限次,可有可无,可多可少\n+       匹配前一个字符出现1次多次或则无限次,直到出现一次\n?       匹配前一个字符出现1次或者0次,要么有1次,要么没有\n{m}     匹配前一个字符出现m次\n{m,}    匹配前一个字符至少出现m次\n{m,n}   匹配前一个字符出现m到n次\n```\n下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。\n```python\n模式    描述\n^    匹配字符串的开头\n$    匹配字符串的末尾。\n.    匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。\n[...]    用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'\n[^...]    不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。\nre*    匹配0个或多个的表达式。\nre+    匹配1个或多个的表达式。\nre?    匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式\nre{ n}     \nre{ n,}    精确匹配n个前面表达式。\nre{ n, m}    匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式\na| b    匹配a或b\n(re)    G匹配括号内的表达式，也表示一个组\n(?imx)    正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。\n(?-imx)    正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。\n(?: re)    类似 (...), 但是不表示一个组\n(?imx: re)    在括号中使用i, m, 或 x 可选标志\n(?-imx: re)    在括号中不使用i, m, 或 x 可选标志\n(?#...)    注释.\n(?= re)    前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。\n(?! re)    前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功\n(?> re)    匹配的独立模式，省去回溯。\n\\w    匹配字母数字\n\\W    匹配非字母数字\n\\s    匹配任意空白字符，等价于 [\\t\\n\\r\\f].\n\\S    匹配任意非空字符\n\\d    匹配任意数字，等价于 [0-9].\n\\D    匹配任意非数字\n\\A    匹配字符串开始\n\\Z    匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c\n\\z    匹配字符串结束\n\\G    匹配最后匹配完成的位置。\n\\b    匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。\n\\B    匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。\n\\n, \\t, 等.    匹配一个换行符。匹配一个制表符。等\n\\1...\\9    匹配第n个分组的子表达式。\n\\10    匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。\n```\n<a name=\"toc-heading-1\"></a>\n### re库中常用方法\n![image.png](https://vip2.loli.io/2022/01/25/83mX7AGTEdpNVry.png)\n<a name=\"toc-heading-2\"></a>\n\n### 修饰符总结\n![image.png](https://vip2.loli.io/2022/01/25/oik8KEGm6nbaVfC.png)\n<a name=\"toc-heading-3\"></a>\n\n### 常用正则表达式\n```python\n1、匹配email地址:\n[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?\n2、匹配网址URL：\n[a-zA-z]+://[^\\s]*\n3、匹配18位身份证号：\n^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9]|X)$\n4、匹配年月日格式：\n([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8])))\n5、匹配整数：\n^-?[1-9]\\d*$\n6、匹配正整数：\n^[1-9]\\d*$\n7、匹配负整数：\n^-[1-9]\\d*$\n8、匹配空白行：\n\\n\\s*\\r\n```\n> 参考文献：\n\n1. [https://www.jianshu.com/p/7fa6fe0b39af](https://www.jianshu.com/p/7fa6fe0b39af)\n1. [https://www.jianshu.com/p/773c32dcd254](https://www.jianshu.com/p/773c32dcd254)\n1. [https://blog.csdn.net/weixin_40136018/article/details/81183504](https://blog.csdn.net/weixin_40136018/article/details/81183504)\n1. [https://blog.csdn.net/weixin_40907382/article/details/79654372](https://blog.csdn.net/weixin_40907382/article/details/79654372)\n\n\n\n","slug":"Python中正则表达式的基本使用","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmlv000auwvf1drzea23","content":"<p><strong>字符串</strong>是编程时涉及到的最多的一种<strong>数据结构</strong>，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。<br />正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它<strong>“匹配”</strong>了，否则，该字符串就是不合法的。<br />所以我们判断一个字符串是否是合法的Email的方法是：<br /><strong>创建一个匹配Email的正则表达式；</strong></p>\n<ol>\n<li>用该正则表达式去匹配用户的输入来判断是否合法。</li>\n<li>因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。</li>\n</ol>\n<p>正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。</p>\n<blockquote>\n<p>官方文档：<br>中文：<a class=\"link\"   href=\"https://docs.python.org/zh-cn/3/library/re.html\" >https://docs.python.org/zh-cn/3/library/re.html<i class=\"fas fa-external-link-alt\"></i></a><br>英文：<a class=\"link\"   href=\"https://docs.python.org/3/library/re.html\" >https://docs.python.org/3/library/re.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>使用之前，需要引入正则模块(Regular Expression)：<br /><code>import re #引入正则表达式</code><br />主要使用的方法 match(), 从左到右进行匹配：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#pattern 为要校验的规则</span></span><br><span class=\"line\"><span class=\"comment\">#str 为要进行校验的字符串</span></span><br><span class=\"line\">result = re.match(pattern, <span class=\"built_in\">str</span>) </span><br><span class=\"line\"><span class=\"comment\">#如果result不为None,则group方法则对result进行数据提取</span></span><br><span class=\"line\">result.group()</span><br></pre></td></tr></table></figure>\n<p>匹配规则：<br />1️⃣单字符匹配规则：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符    功能</span><br><span class=\"line\">.       匹配任意<span class=\"number\">1</span>个字符(除了\\n)</span><br><span class=\"line\">[]      匹配[]中列举的字符</span><br><span class=\"line\">\\d      匹配数字,也就是<span class=\"number\">0</span>-<span class=\"number\">9</span></span><br><span class=\"line\">\\D      匹配非数字,也就是匹配不是数字的字符</span><br><span class=\"line\">\\s      匹配空白符,也就是 空格\\tab</span><br><span class=\"line\">\\S      匹配非空白符,\\s取反</span><br><span class=\"line\">\\w      陪陪单词字符, a-z, A-Z, <span class=\"number\">0</span>-<span class=\"number\">9</span>, _</span><br><span class=\"line\">\\W      匹配非单词字符, \\w取反</span><br></pre></td></tr></table></figure>\n<p>2️⃣表示数量的规则：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符    功能</span><br><span class=\"line\">*       匹配前一个字符出现<span class=\"number\">0</span>次多次或者无限次,可有可无,可多可少</span><br><span class=\"line\">+       匹配前一个字符出现<span class=\"number\">1</span>次多次或则无限次,直到出现一次</span><br><span class=\"line\">?       匹配前一个字符出现<span class=\"number\">1</span>次或者<span class=\"number\">0</span>次,要么有<span class=\"number\">1</span>次,要么没有</span><br><span class=\"line\">&#123;m&#125;     匹配前一个字符出现m次</span><br><span class=\"line\">&#123;m,&#125;    匹配前一个字符至少出现m次</span><br><span class=\"line\">&#123;m,n&#125;   匹配前一个字符出现m到n次</span><br></pre></td></tr></table></figure>\n<p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模式    描述</span><br><span class=\"line\">^    匹配字符串的开头</span><br><span class=\"line\">$    匹配字符串的末尾。</span><br><span class=\"line\">.    匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</span><br><span class=\"line\">[...]    用来表示一组字符,单独列出：[amk] 匹配 <span class=\"string\">&#x27;a&#x27;</span>，<span class=\"string\">&#x27;m&#x27;</span>或<span class=\"string\">&#x27;k&#x27;</span></span><br><span class=\"line\">[^...]    不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</span><br><span class=\"line\">re*    匹配<span class=\"number\">0</span>个或多个的表达式。</span><br><span class=\"line\">re+    匹配<span class=\"number\">1</span>个或多个的表达式。</span><br><span class=\"line\">re?    匹配<span class=\"number\">0</span>个或<span class=\"number\">1</span>个由前面的正则表达式定义的片段，非贪婪方式</span><br><span class=\"line\">re&#123; n&#125;     </span><br><span class=\"line\">re&#123; n,&#125;    精确匹配n个前面表达式。</span><br><span class=\"line\">re&#123; n, m&#125;    匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</span><br><span class=\"line\">a| b    匹配a或b</span><br><span class=\"line\">(re)    G匹配括号内的表达式，也表示一个组</span><br><span class=\"line\">(?imx)    正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</span><br><span class=\"line\">(?-imx)    正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</span><br><span class=\"line\">(?: re)    类似 (...), 但是不表示一个组</span><br><span class=\"line\">(?imx: re)    在括号中使用i, m, 或 x 可选标志</span><br><span class=\"line\">(?-imx: re)    在括号中不使用i, m, 或 x 可选标志</span><br><span class=\"line\">(?<span class=\"comment\">#...)    注释.</span></span><br><span class=\"line\">(?= re)    前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</span><br><span class=\"line\">(?! re)    前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</span><br><span class=\"line\">(?&gt; re)    匹配的独立模式，省去回溯。</span><br><span class=\"line\">\\w    匹配字母数字</span><br><span class=\"line\">\\W    匹配非字母数字</span><br><span class=\"line\">\\s    匹配任意空白字符，等价于 [\\t\\n\\r\\f].</span><br><span class=\"line\">\\S    匹配任意非空字符</span><br><span class=\"line\">\\d    匹配任意数字，等价于 [<span class=\"number\">0</span>-<span class=\"number\">9</span>].</span><br><span class=\"line\">\\D    匹配任意非数字</span><br><span class=\"line\">\\A    匹配字符串开始</span><br><span class=\"line\">\\Z    匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c</span><br><span class=\"line\">\\z    匹配字符串结束</span><br><span class=\"line\">\\G    匹配最后匹配完成的位置。</span><br><span class=\"line\">\\b    匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class=\"string\">&#x27;er\\b&#x27;</span> 可以匹配<span class=\"string\">&quot;never&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>，但不能匹配 <span class=\"string\">&quot;verb&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>。</span><br><span class=\"line\">\\B    匹配非单词边界。<span class=\"string\">&#x27;er\\B&#x27;</span> 能匹配 <span class=\"string\">&quot;verb&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>，但不能匹配 <span class=\"string\">&quot;never&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>。</span><br><span class=\"line\">\\n, \\t, 等.    匹配一个换行符。匹配一个制表符。等</span><br><span class=\"line\">\\<span class=\"number\">1.</span>..\\<span class=\"number\">9</span>    匹配第n个分组的子表达式。</span><br><span class=\"line\">\\<span class=\"number\">10</span>    匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-1\"></a></p>\n<h3 id=\"re库中常用方法\"><a href=\"#re库中常用方法\" class=\"headerlink\" title=\"re库中常用方法\"></a>re库中常用方法</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/83mX7AGTEdpNVry.png\"\n                      alt=\"image.png\"\n                ><br><a name=\"toc-heading-2\"></a></p>\n<h3 id=\"修饰符总结\"><a href=\"#修饰符总结\" class=\"headerlink\" title=\"修饰符总结\"></a>修饰符总结</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/oik8KEGm6nbaVfC.png\"\n                      alt=\"image.png\"\n                ><br><a name=\"toc-heading-3\"></a></p>\n<h3 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、匹配email地址:</span><br><span class=\"line\">[\\w!<span class=\"comment\">#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?</span></span><br><span class=\"line\"><span class=\"number\">2</span>、匹配网址URL：</span><br><span class=\"line\">[a-zA-z]+://[^\\s]*</span><br><span class=\"line\"><span class=\"number\">3</span>、匹配<span class=\"number\">18</span>位身份证号：</span><br><span class=\"line\">^(\\d&#123;<span class=\"number\">6</span>&#125;)(\\d&#123;<span class=\"number\">4</span>&#125;)(\\d&#123;<span class=\"number\">2</span>&#125;)(\\d&#123;<span class=\"number\">2</span>&#125;)(\\d&#123;<span class=\"number\">3</span>&#125;)([<span class=\"number\">0</span>-<span class=\"number\">9</span>]|X)$</span><br><span class=\"line\"><span class=\"number\">4</span>、匹配年月日格式：</span><br><span class=\"line\">([<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;[<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>&#125;|[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>&#125;[<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;|[<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">3</span>&#125;)-(((<span class=\"number\">0</span>[<span class=\"number\">13578</span>]|<span class=\"number\">1</span>[02])-(<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|[<span class=\"number\">12</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">3</span>[01]))|((<span class=\"number\">0</span>[<span class=\"number\">469</span>]|<span class=\"number\">11</span>)-(<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|[<span class=\"number\">12</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">30</span>))|(02-(<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|[<span class=\"number\">1</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">2</span>[<span class=\"number\">0</span>-<span class=\"number\">8</span>])))</span><br><span class=\"line\"><span class=\"number\">5</span>、匹配整数：</span><br><span class=\"line\">^-?[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\d*$</span><br><span class=\"line\"><span class=\"number\">6</span>、匹配正整数：</span><br><span class=\"line\">^[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\d*$</span><br><span class=\"line\"><span class=\"number\">7</span>、匹配负整数：</span><br><span class=\"line\">^-[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\d*$</span><br><span class=\"line\"><span class=\"number\">8</span>、匹配空白行：</span><br><span class=\"line\">\\n\\s*\\r</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/7fa6fe0b39af\" >https://www.jianshu.com/p/7fa6fe0b39af<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/773c32dcd254\" >https://www.jianshu.com/p/773c32dcd254<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/weixin_40136018/article/details/81183504\" >https://blog.csdn.net/weixin_40136018/article/details/81183504<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/weixin_40907382/article/details/79654372\" >https://blog.csdn.net/weixin_40907382/article/details/79654372<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><strong>字符串</strong>是编程时涉及到的最多的一种<strong>数据结构</strong>，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。<br />正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它<strong>“匹配”</strong>了，否则，该字符串就是不合法的。<br />所以我们判断一个字符串是否是合法的Email的方法是：<br /><strong>创建一个匹配Email的正则表达式；</strong></p>\n<ol>\n<li>用该正则表达式去匹配用户的输入来判断是否合法。</li>\n<li>因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。</li>\n</ol>\n<p>正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。</p>\n<blockquote>\n<p>官方文档：<br>中文：<a class=\"link\"   href=\"https://docs.python.org/zh-cn/3/library/re.html\" >https://docs.python.org/zh-cn/3/library/re.html<i class=\"fas fa-external-link-alt\"></i></a><br>英文：<a class=\"link\"   href=\"https://docs.python.org/3/library/re.html\" >https://docs.python.org/3/library/re.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>使用之前，需要引入正则模块(Regular Expression)：<br /><code>import re #引入正则表达式</code><br />主要使用的方法 match(), 从左到右进行匹配：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#pattern 为要校验的规则</span></span><br><span class=\"line\"><span class=\"comment\">#str 为要进行校验的字符串</span></span><br><span class=\"line\">result = re.match(pattern, <span class=\"built_in\">str</span>) </span><br><span class=\"line\"><span class=\"comment\">#如果result不为None,则group方法则对result进行数据提取</span></span><br><span class=\"line\">result.group()</span><br></pre></td></tr></table></figure>\n<p>匹配规则：<br />1️⃣单字符匹配规则：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符    功能</span><br><span class=\"line\">.       匹配任意<span class=\"number\">1</span>个字符(除了\\n)</span><br><span class=\"line\">[]      匹配[]中列举的字符</span><br><span class=\"line\">\\d      匹配数字,也就是<span class=\"number\">0</span>-<span class=\"number\">9</span></span><br><span class=\"line\">\\D      匹配非数字,也就是匹配不是数字的字符</span><br><span class=\"line\">\\s      匹配空白符,也就是 空格\\tab</span><br><span class=\"line\">\\S      匹配非空白符,\\s取反</span><br><span class=\"line\">\\w      陪陪单词字符, a-z, A-Z, <span class=\"number\">0</span>-<span class=\"number\">9</span>, _</span><br><span class=\"line\">\\W      匹配非单词字符, \\w取反</span><br></pre></td></tr></table></figure>\n<p>2️⃣表示数量的规则：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符    功能</span><br><span class=\"line\">*       匹配前一个字符出现<span class=\"number\">0</span>次多次或者无限次,可有可无,可多可少</span><br><span class=\"line\">+       匹配前一个字符出现<span class=\"number\">1</span>次多次或则无限次,直到出现一次</span><br><span class=\"line\">?       匹配前一个字符出现<span class=\"number\">1</span>次或者<span class=\"number\">0</span>次,要么有<span class=\"number\">1</span>次,要么没有</span><br><span class=\"line\">&#123;m&#125;     匹配前一个字符出现m次</span><br><span class=\"line\">&#123;m,&#125;    匹配前一个字符至少出现m次</span><br><span class=\"line\">&#123;m,n&#125;   匹配前一个字符出现m到n次</span><br></pre></td></tr></table></figure>\n<p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模式    描述</span><br><span class=\"line\">^    匹配字符串的开头</span><br><span class=\"line\">$    匹配字符串的末尾。</span><br><span class=\"line\">.    匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</span><br><span class=\"line\">[...]    用来表示一组字符,单独列出：[amk] 匹配 <span class=\"string\">&#x27;a&#x27;</span>，<span class=\"string\">&#x27;m&#x27;</span>或<span class=\"string\">&#x27;k&#x27;</span></span><br><span class=\"line\">[^...]    不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</span><br><span class=\"line\">re*    匹配<span class=\"number\">0</span>个或多个的表达式。</span><br><span class=\"line\">re+    匹配<span class=\"number\">1</span>个或多个的表达式。</span><br><span class=\"line\">re?    匹配<span class=\"number\">0</span>个或<span class=\"number\">1</span>个由前面的正则表达式定义的片段，非贪婪方式</span><br><span class=\"line\">re&#123; n&#125;     </span><br><span class=\"line\">re&#123; n,&#125;    精确匹配n个前面表达式。</span><br><span class=\"line\">re&#123; n, m&#125;    匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</span><br><span class=\"line\">a| b    匹配a或b</span><br><span class=\"line\">(re)    G匹配括号内的表达式，也表示一个组</span><br><span class=\"line\">(?imx)    正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</span><br><span class=\"line\">(?-imx)    正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</span><br><span class=\"line\">(?: re)    类似 (...), 但是不表示一个组</span><br><span class=\"line\">(?imx: re)    在括号中使用i, m, 或 x 可选标志</span><br><span class=\"line\">(?-imx: re)    在括号中不使用i, m, 或 x 可选标志</span><br><span class=\"line\">(?<span class=\"comment\">#...)    注释.</span></span><br><span class=\"line\">(?= re)    前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</span><br><span class=\"line\">(?! re)    前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</span><br><span class=\"line\">(?&gt; re)    匹配的独立模式，省去回溯。</span><br><span class=\"line\">\\w    匹配字母数字</span><br><span class=\"line\">\\W    匹配非字母数字</span><br><span class=\"line\">\\s    匹配任意空白字符，等价于 [\\t\\n\\r\\f].</span><br><span class=\"line\">\\S    匹配任意非空字符</span><br><span class=\"line\">\\d    匹配任意数字，等价于 [<span class=\"number\">0</span>-<span class=\"number\">9</span>].</span><br><span class=\"line\">\\D    匹配任意非数字</span><br><span class=\"line\">\\A    匹配字符串开始</span><br><span class=\"line\">\\Z    匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c</span><br><span class=\"line\">\\z    匹配字符串结束</span><br><span class=\"line\">\\G    匹配最后匹配完成的位置。</span><br><span class=\"line\">\\b    匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class=\"string\">&#x27;er\\b&#x27;</span> 可以匹配<span class=\"string\">&quot;never&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>，但不能匹配 <span class=\"string\">&quot;verb&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>。</span><br><span class=\"line\">\\B    匹配非单词边界。<span class=\"string\">&#x27;er\\B&#x27;</span> 能匹配 <span class=\"string\">&quot;verb&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>，但不能匹配 <span class=\"string\">&quot;never&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>。</span><br><span class=\"line\">\\n, \\t, 等.    匹配一个换行符。匹配一个制表符。等</span><br><span class=\"line\">\\<span class=\"number\">1.</span>..\\<span class=\"number\">9</span>    匹配第n个分组的子表达式。</span><br><span class=\"line\">\\<span class=\"number\">10</span>    匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-1\"></a></p>\n<h3 id=\"re库中常用方法\"><a href=\"#re库中常用方法\" class=\"headerlink\" title=\"re库中常用方法\"></a>re库中常用方法</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/83mX7AGTEdpNVry.png\"\n                      alt=\"image.png\"\n                ><br><a name=\"toc-heading-2\"></a></p>\n<h3 id=\"修饰符总结\"><a href=\"#修饰符总结\" class=\"headerlink\" title=\"修饰符总结\"></a>修饰符总结</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/oik8KEGm6nbaVfC.png\"\n                      alt=\"image.png\"\n                ><br><a name=\"toc-heading-3\"></a></p>\n<h3 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、匹配email地址:</span><br><span class=\"line\">[\\w!<span class=\"comment\">#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?</span></span><br><span class=\"line\"><span class=\"number\">2</span>、匹配网址URL：</span><br><span class=\"line\">[a-zA-z]+://[^\\s]*</span><br><span class=\"line\"><span class=\"number\">3</span>、匹配<span class=\"number\">18</span>位身份证号：</span><br><span class=\"line\">^(\\d&#123;<span class=\"number\">6</span>&#125;)(\\d&#123;<span class=\"number\">4</span>&#125;)(\\d&#123;<span class=\"number\">2</span>&#125;)(\\d&#123;<span class=\"number\">2</span>&#125;)(\\d&#123;<span class=\"number\">3</span>&#125;)([<span class=\"number\">0</span>-<span class=\"number\">9</span>]|X)$</span><br><span class=\"line\"><span class=\"number\">4</span>、匹配年月日格式：</span><br><span class=\"line\">([<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;[<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>&#125;|[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>&#125;[<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;|[<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">3</span>&#125;)-(((<span class=\"number\">0</span>[<span class=\"number\">13578</span>]|<span class=\"number\">1</span>[02])-(<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|[<span class=\"number\">12</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">3</span>[01]))|((<span class=\"number\">0</span>[<span class=\"number\">469</span>]|<span class=\"number\">11</span>)-(<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|[<span class=\"number\">12</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">30</span>))|(02-(<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|[<span class=\"number\">1</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">2</span>[<span class=\"number\">0</span>-<span class=\"number\">8</span>])))</span><br><span class=\"line\"><span class=\"number\">5</span>、匹配整数：</span><br><span class=\"line\">^-?[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\d*$</span><br><span class=\"line\"><span class=\"number\">6</span>、匹配正整数：</span><br><span class=\"line\">^[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\d*$</span><br><span class=\"line\"><span class=\"number\">7</span>、匹配负整数：</span><br><span class=\"line\">^-[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\d*$</span><br><span class=\"line\"><span class=\"number\">8</span>、匹配空白行：</span><br><span class=\"line\">\\n\\s*\\r</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/7fa6fe0b39af\" >https://www.jianshu.com/p/7fa6fe0b39af<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/773c32dcd254\" >https://www.jianshu.com/p/773c32dcd254<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/weixin_40136018/article/details/81183504\" >https://blog.csdn.net/weixin_40136018/article/details/81183504<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/weixin_40907382/article/details/79654372\" >https://blog.csdn.net/weixin_40907382/article/details/79654372<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"Python虚拟环境——virtualenv","date":"2020-09-13T00:42:26.000Z","_content":"\n_virtualenv是Python的一个工具包，可以创建完全隔离的Python环境，让一台电脑上同时拥有几个ython2和Python3的环境。_\n<a name=\"toc-heading-1\"></a>\n## 基本使用\n**安装**\n```python\npip install virtualenv\nmkdir my_project_dir\ncd my_project_dir\nvirtualenv venv #venv为虚拟环境的目录名，目录名可以自定义\n```\n**不过，也定义自定义python解释器**\n```python\nvirtualenv -p /usr/bin/python3.7 venv # -p参数用来指定Python解释器\n```\n\n<br />**激活环境**\n```python\nsource venv/bin/activate\n```\n从现在起，利用pip安装的任何包都会放在venv文件夹中。<br />**暂停环境**\n```python\n. venv/bin/deactivate\n```\n**删除环境**<br />因为该虚拟环境是完全隔离的，因此删除该虚拟环境对应的文件夹就行了。\n<a name=\"toc-heading-2\"></a>\n## virtualenvwrapper介绍\n鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。<br />**安装virtualenvwrapper(确保virtualenv已安装)**\n```python\npip install virtualenvwrapper\npip install virtualenvwrapper-win　　#Windows使用该命令\n```\n**安装完成后，在~/.bashrc写入以下内容**\n```python\nexport WORKON_HOME=~/Envs\nsource /usr/local/bin/virtualenvwrapper.sh\n```\n第一行：virtualenvwrapper存放虚拟环境目录<br />第二行：virtrualenvwrapper会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh\n```python\nsource ~/.bashrc　　　　#读入配置文件，立即生效\n```\n<a name=\"toc-heading-3\"></a>\n## virtualenvwrapper基本使用\n<a name=\"toc-heading-4\"></a>\n### 1.创建虚拟环境　mkvirtualenv\n```python\nmkvirtualenv venv\n```\n这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。<br />若想指定python版本，可通过”–python”指定python解释器\n```python\nmkvirtualenv --python=/usr/local/python3.5.3/bin/python venv\n```\n<a name=\"toc-heading-5\"></a>\n### 2. 基本命令\n**查看当前的虚拟环境目录**\n```python\n[root@localhost ~]# workon\npy2\npy3\n```\n**切换到虚拟环境**\n```python\n[root@localhost ~]# workon py3\n(py3) [root@localhost ~]#\n```\n**退出虚拟环境**\n```python\n(py3) [root@localhost ~]# deactivate\n[root@localhost ~]#\n```\n**删除虚拟环境**\n```python\nrmvirtualenv venv\n```\n\n---\n\n**参考文献**<br />[https://www.cnblogs.com/technologylife/p/6635631.html](https://www.cnblogs.com/technologylife/p/6635631.html)<br />[https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000)\n","source":"_posts/Python虚拟环境——virtualenv.md","raw":"---\ntitle: Python虚拟环境——virtualenv\ndate: 2020-09-13 08:42:26\ntags:\n- virtualenv\n- Python\ncategories:\n- 编程笔记\n---\n\n_virtualenv是Python的一个工具包，可以创建完全隔离的Python环境，让一台电脑上同时拥有几个ython2和Python3的环境。_\n<a name=\"toc-heading-1\"></a>\n## 基本使用\n**安装**\n```python\npip install virtualenv\nmkdir my_project_dir\ncd my_project_dir\nvirtualenv venv #venv为虚拟环境的目录名，目录名可以自定义\n```\n**不过，也定义自定义python解释器**\n```python\nvirtualenv -p /usr/bin/python3.7 venv # -p参数用来指定Python解释器\n```\n\n<br />**激活环境**\n```python\nsource venv/bin/activate\n```\n从现在起，利用pip安装的任何包都会放在venv文件夹中。<br />**暂停环境**\n```python\n. venv/bin/deactivate\n```\n**删除环境**<br />因为该虚拟环境是完全隔离的，因此删除该虚拟环境对应的文件夹就行了。\n<a name=\"toc-heading-2\"></a>\n## virtualenvwrapper介绍\n鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。<br />**安装virtualenvwrapper(确保virtualenv已安装)**\n```python\npip install virtualenvwrapper\npip install virtualenvwrapper-win　　#Windows使用该命令\n```\n**安装完成后，在~/.bashrc写入以下内容**\n```python\nexport WORKON_HOME=~/Envs\nsource /usr/local/bin/virtualenvwrapper.sh\n```\n第一行：virtualenvwrapper存放虚拟环境目录<br />第二行：virtrualenvwrapper会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh\n```python\nsource ~/.bashrc　　　　#读入配置文件，立即生效\n```\n<a name=\"toc-heading-3\"></a>\n## virtualenvwrapper基本使用\n<a name=\"toc-heading-4\"></a>\n### 1.创建虚拟环境　mkvirtualenv\n```python\nmkvirtualenv venv\n```\n这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。<br />若想指定python版本，可通过”–python”指定python解释器\n```python\nmkvirtualenv --python=/usr/local/python3.5.3/bin/python venv\n```\n<a name=\"toc-heading-5\"></a>\n### 2. 基本命令\n**查看当前的虚拟环境目录**\n```python\n[root@localhost ~]# workon\npy2\npy3\n```\n**切换到虚拟环境**\n```python\n[root@localhost ~]# workon py3\n(py3) [root@localhost ~]#\n```\n**退出虚拟环境**\n```python\n(py3) [root@localhost ~]# deactivate\n[root@localhost ~]#\n```\n**删除虚拟环境**\n```python\nrmvirtualenv venv\n```\n\n---\n\n**参考文献**<br />[https://www.cnblogs.com/technologylife/p/6635631.html](https://www.cnblogs.com/technologylife/p/6635631.html)<br />[https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000)\n","slug":"Python虚拟环境——virtualenv","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmm0000euwvfgq8m8h4i","content":"<p><em>virtualenv是Python的一个工具包，可以创建完全隔离的Python环境，让一台电脑上同时拥有几个ython2和Python3的环境。</em><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><strong>安装</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br><span class=\"line\">mkdir my_project_dir</span><br><span class=\"line\">cd my_project_dir</span><br><span class=\"line\">virtualenv venv <span class=\"comment\">#venv为虚拟环境的目录名，目录名可以自定义</span></span><br></pre></td></tr></table></figure>\n<p><strong>不过，也定义自定义python解释器</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv -p /usr/<span class=\"built_in\">bin</span>/python3<span class=\"number\">.7</span> venv <span class=\"comment\"># -p参数用来指定Python解释器</span></span><br></pre></td></tr></table></figure>\n\n<p><br /><strong>激活环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source venv/<span class=\"built_in\">bin</span>/activate</span><br></pre></td></tr></table></figure>\n<p>从现在起，利用pip安装的任何包都会放在venv文件夹中。<br /><strong>暂停环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. venv/<span class=\"built_in\">bin</span>/deactivate</span><br></pre></td></tr></table></figure>\n<p><strong>删除环境</strong><br />因为该虚拟环境是完全隔离的，因此删除该虚拟环境对应的文件夹就行了。<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"virtualenvwrapper介绍\"><a href=\"#virtualenvwrapper介绍\" class=\"headerlink\" title=\"virtualenvwrapper介绍\"></a>virtualenvwrapper介绍</h2><p>鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。<br /><strong>安装virtualenvwrapper(确保virtualenv已安装)</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper</span><br><span class=\"line\">pip install virtualenvwrapper-win　　<span class=\"comment\">#Windows使用该命令</span></span><br></pre></td></tr></table></figure>\n<p><strong>安装完成后，在~/.bashrc写入以下内容</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export WORKON_HOME=~/Envs</span><br><span class=\"line\">source /usr/local/<span class=\"built_in\">bin</span>/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>\n<p>第一行：virtualenvwrapper存放虚拟环境目录<br />第二行：virtrualenvwrapper会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc　　　　<span class=\"comment\">#读入配置文件，立即生效</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"virtualenvwrapper基本使用\"><a href=\"#virtualenvwrapper基本使用\" class=\"headerlink\" title=\"virtualenvwrapper基本使用\"></a>virtualenvwrapper基本使用</h2><p><a name=\"toc-heading-4\"></a></p>\n<h3 id=\"1-创建虚拟环境-mkvirtualenv\"><a href=\"#1-创建虚拟环境-mkvirtualenv\" class=\"headerlink\" title=\"1.创建虚拟环境　mkvirtualenv\"></a>1.创建虚拟环境　mkvirtualenv</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv venv</span><br></pre></td></tr></table></figure>\n<p>这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。<br />若想指定python版本，可通过”–python”指定python解释器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv --python=/usr/local/python3<span class=\"number\">.5</span><span class=\"number\">.3</span>/<span class=\"built_in\">bin</span>/python venv</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-5\"></a></p>\n<h3 id=\"2-基本命令\"><a href=\"#2-基本命令\" class=\"headerlink\" title=\"2. 基本命令\"></a>2. 基本命令</h3><p><strong>查看当前的虚拟环境目录</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># workon</span></span><br><span class=\"line\">py2</span><br><span class=\"line\">py3</span><br></pre></td></tr></table></figure>\n<p><strong>切换到虚拟环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># workon py3</span></span><br><span class=\"line\">(py3) [root@localhost ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p><strong>退出虚拟环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(py3) [root@localhost ~]<span class=\"comment\"># deactivate</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p><strong>删除虚拟环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmvirtualenv venv</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>参考文献</strong><br /><a class=\"link\"   href=\"https://www.cnblogs.com/technologylife/p/6635631.html\" >https://www.cnblogs.com/technologylife/p/6635631.html<i class=\"fas fa-external-link-alt\"></i></a><br /><a class=\"link\"   href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000\" >https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><em>virtualenv是Python的一个工具包，可以创建完全隔离的Python环境，让一台电脑上同时拥有几个ython2和Python3的环境。</em><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><strong>安装</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br><span class=\"line\">mkdir my_project_dir</span><br><span class=\"line\">cd my_project_dir</span><br><span class=\"line\">virtualenv venv <span class=\"comment\">#venv为虚拟环境的目录名，目录名可以自定义</span></span><br></pre></td></tr></table></figure>\n<p><strong>不过，也定义自定义python解释器</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv -p /usr/<span class=\"built_in\">bin</span>/python3<span class=\"number\">.7</span> venv <span class=\"comment\"># -p参数用来指定Python解释器</span></span><br></pre></td></tr></table></figure>\n\n<p><br /><strong>激活环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source venv/<span class=\"built_in\">bin</span>/activate</span><br></pre></td></tr></table></figure>\n<p>从现在起，利用pip安装的任何包都会放在venv文件夹中。<br /><strong>暂停环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. venv/<span class=\"built_in\">bin</span>/deactivate</span><br></pre></td></tr></table></figure>\n<p><strong>删除环境</strong><br />因为该虚拟环境是完全隔离的，因此删除该虚拟环境对应的文件夹就行了。<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"virtualenvwrapper介绍\"><a href=\"#virtualenvwrapper介绍\" class=\"headerlink\" title=\"virtualenvwrapper介绍\"></a>virtualenvwrapper介绍</h2><p>鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。<br /><strong>安装virtualenvwrapper(确保virtualenv已安装)</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper</span><br><span class=\"line\">pip install virtualenvwrapper-win　　<span class=\"comment\">#Windows使用该命令</span></span><br></pre></td></tr></table></figure>\n<p><strong>安装完成后，在~/.bashrc写入以下内容</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export WORKON_HOME=~/Envs</span><br><span class=\"line\">source /usr/local/<span class=\"built_in\">bin</span>/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>\n<p>第一行：virtualenvwrapper存放虚拟环境目录<br />第二行：virtrualenvwrapper会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc　　　　<span class=\"comment\">#读入配置文件，立即生效</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"virtualenvwrapper基本使用\"><a href=\"#virtualenvwrapper基本使用\" class=\"headerlink\" title=\"virtualenvwrapper基本使用\"></a>virtualenvwrapper基本使用</h2><p><a name=\"toc-heading-4\"></a></p>\n<h3 id=\"1-创建虚拟环境-mkvirtualenv\"><a href=\"#1-创建虚拟环境-mkvirtualenv\" class=\"headerlink\" title=\"1.创建虚拟环境　mkvirtualenv\"></a>1.创建虚拟环境　mkvirtualenv</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv venv</span><br></pre></td></tr></table></figure>\n<p>这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。<br />若想指定python版本，可通过”–python”指定python解释器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv --python=/usr/local/python3<span class=\"number\">.5</span><span class=\"number\">.3</span>/<span class=\"built_in\">bin</span>/python venv</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-5\"></a></p>\n<h3 id=\"2-基本命令\"><a href=\"#2-基本命令\" class=\"headerlink\" title=\"2. 基本命令\"></a>2. 基本命令</h3><p><strong>查看当前的虚拟环境目录</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># workon</span></span><br><span class=\"line\">py2</span><br><span class=\"line\">py3</span><br></pre></td></tr></table></figure>\n<p><strong>切换到虚拟环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># workon py3</span></span><br><span class=\"line\">(py3) [root@localhost ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p><strong>退出虚拟环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(py3) [root@localhost ~]<span class=\"comment\"># deactivate</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p><strong>删除虚拟环境</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmvirtualenv venv</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>参考文献</strong><br /><a class=\"link\"   href=\"https://www.cnblogs.com/technologylife/p/6635631.html\" >https://www.cnblogs.com/technologylife/p/6635631.html<i class=\"fas fa-external-link-alt\"></i></a><br /><a class=\"link\"   href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000\" >https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"Vue文档风格的Typora主题","date":"2019-05-23T08:32:06.000Z","_content":"[Typora-vue-theme](https://github.com/blinkfox/typora-vue-theme) 是[ Typora](https://www.typora.io/) Markdown 文档编辑器中一款类似[Vue](https://vuejs.org/)文档风格的主题。\n<a name=\"toc-heading-1\"></a>\n## 简介\n[Typora](https://www.typora.io/)是一款支持实时预览的 Markdown 编辑器和阅读器，支持`Windows`、`macOS`、`Linux`三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题。\n<a name=\"toc-heading-2\"></a>\n## 使用方法\n1.下载本主题中的vue.css、vue-dark.css文件和包含字体的vue文件夹；<br />2.打开 Typora，点击**文件**-**偏好设置** => **打开主题文件夹**按钮，将弹出 Typora 的主题文件夹；<br />3.将下载好的vue.css和vue-dark.css文件和包含字体的vue文件夹放到 Typora 的主题文件夹中；<br />4.关闭并重新打开 Typora，从菜单栏中选择 “主题” => “Vue” 或者 “Vue Dark” 即可。\n<a name=\"toc-heading-3\"></a>\n### 效果图：\n![image](https://vip2.loli.io/2022/01/27/dGpfFNv7KALHEg3.jpg)\n> 参考文献：\n\n[Vue 文档风格的 Typora 主题](https://blinkfox.github.io/2018/11/19/ruan-jian-gong-ju/markdown/vue-wen-dang-feng-ge-de-typora-zhu-ti/)\n","source":"_posts/Vue 文档风格的 Typora 主题.md","raw":"---\ntitle: Vue文档风格的Typora主题\ndate: 2019-05-23 16:32:06\ntags:\n- Typora\n- Vue\ncategories:\n- 网络资源\n---\n[Typora-vue-theme](https://github.com/blinkfox/typora-vue-theme) 是[ Typora](https://www.typora.io/) Markdown 文档编辑器中一款类似[Vue](https://vuejs.org/)文档风格的主题。\n<a name=\"toc-heading-1\"></a>\n## 简介\n[Typora](https://www.typora.io/)是一款支持实时预览的 Markdown 编辑器和阅读器，支持`Windows`、`macOS`、`Linux`三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题。\n<a name=\"toc-heading-2\"></a>\n## 使用方法\n1.下载本主题中的vue.css、vue-dark.css文件和包含字体的vue文件夹；<br />2.打开 Typora，点击**文件**-**偏好设置** => **打开主题文件夹**按钮，将弹出 Typora 的主题文件夹；<br />3.将下载好的vue.css和vue-dark.css文件和包含字体的vue文件夹放到 Typora 的主题文件夹中；<br />4.关闭并重新打开 Typora，从菜单栏中选择 “主题” => “Vue” 或者 “Vue Dark” 即可。\n<a name=\"toc-heading-3\"></a>\n### 效果图：\n![image](https://vip2.loli.io/2022/01/27/dGpfFNv7KALHEg3.jpg)\n> 参考文献：\n\n[Vue 文档风格的 Typora 主题](https://blinkfox.github.io/2018/11/19/ruan-jian-gong-ju/markdown/vue-wen-dang-feng-ge-de-typora-zhu-ti/)\n","slug":"Vue 文档风格的 Typora 主题","published":1,"updated":"2022-01-27T03:13:42.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmm3000guwvfda504vor","content":"<p><a class=\"link\"   href=\"https://github.com/blinkfox/typora-vue-theme\" >Typora-vue-theme<i class=\"fas fa-external-link-alt\"></i></a> 是<a class=\"link\"   href=\"https://www.typora.io/\" > Typora<i class=\"fas fa-external-link-alt\"></i></a> Markdown 文档编辑器中一款类似<a class=\"link\"   href=\"https://vuejs.org/\" >Vue<i class=\"fas fa-external-link-alt\"></i></a>文档风格的主题。<br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a class=\"link\"   href=\"https://www.typora.io/\" >Typora<i class=\"fas fa-external-link-alt\"></i></a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题。<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>1.下载本主题中的vue.css、vue-dark.css文件和包含字体的vue文件夹；<br />2.打开 Typora，点击<strong>文件</strong>-<strong>偏好设置</strong> =&gt; <strong>打开主题文件夹</strong>按钮，将弹出 Typora 的主题文件夹；<br />3.将下载好的vue.css和vue-dark.css文件和包含字体的vue文件夹放到 Typora 的主题文件夹中；<br />4.关闭并重新打开 Typora，从菜单栏中选择 “主题” =&gt; “Vue” 或者 “Vue Dark” 即可。<br><a name=\"toc-heading-3\"></a></p>\n<h3 id=\"效果图：\"><a href=\"#效果图：\" class=\"headerlink\" title=\"效果图：\"></a>效果图：</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/dGpfFNv7KALHEg3.jpg\"\n                      alt=\"image\"\n                ></p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<p><a class=\"link\"   href=\"https://blinkfox.github.io/2018/11/19/ruan-jian-gong-ju/markdown/vue-wen-dang-feng-ge-de-typora-zhu-ti/\" >Vue 文档风格的 Typora 主题<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><a class=\"link\"   href=\"https://github.com/blinkfox/typora-vue-theme\" >Typora-vue-theme<i class=\"fas fa-external-link-alt\"></i></a> 是<a class=\"link\"   href=\"https://www.typora.io/\" > Typora<i class=\"fas fa-external-link-alt\"></i></a> Markdown 文档编辑器中一款类似<a class=\"link\"   href=\"https://vuejs.org/\" >Vue<i class=\"fas fa-external-link-alt\"></i></a>文档风格的主题。<br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a class=\"link\"   href=\"https://www.typora.io/\" >Typora<i class=\"fas fa-external-link-alt\"></i></a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题。<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>1.下载本主题中的vue.css、vue-dark.css文件和包含字体的vue文件夹；<br />2.打开 Typora，点击<strong>文件</strong>-<strong>偏好设置</strong> =&gt; <strong>打开主题文件夹</strong>按钮，将弹出 Typora 的主题文件夹；<br />3.将下载好的vue.css和vue-dark.css文件和包含字体的vue文件夹放到 Typora 的主题文件夹中；<br />4.关闭并重新打开 Typora，从菜单栏中选择 “主题” =&gt; “Vue” 或者 “Vue Dark” 即可。<br><a name=\"toc-heading-3\"></a></p>\n<h3 id=\"效果图：\"><a href=\"#效果图：\" class=\"headerlink\" title=\"效果图：\"></a>效果图：</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/dGpfFNv7KALHEg3.jpg\"\n                      alt=\"image\"\n                ></p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<p><a class=\"link\"   href=\"https://blinkfox.github.io/2018/11/19/ruan-jian-gong-ju/markdown/vue-wen-dang-feng-ge-de-typora-zhu-ti/\" >Vue 文档风格的 Typora 主题<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"Python中函数和方法的区别","date":"2022-01-09T07:32:26.000Z","_content":"\n_python中函数和方法是两个容易混淆的概念，他们其实有很多区别。_\n<a name=\"toc-heading-1\"></a>\n\n## 1. 所处位置不同\n函数是直接写文件中而不是class中，方法是只能写在class中。\n<a name=\"toc-heading-2\"></a>\n## 2. 定义方式不同\n函数定义的方式 def关键字 然后接函数名 再是括号 括号里面写形参也可以省略不写形参。<br />例如：\n```python\ndef functionName():\n    \"\"\"这里是函数的注释\"\"\"\n    print(\"这一块写函数的内容\")\n```\n而方法的定义和函数有点区别，方法必须带一个默认参数，静态方法除外。\n<a name=\"toc-heading-3\"></a>\n## 3. 调用的方式不同\n\n1. 函数的调用：函数的调用是直接写 函数名(函数参数1,函数参数2,……)<br />\n1. 方法的调用：方法是通过对象点方法调用的（这里是指对象方法）<br />\n\n例如：\n```python\nclass className:\n    def method(self):\n        print(\"这是一个方法\")\n#调用---------------------\n#实例化对象\nc=className()\nc.method()\n```\n**总结：**\n\n1. 函数是封装了一些独立的功能，可以直接调用，能将一些数据（参数）传递进去进行处理，然后返回一些数据（返回值），也可以没有返回值。可以直接在模块中进行定义使用。<br />所有传递给函数的数据都是显式传递的。<br />\n1. 方法和函数类似，同样封装了独立的功能，但是方法是只能依靠类或者对象来调用的，表示针对性的操作。<br />方法中的数据self和cls是隐式传递的，即方法的调用者；<br />方法可以操作类内部的数据 **简单的说，函数在python中独立存在，可直接使用的，而方法是必须被别人调用才能实现的**。静态方法除外（与类和对象均无关，通过类名和对象名均可被调用，属函数）<br />\n\n不过也要摒弃**错误认知**：并不是类中的调用都叫方法<br />例如：\n```python\nclass Foo(object):\n    def func(self):\n        pass\n#实例化\nobj = Foo()\n# 执行方式一:调用的func是方法\nobj.func() #func 方法\n# 执行方式二：调用的func是函数\nFoo.func(123) # 函数\n```\n> 最大的区别是**参数传递**，方法是自动传参self，函数是主动传参\n\n如果自己也不确定，可以打印类型查看：\n```python\nfrom types import FunctionType,MethodType\nprint(isinstance(obj.func,MethodType))    ---># True\nprint(isinstance(Foo.func,FunctionType))  ---># True\n```\n","source":"_posts/python中函数和方法的区别.md","raw":"---\ntitle: Python中函数和方法的区别\ndate: 2022-01-9 15:32:26\ntags:\n- Python\ncategories:\n- 编程笔记\n- \tPython\n---\n\n_python中函数和方法是两个容易混淆的概念，他们其实有很多区别。_\n<a name=\"toc-heading-1\"></a>\n\n## 1. 所处位置不同\n函数是直接写文件中而不是class中，方法是只能写在class中。\n<a name=\"toc-heading-2\"></a>\n## 2. 定义方式不同\n函数定义的方式 def关键字 然后接函数名 再是括号 括号里面写形参也可以省略不写形参。<br />例如：\n```python\ndef functionName():\n    \"\"\"这里是函数的注释\"\"\"\n    print(\"这一块写函数的内容\")\n```\n而方法的定义和函数有点区别，方法必须带一个默认参数，静态方法除外。\n<a name=\"toc-heading-3\"></a>\n## 3. 调用的方式不同\n\n1. 函数的调用：函数的调用是直接写 函数名(函数参数1,函数参数2,……)<br />\n1. 方法的调用：方法是通过对象点方法调用的（这里是指对象方法）<br />\n\n例如：\n```python\nclass className:\n    def method(self):\n        print(\"这是一个方法\")\n#调用---------------------\n#实例化对象\nc=className()\nc.method()\n```\n**总结：**\n\n1. 函数是封装了一些独立的功能，可以直接调用，能将一些数据（参数）传递进去进行处理，然后返回一些数据（返回值），也可以没有返回值。可以直接在模块中进行定义使用。<br />所有传递给函数的数据都是显式传递的。<br />\n1. 方法和函数类似，同样封装了独立的功能，但是方法是只能依靠类或者对象来调用的，表示针对性的操作。<br />方法中的数据self和cls是隐式传递的，即方法的调用者；<br />方法可以操作类内部的数据 **简单的说，函数在python中独立存在，可直接使用的，而方法是必须被别人调用才能实现的**。静态方法除外（与类和对象均无关，通过类名和对象名均可被调用，属函数）<br />\n\n不过也要摒弃**错误认知**：并不是类中的调用都叫方法<br />例如：\n```python\nclass Foo(object):\n    def func(self):\n        pass\n#实例化\nobj = Foo()\n# 执行方式一:调用的func是方法\nobj.func() #func 方法\n# 执行方式二：调用的func是函数\nFoo.func(123) # 函数\n```\n> 最大的区别是**参数传递**，方法是自动传参self，函数是主动传参\n\n如果自己也不确定，可以打印类型查看：\n```python\nfrom types import FunctionType,MethodType\nprint(isinstance(obj.func,MethodType))    ---># True\nprint(isinstance(Foo.func,FunctionType))  ---># True\n```\n","slug":"python中函数和方法的区别","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmm8000juwvf55m30v8k","content":"<p><em>python中函数和方法是两个容易混淆的概念，他们其实有很多区别。</em><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"1-所处位置不同\"><a href=\"#1-所处位置不同\" class=\"headerlink\" title=\"1. 所处位置不同\"></a>1. 所处位置不同</h2><p>函数是直接写文件中而不是class中，方法是只能写在class中。<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"2-定义方式不同\"><a href=\"#2-定义方式不同\" class=\"headerlink\" title=\"2. 定义方式不同\"></a>2. 定义方式不同</h2><p>函数定义的方式 def关键字 然后接函数名 再是括号 括号里面写形参也可以省略不写形参。<br />例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionName</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;这里是函数的注释&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这一块写函数的内容&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>而方法的定义和函数有点区别，方法必须带一个默认参数，静态方法除外。<br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"3-调用的方式不同\"><a href=\"#3-调用的方式不同\" class=\"headerlink\" title=\"3. 调用的方式不同\"></a>3. 调用的方式不同</h2><ol>\n<li>函数的调用：函数的调用是直接写 函数名(函数参数1,函数参数2,……)<br /></li>\n<li>方法的调用：方法是通过对象点方法调用的（这里是指对象方法）<br /></li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">className</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这是一个方法&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#调用---------------------</span></span><br><span class=\"line\"><span class=\"comment\">#实例化对象</span></span><br><span class=\"line\">c=className()</span><br><span class=\"line\">c.method()</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<ol>\n<li>函数是封装了一些独立的功能，可以直接调用，能将一些数据（参数）传递进去进行处理，然后返回一些数据（返回值），也可以没有返回值。可以直接在模块中进行定义使用。<br />所有传递给函数的数据都是显式传递的。<br /></li>\n<li>方法和函数类似，同样封装了独立的功能，但是方法是只能依靠类或者对象来调用的，表示针对性的操作。<br />方法中的数据self和cls是隐式传递的，即方法的调用者；<br />方法可以操作类内部的数据 <strong>简单的说，函数在python中独立存在，可直接使用的，而方法是必须被别人调用才能实现的</strong>。静态方法除外（与类和对象均无关，通过类名和对象名均可被调用，属函数）<br /></li>\n</ol>\n<p>不过也要摒弃<strong>错误认知</strong>：并不是类中的调用都叫方法<br />例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\">#实例化</span></span><br><span class=\"line\">obj = Foo()</span><br><span class=\"line\"><span class=\"comment\"># 执行方式一:调用的func是方法</span></span><br><span class=\"line\">obj.func() <span class=\"comment\">#func 方法</span></span><br><span class=\"line\"><span class=\"comment\"># 执行方式二：调用的func是函数</span></span><br><span class=\"line\">Foo.func(<span class=\"number\">123</span>) <span class=\"comment\"># 函数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最大的区别是<strong>参数传递</strong>，方法是自动传参self，函数是主动传参</p>\n</blockquote>\n<p>如果自己也不确定，可以打印类型查看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> FunctionType,MethodType</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(obj.func,MethodType))    ---&gt;<span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(Foo.func,FunctionType))  ---&gt;<span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><em>python中函数和方法是两个容易混淆的概念，他们其实有很多区别。</em><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"1-所处位置不同\"><a href=\"#1-所处位置不同\" class=\"headerlink\" title=\"1. 所处位置不同\"></a>1. 所处位置不同</h2><p>函数是直接写文件中而不是class中，方法是只能写在class中。<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"2-定义方式不同\"><a href=\"#2-定义方式不同\" class=\"headerlink\" title=\"2. 定义方式不同\"></a>2. 定义方式不同</h2><p>函数定义的方式 def关键字 然后接函数名 再是括号 括号里面写形参也可以省略不写形参。<br />例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionName</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;这里是函数的注释&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这一块写函数的内容&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>而方法的定义和函数有点区别，方法必须带一个默认参数，静态方法除外。<br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"3-调用的方式不同\"><a href=\"#3-调用的方式不同\" class=\"headerlink\" title=\"3. 调用的方式不同\"></a>3. 调用的方式不同</h2><ol>\n<li>函数的调用：函数的调用是直接写 函数名(函数参数1,函数参数2,……)<br /></li>\n<li>方法的调用：方法是通过对象点方法调用的（这里是指对象方法）<br /></li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">className</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这是一个方法&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#调用---------------------</span></span><br><span class=\"line\"><span class=\"comment\">#实例化对象</span></span><br><span class=\"line\">c=className()</span><br><span class=\"line\">c.method()</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<ol>\n<li>函数是封装了一些独立的功能，可以直接调用，能将一些数据（参数）传递进去进行处理，然后返回一些数据（返回值），也可以没有返回值。可以直接在模块中进行定义使用。<br />所有传递给函数的数据都是显式传递的。<br /></li>\n<li>方法和函数类似，同样封装了独立的功能，但是方法是只能依靠类或者对象来调用的，表示针对性的操作。<br />方法中的数据self和cls是隐式传递的，即方法的调用者；<br />方法可以操作类内部的数据 <strong>简单的说，函数在python中独立存在，可直接使用的，而方法是必须被别人调用才能实现的</strong>。静态方法除外（与类和对象均无关，通过类名和对象名均可被调用，属函数）<br /></li>\n</ol>\n<p>不过也要摒弃<strong>错误认知</strong>：并不是类中的调用都叫方法<br />例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\">#实例化</span></span><br><span class=\"line\">obj = Foo()</span><br><span class=\"line\"><span class=\"comment\"># 执行方式一:调用的func是方法</span></span><br><span class=\"line\">obj.func() <span class=\"comment\">#func 方法</span></span><br><span class=\"line\"><span class=\"comment\"># 执行方式二：调用的func是函数</span></span><br><span class=\"line\">Foo.func(<span class=\"number\">123</span>) <span class=\"comment\"># 函数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最大的区别是<strong>参数传递</strong>，方法是自动传参self，函数是主动传参</p>\n</blockquote>\n<p>如果自己也不确定，可以打印类型查看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> FunctionType,MethodType</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(obj.func,MethodType))    ---&gt;<span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(Foo.func,FunctionType))  ---&gt;<span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n"},{"title":"scrapy安装失败","date":"2022-01-25T09:59:26.000Z","_content":"\n<a name=\"toc-heading-1\"></a>\n## 问题描述\n安装scrapy时提示：\n```python\nerror: Microsoft Visual C++ 14.0 is required. Get it with \"Microsoft Visual C++ Build Tools\": http://landinghub.visualstudio.com/visual-cpp-build-tools\n```\n<a name=\"toc-heading-2\"></a>\n## 解决办法\n\n<br />去该网站：[https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted](https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted) 下载对应的twisted的安装文件安装后即可。<br />例如：\n```python\npip install \"C:\\Users\\Howar Zheng\\Downloads\\Twisted-18.9.0-cp37-cp37m-win32.whl\"\n```\n\n","source":"_posts/scrapy安装失败.md","raw":"---\ntitle: scrapy安装失败\ndate: 2022-01-25 17:59:26\ntags:\n- Python\n- scrapy\ncategories:\n- 编程笔记\n- \tPython\n---\n\n<a name=\"toc-heading-1\"></a>\n## 问题描述\n安装scrapy时提示：\n```python\nerror: Microsoft Visual C++ 14.0 is required. Get it with \"Microsoft Visual C++ Build Tools\": http://landinghub.visualstudio.com/visual-cpp-build-tools\n```\n<a name=\"toc-heading-2\"></a>\n## 解决办法\n\n<br />去该网站：[https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted](https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted) 下载对应的twisted的安装文件安装后即可。<br />例如：\n```python\npip install \"C:\\Users\\Howar Zheng\\Downloads\\Twisted-18.9.0-cp37-cp37m-win32.whl\"\n```\n\n","slug":"scrapy安装失败","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmmb000kuwvf2vud51ha","content":"<p><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>安装scrapy时提示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: Microsoft Visual C++ <span class=\"number\">14.0</span> <span class=\"keyword\">is</span> required. Get it <span class=\"keyword\">with</span> <span class=\"string\">&quot;Microsoft Visual C++ Build Tools&quot;</span>: http://landinghub.visualstudio.com/visual-cpp-build-tools</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><br />去该网站：<a class=\"link\"   href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted\" >https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted<i class=\"fas fa-external-link-alt\"></i></a> 下载对应的twisted的安装文件安装后即可。<br />例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install <span class=\"string\">&quot;C:\\Users\\Howar Zheng\\Downloads\\Twisted-18.9.0-cp37-cp37m-win32.whl&quot;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>安装scrapy时提示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: Microsoft Visual C++ <span class=\"number\">14.0</span> <span class=\"keyword\">is</span> required. Get it <span class=\"keyword\">with</span> <span class=\"string\">&quot;Microsoft Visual C++ Build Tools&quot;</span>: http://landinghub.visualstudio.com/visual-cpp-build-tools</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><br />去该网站：<a class=\"link\"   href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted\" >https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted<i class=\"fas fa-external-link-alt\"></i></a> 下载对应的twisted的安装文件安装后即可。<br />例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install <span class=\"string\">&quot;C:\\Users\\Howar Zheng\\Downloads\\Twisted-18.9.0-cp37-cp37m-win32.whl&quot;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"win10环境hexo-admin插件实现本地后台管理博客","date":"2022-01-25T10:02:26.000Z","_content":"\nHexo每次发布和部署文章都需要在命令行下操作，比较繁琐，`hexo-admin`这个插件可以给你的Hexo博客搭建一个后台。\n<a name=\"toc-heading-1\"></a>\n\n## 安装插件\n```\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin\n```\n之后，在浏览器里打开[http://localhost:4000/admin即可访问后台。](http://localhost:4000/admin%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E3%80%82)<br />后台界面：<br />![](https://vip2.loli.io/2022/01/25/IuSb4sDmdRyCn7P.png)<br />可以直接新建文章，新建页面，写完文章后还能直接部署。<br />部署之前需要先进行配置：<br />在站点根目录新建文件`hexo-generate.bat`，在文件中写入`hexo g -d`。<br />之后，打开根目录站点配置文件：<br />**新增**\n```yaml\nadmin:\n    deployCommand: 'hexo-generate.bat'\n```\n现在，后台写完文章可以直接部署了。<br />为了更好的随时随地写文章，可以设置win10开机自启`hexo serve`<br />需要创建2个脚本，一个为vbs脚本，一个为bat脚本。<br />vbs脚本放到启动文件夹，用于运行bat脚本，而bat脚本用于启动hexo server<br />**创建vbs脚本**<br />`set ws=WScript.CreateObject(\"WScript.Shell\")`<br />`ws.Run \"E:\\\\WorkSpace\\\\webProject\\\\Hexo-blog\\\\hexo-server.bat /start\",0`<br />**创建bat脚本**<br />`E:`<br />`cd E:/WorkSpace/webProject/Hexo-Blog`<br />`hexo s -d`<br />将**vbs脚本**放到启动文件夹<br />win10 启动文件夹目录为<br />`C:\\Users\\你的用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`<br />这样就能实现开机启动`hexo server`了，剩下的一切都可以交给浏览器和`hexo-admin`了。如果使用七牛，则可以使用`hexo-admin with qiniu`。\n> **后台还可以设置密码访问。**\n\n![](https://vip2.loli.io/2022/01/25/SAUP5W3pwhTkycm.png)<br />后台设置**用户名**和**密码**后，将它复制到**根目录站点配置**文件即可。\n> 参考文献：\n\n1. [https://blog.csdn.net/upc_xbt/article/details/54020135](https://blog.csdn.net/upc_xbt/article/details/54020135)\n1. [https://segmentfault.com/a/1190000018488921](https://segmentfault.com/a/1190000018488921)\n\n\n\n","source":"_posts/win10环境hexo-admin插件实现本地后台管理博客.md","raw":"---\ntitle: win10环境hexo-admin插件实现本地后台管理博客\ndate: 2022-01-25 18:02:26\ntags:\n- Hexo\ncategories:\n- 网站建设\n- \tHexo\n---\n\nHexo每次发布和部署文章都需要在命令行下操作，比较繁琐，`hexo-admin`这个插件可以给你的Hexo博客搭建一个后台。\n<a name=\"toc-heading-1\"></a>\n\n## 安装插件\n```\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin\n```\n之后，在浏览器里打开[http://localhost:4000/admin即可访问后台。](http://localhost:4000/admin%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E3%80%82)<br />后台界面：<br />![](https://vip2.loli.io/2022/01/25/IuSb4sDmdRyCn7P.png)<br />可以直接新建文章，新建页面，写完文章后还能直接部署。<br />部署之前需要先进行配置：<br />在站点根目录新建文件`hexo-generate.bat`，在文件中写入`hexo g -d`。<br />之后，打开根目录站点配置文件：<br />**新增**\n```yaml\nadmin:\n    deployCommand: 'hexo-generate.bat'\n```\n现在，后台写完文章可以直接部署了。<br />为了更好的随时随地写文章，可以设置win10开机自启`hexo serve`<br />需要创建2个脚本，一个为vbs脚本，一个为bat脚本。<br />vbs脚本放到启动文件夹，用于运行bat脚本，而bat脚本用于启动hexo server<br />**创建vbs脚本**<br />`set ws=WScript.CreateObject(\"WScript.Shell\")`<br />`ws.Run \"E:\\\\WorkSpace\\\\webProject\\\\Hexo-blog\\\\hexo-server.bat /start\",0`<br />**创建bat脚本**<br />`E:`<br />`cd E:/WorkSpace/webProject/Hexo-Blog`<br />`hexo s -d`<br />将**vbs脚本**放到启动文件夹<br />win10 启动文件夹目录为<br />`C:\\Users\\你的用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`<br />这样就能实现开机启动`hexo server`了，剩下的一切都可以交给浏览器和`hexo-admin`了。如果使用七牛，则可以使用`hexo-admin with qiniu`。\n> **后台还可以设置密码访问。**\n\n![](https://vip2.loli.io/2022/01/25/SAUP5W3pwhTkycm.png)<br />后台设置**用户名**和**密码**后，将它复制到**根目录站点配置**文件即可。\n> 参考文献：\n\n1. [https://blog.csdn.net/upc_xbt/article/details/54020135](https://blog.csdn.net/upc_xbt/article/details/54020135)\n1. [https://segmentfault.com/a/1190000018488921](https://segmentfault.com/a/1190000018488921)\n\n\n\n","slug":"win10环境hexo-admin插件实现本地后台管理博客","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmmi000puwvf7h8o87iy","content":"<p>Hexo每次发布和部署文章都需要在命令行下操作，比较繁琐，<code>hexo-admin</code>这个插件可以给你的Hexo博客搭建一个后台。<br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-admin</span><br><span class=\"line\">hexo server -d</span><br><span class=\"line\">open http://localhost:4000/admin</span><br></pre></td></tr></table></figure>\n<p>之后，在浏览器里打开<a class=\"link\"   href=\"http://localhost:4000/admin%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E3%80%82\" >http://localhost:4000/admin即可访问后台。<i class=\"fas fa-external-link-alt\"></i></a><br />后台界面：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/IuSb4sDmdRyCn7P.png\"\n                     \n                ><br />可以直接新建文章，新建页面，写完文章后还能直接部署。<br />部署之前需要先进行配置：<br />在站点根目录新建文件<code>hexo-generate.bat</code>，在文件中写入<code>hexo g -d</code>。<br />之后，打开根目录站点配置文件：<br /><strong>新增</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">admin:</span></span><br><span class=\"line\">    <span class=\"attr\">deployCommand:</span> <span class=\"string\">&#x27;hexo-generate.bat&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>现在，后台写完文章可以直接部署了。<br />为了更好的随时随地写文章，可以设置win10开机自启<code>hexo serve</code><br />需要创建2个脚本，一个为vbs脚本，一个为bat脚本。<br />vbs脚本放到启动文件夹，用于运行bat脚本，而bat脚本用于启动hexo server<br /><strong>创建vbs脚本</strong><br /><code>set ws=WScript.CreateObject(&quot;WScript.Shell&quot;)</code><br /><code>ws.Run &quot;E:\\\\WorkSpace\\\\webProject\\\\Hexo-blog\\\\hexo-server.bat /start&quot;,0</code><br /><strong>创建bat脚本</strong><br /><code>E:</code><br /><code>cd E:/WorkSpace/webProject/Hexo-Blog</code><br /><code>hexo s -d</code><br />将<strong>vbs脚本</strong>放到启动文件夹<br />win10 启动文件夹目录为<br /><code>C:\\Users\\你的用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code><br />这样就能实现开机启动<code>hexo server</code>了，剩下的一切都可以交给浏览器和<code>hexo-admin</code>了。如果使用七牛，则可以使用<code>hexo-admin with qiniu</code>。</p>\n<blockquote>\n<p><strong>后台还可以设置密码访问。</strong></p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/SAUP5W3pwhTkycm.png\"\n                     \n                ><br />后台设置<strong>用户名</strong>和<strong>密码</strong>后，将它复制到<strong>根目录站点配置</strong>文件即可。</p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/upc_xbt/article/details/54020135\" >https://blog.csdn.net/upc_xbt/article/details/54020135<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://segmentfault.com/a/1190000018488921\" >https://segmentfault.com/a/1190000018488921<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>Hexo每次发布和部署文章都需要在命令行下操作，比较繁琐，<code>hexo-admin</code>这个插件可以给你的Hexo博客搭建一个后台。<br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-admin</span><br><span class=\"line\">hexo server -d</span><br><span class=\"line\">open http://localhost:4000/admin</span><br></pre></td></tr></table></figure>\n<p>之后，在浏览器里打开<a class=\"link\"   href=\"http://localhost:4000/admin%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E3%80%82\" >http://localhost:4000/admin即可访问后台。<i class=\"fas fa-external-link-alt\"></i></a><br />后台界面：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/IuSb4sDmdRyCn7P.png\"\n                     \n                ><br />可以直接新建文章，新建页面，写完文章后还能直接部署。<br />部署之前需要先进行配置：<br />在站点根目录新建文件<code>hexo-generate.bat</code>，在文件中写入<code>hexo g -d</code>。<br />之后，打开根目录站点配置文件：<br /><strong>新增</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">admin:</span></span><br><span class=\"line\">    <span class=\"attr\">deployCommand:</span> <span class=\"string\">&#x27;hexo-generate.bat&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>现在，后台写完文章可以直接部署了。<br />为了更好的随时随地写文章，可以设置win10开机自启<code>hexo serve</code><br />需要创建2个脚本，一个为vbs脚本，一个为bat脚本。<br />vbs脚本放到启动文件夹，用于运行bat脚本，而bat脚本用于启动hexo server<br /><strong>创建vbs脚本</strong><br /><code>set ws=WScript.CreateObject(&quot;WScript.Shell&quot;)</code><br /><code>ws.Run &quot;E:\\\\WorkSpace\\\\webProject\\\\Hexo-blog\\\\hexo-server.bat /start&quot;,0</code><br /><strong>创建bat脚本</strong><br /><code>E:</code><br /><code>cd E:/WorkSpace/webProject/Hexo-Blog</code><br /><code>hexo s -d</code><br />将<strong>vbs脚本</strong>放到启动文件夹<br />win10 启动文件夹目录为<br /><code>C:\\Users\\你的用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code><br />这样就能实现开机启动<code>hexo server</code>了，剩下的一切都可以交给浏览器和<code>hexo-admin</code>了。如果使用七牛，则可以使用<code>hexo-admin with qiniu</code>。</p>\n<blockquote>\n<p><strong>后台还可以设置密码访问。</strong></p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/SAUP5W3pwhTkycm.png\"\n                     \n                ><br />后台设置<strong>用户名</strong>和<strong>密码</strong>后，将它复制到<strong>根目录站点配置</strong>文件即可。</p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/upc_xbt/article/details/54020135\" >https://blog.csdn.net/upc_xbt/article/details/54020135<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://segmentfault.com/a/1190000018488921\" >https://segmentfault.com/a/1190000018488921<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"【Keep主题】为Hexo博客添加谷歌广告","date":"2022-01-25T03:32:06.000Z","_content":"本博客使用keep主题，在主题文件夹`themes/keep/layout/layout.ejs`中加入谷歌广告代码即可。<br />**例如：**\n```javascript\n<!DOCTYPE html>\n<html lang=\"<%= config.language %>\">\n<%- partial('_partial/head') %>\n<script data-ad-client=\"ca-pub-7835998003747351\" async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<body>\n<%- body %>\n<%- partial('_partial/scripts') %>\n</body>\n</html>\n```\n待谷歌审核通过后，下载`ads.txt`文件，并上传到Hexo的文档源文件夹`source/`下（也就是网站根目录下）。\n","source":"_posts/【Keep主题】为Hexo博客添加谷歌广告.md","raw":"---\ntitle: 【Keep主题】为Hexo博客添加谷歌广告\ndate: 2022-01-25 11:32:06\ntags:\n- 谷歌广告\ncategories:\n- 网站建设\n---\n本博客使用keep主题，在主题文件夹`themes/keep/layout/layout.ejs`中加入谷歌广告代码即可。<br />**例如：**\n```javascript\n<!DOCTYPE html>\n<html lang=\"<%= config.language %>\">\n<%- partial('_partial/head') %>\n<script data-ad-client=\"ca-pub-7835998003747351\" async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<body>\n<%- body %>\n<%- partial('_partial/scripts') %>\n</body>\n</html>\n```\n待谷歌审核通过后，下载`ads.txt`文件，并上传到Hexo的文档源文件夹`source/`下（也就是网站根目录下）。\n","slug":"【Keep主题】为Hexo博客添加谷歌广告","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmml000ruwvf7dnj461i","content":"<p>本博客使用keep主题，在主题文件夹<code>themes/keep/layout/layout.ejs</code>中加入谷歌广告代码即可。<br /><strong>例如：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;&lt;%= config.language %&gt;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&lt;%- partial(&#x27;_partial/head&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">data-ad-client</span>=<span class=\"string\">&quot;ca-pub-7835998003747351&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&lt;%- body %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">&lt;%- partial(&#x27;_partial/scripts&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>待谷歌审核通过后，下载<code>ads.txt</code>文件，并上传到Hexo的文档源文件夹<code>source/</code>下（也就是网站根目录下）。</p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>本博客使用keep主题，在主题文件夹<code>themes/keep/layout/layout.ejs</code>中加入谷歌广告代码即可。<br /><strong>例如：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;&lt;%= config.language %&gt;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&lt;%- partial(&#x27;_partial/head&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">data-ad-client</span>=<span class=\"string\">&quot;ca-pub-7835998003747351&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&lt;%- body %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">&lt;%- partial(&#x27;_partial/scripts&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>待谷歌审核通过后，下载<code>ads.txt</code>文件，并上传到Hexo的文档源文件夹<code>source/</code>下（也就是网站根目录下）。</p>\n"},{"title":"一款高效去除PDF水印的软件","date":"2018-06-13T07:32:26.000Z","_content":"\n软件名称：万彩办公大师OfficeBox<br />官网：[http://www.wofficebox.com/](http://www.wofficebox.com/)<br />绿色免安装版：[OfficeBox官方绿色版.zip](https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594430587122-0ec758a1-2387-405e-9ccf-3ba812935c70.zip?_lake_card=%7B%22uid%22%3A%221594430490688-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2020%2Fzip%2F641947%2F1594430587122-0ec758a1-2387-405e-9ccf-3ba812935c70.zip%22%2C%22name%22%3A%22OfficeBox%E5%AE%98%E6%96%B9%E7%BB%BF%E8%89%B2%E7%89%88.zip%22%2C%22size%22%3A19104196%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22ext%22%3A%22zip%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22M3huC%22%2C%22card%22%3A%22file%22%7D)<br />[OfficeBox离线打包版.zip](https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594585152962-1fee698c-c1d6-4e0c-ae9c-3f840070d50d.zip?_lake_card=%7B%22uid%22%3A%221594584938123-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2020%2Fzip%2F641947%2F1594585152962-1fee698c-c1d6-4e0c-ae9c-3f840070d50d.zip%22%2C%22name%22%3A%22OfficeBox%E7%A6%BB%E7%BA%BF%E6%89%93%E5%8C%85%E7%89%88.zip%22%2C%22size%22%3A331797785%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22ext%22%3A%22zip%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22AU9TO%22%2C%22card%22%3A%22file%22%7D)<br />\n\n<a name=\"kX8zb\"></a>\n# 使用方法\n有手就能学废。。。看软件说明啊~~\n","source":"_posts/一款高效去除PDF水印的软件.md","raw":"---\ntitle: 一款高效去除PDF水印的软件\ndate: 2018-06-13 15:32:26\ntags:\n- 万彩办公大师\ncategories:\n- 网络资源\n---\n\n软件名称：万彩办公大师OfficeBox<br />官网：[http://www.wofficebox.com/](http://www.wofficebox.com/)<br />绿色免安装版：[OfficeBox官方绿色版.zip](https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594430587122-0ec758a1-2387-405e-9ccf-3ba812935c70.zip?_lake_card=%7B%22uid%22%3A%221594430490688-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2020%2Fzip%2F641947%2F1594430587122-0ec758a1-2387-405e-9ccf-3ba812935c70.zip%22%2C%22name%22%3A%22OfficeBox%E5%AE%98%E6%96%B9%E7%BB%BF%E8%89%B2%E7%89%88.zip%22%2C%22size%22%3A19104196%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22ext%22%3A%22zip%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22M3huC%22%2C%22card%22%3A%22file%22%7D)<br />[OfficeBox离线打包版.zip](https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594585152962-1fee698c-c1d6-4e0c-ae9c-3f840070d50d.zip?_lake_card=%7B%22uid%22%3A%221594584938123-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2020%2Fzip%2F641947%2F1594585152962-1fee698c-c1d6-4e0c-ae9c-3f840070d50d.zip%22%2C%22name%22%3A%22OfficeBox%E7%A6%BB%E7%BA%BF%E6%89%93%E5%8C%85%E7%89%88.zip%22%2C%22size%22%3A331797785%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22ext%22%3A%22zip%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22AU9TO%22%2C%22card%22%3A%22file%22%7D)<br />\n\n<a name=\"kX8zb\"></a>\n# 使用方法\n有手就能学废。。。看软件说明啊~~\n","slug":"一款高效去除PDF水印的软件","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmmq000vuwvf0e8new22","content":"<p>软件名称：万彩办公大师OfficeBox<br />官网：<a class=\"link\"   href=\"http://www.wofficebox.com/\" >http://www.wofficebox.com/<i class=\"fas fa-external-link-alt\"></i></a><br />绿色免安装版：<a class=\"link\"   href=\"https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594430587122-0ec758a1-2387-405e-9ccf-3ba812935c70.zip?_lake_card=%7B%22uid%22:%221594430490688-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594430587122-0ec758a1-2387-405e-9ccf-3ba812935c70.zip%22,%22name%22:%22OfficeBox%E5%AE%98%E6%96%B9%E7%BB%BF%E8%89%B2%E7%89%88.zip%22,%22size%22:19104196,%22type%22:%22application/x-zip-compressed%22,%22ext%22:%22zip%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22M3huC%22,%22card%22:%22file%22%7D\" >OfficeBox官方绿色版.zip<i class=\"fas fa-external-link-alt\"></i></a><br /><a class=\"link\"   href=\"https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594585152962-1fee698c-c1d6-4e0c-ae9c-3f840070d50d.zip?_lake_card=%7B%22uid%22:%221594584938123-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594585152962-1fee698c-c1d6-4e0c-ae9c-3f840070d50d.zip%22,%22name%22:%22OfficeBox%E7%A6%BB%E7%BA%BF%E6%89%93%E5%8C%85%E7%89%88.zip%22,%22size%22:331797785,%22type%22:%22application/x-zip-compressed%22,%22ext%22:%22zip%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22AU9TO%22,%22card%22:%22file%22%7D\" >OfficeBox离线打包版.zip<i class=\"fas fa-external-link-alt\"></i></a><br /></p>\n<p><a name=\"kX8zb\"></a></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>有手就能学废。。。看软件说明啊~~</p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>软件名称：万彩办公大师OfficeBox<br />官网：<a class=\"link\"   href=\"http://www.wofficebox.com/\" >http://www.wofficebox.com/<i class=\"fas fa-external-link-alt\"></i></a><br />绿色免安装版：<a class=\"link\"   href=\"https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594430587122-0ec758a1-2387-405e-9ccf-3ba812935c70.zip?_lake_card=%7B%22uid%22:%221594430490688-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594430587122-0ec758a1-2387-405e-9ccf-3ba812935c70.zip%22,%22name%22:%22OfficeBox%E5%AE%98%E6%96%B9%E7%BB%BF%E8%89%B2%E7%89%88.zip%22,%22size%22:19104196,%22type%22:%22application/x-zip-compressed%22,%22ext%22:%22zip%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22M3huC%22,%22card%22:%22file%22%7D\" >OfficeBox官方绿色版.zip<i class=\"fas fa-external-link-alt\"></i></a><br /><a class=\"link\"   href=\"https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594585152962-1fee698c-c1d6-4e0c-ae9c-3f840070d50d.zip?_lake_card=%7B%22uid%22:%221594584938123-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2020/zip/641947/1594585152962-1fee698c-c1d6-4e0c-ae9c-3f840070d50d.zip%22,%22name%22:%22OfficeBox%E7%A6%BB%E7%BA%BF%E6%89%93%E5%8C%85%E7%89%88.zip%22,%22size%22:331797785,%22type%22:%22application/x-zip-compressed%22,%22ext%22:%22zip%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22AU9TO%22,%22card%22:%22file%22%7D\" >OfficeBox离线打包版.zip<i class=\"fas fa-external-link-alt\"></i></a><br /></p>\n<p><a name=\"kX8zb\"></a></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>有手就能学废。。。看软件说明啊~~</p>\n"},{"title":"免费及收费图床推荐","date":"2022-01-25T09:02:06.000Z","_content":"\n一个优秀的图床，能够节省blogger很多时间。<br />时间就是金钱！<br />目前免费的图床我只推荐Github。Github搭配jsdeliver免费CDN，还是能有不错的速度。<br />但由于滥用，jsdeliver目前在国内的访问也很不稳定。**目前jsdeliver的使用限制如下：**\n\n- 单个文件大小。（实测20M是没有问题的）\n- 单个仓库最大文件数10000。\n- 单个仓库容量。（超过50M警告，超过100M封禁）\n\n**jsdeliver的官方说明：**[https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net](https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net)<br />基于Github的图床工具目前有[PicGO](https://github.com/Molunerfinn/PicGo)（本地）+[PicX](https://picx.xpoet.cn/)（在线）。PicGO+Typora是本地Markdown文档写作的一种高效方式，可以一键上传和转义替换图片。<br />PicX是作者[@Xpoet](https://xpoet.cn/)基于Github开发的在线图床，目前支持批量上传、图片管理、图片压缩、jsdeliver CDN等功能。使用教程见：[https://github.com/XPoet/picx/blob/master/README.md](https://github.com/XPoet/picx/blob/master/README.md)<br />​\n\n付费的图床推荐使用SM.MS。目前SM.MS已推出付费套餐，终身会员只需59美元，会员有100 G的空间、支持支链及有专门的CDN线路。此外SM.MS还推出了ios、ipad和Mac APP，对于苹果全家桶的人更是值得推荐。<br />目前SM.MS关闭了匿名上传功能（禁止游客上传），滥用减少，也常常搞活动，例如我就只花了29美元购买。\n> SM.MS：由于关闭游客上传后，滥用减少，  SM.MS 图床的运营成本骤减，因此我们推出了 SM.MS 新年优惠，终身会员仅需 29 美元，使用优惠码 VMP6OUXH24 购买即可享受 VIP 服务，购买链接 [https://sa.net/r/12](https://sa.net/r/12)（2022.01.25）\n\n为了博客图片的稳定访问，我也不打算折腾了，目前已经入手SM.MS终身会员。不过，也不保证SM.MS真的能永久运行，每篇博客文章也都在[语雀](https://www.yuque.com/)进行了备份。\n","source":"_posts/免费及收费图床推荐.md","raw":"---\ntitle: 免费及收费图床推荐\ndate: 2022-01-25 17:02:06\ntags:\n- jsdeliver\n- Github\n- CDN\n- PicX\n- SM.MS\ncategories:\n- 网站建设\n---\n\n一个优秀的图床，能够节省blogger很多时间。<br />时间就是金钱！<br />目前免费的图床我只推荐Github。Github搭配jsdeliver免费CDN，还是能有不错的速度。<br />但由于滥用，jsdeliver目前在国内的访问也很不稳定。**目前jsdeliver的使用限制如下：**\n\n- 单个文件大小。（实测20M是没有问题的）\n- 单个仓库最大文件数10000。\n- 单个仓库容量。（超过50M警告，超过100M封禁）\n\n**jsdeliver的官方说明：**[https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net](https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net)<br />基于Github的图床工具目前有[PicGO](https://github.com/Molunerfinn/PicGo)（本地）+[PicX](https://picx.xpoet.cn/)（在线）。PicGO+Typora是本地Markdown文档写作的一种高效方式，可以一键上传和转义替换图片。<br />PicX是作者[@Xpoet](https://xpoet.cn/)基于Github开发的在线图床，目前支持批量上传、图片管理、图片压缩、jsdeliver CDN等功能。使用教程见：[https://github.com/XPoet/picx/blob/master/README.md](https://github.com/XPoet/picx/blob/master/README.md)<br />​\n\n付费的图床推荐使用SM.MS。目前SM.MS已推出付费套餐，终身会员只需59美元，会员有100 G的空间、支持支链及有专门的CDN线路。此外SM.MS还推出了ios、ipad和Mac APP，对于苹果全家桶的人更是值得推荐。<br />目前SM.MS关闭了匿名上传功能（禁止游客上传），滥用减少，也常常搞活动，例如我就只花了29美元购买。\n> SM.MS：由于关闭游客上传后，滥用减少，  SM.MS 图床的运营成本骤减，因此我们推出了 SM.MS 新年优惠，终身会员仅需 29 美元，使用优惠码 VMP6OUXH24 购买即可享受 VIP 服务，购买链接 [https://sa.net/r/12](https://sa.net/r/12)（2022.01.25）\n\n为了博客图片的稳定访问，我也不打算折腾了，目前已经入手SM.MS终身会员。不过，也不保证SM.MS真的能永久运行，每篇博客文章也都在[语雀](https://www.yuque.com/)进行了备份。\n","slug":"免费及收费图床推荐","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmms000xuwvf63hs2qgv","content":"<p>一个优秀的图床，能够节省blogger很多时间。<br />时间就是金钱！<br />目前免费的图床我只推荐Github。Github搭配jsdeliver免费CDN，还是能有不错的速度。<br />但由于滥用，jsdeliver目前在国内的访问也很不稳定。<strong>目前jsdeliver的使用限制如下：</strong></p>\n<ul>\n<li>单个文件大小。（实测20M是没有问题的）</li>\n<li>单个仓库最大文件数10000。</li>\n<li>单个仓库容量。（超过50M警告，超过100M封禁）</li>\n</ul>\n<p><strong>jsdeliver的官方说明：</strong><a class=\"link\"   href=\"https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net\" >https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net<i class=\"fas fa-external-link-alt\"></i></a><br />基于Github的图床工具目前有<a class=\"link\"   href=\"https://github.com/Molunerfinn/PicGo\" >PicGO<i class=\"fas fa-external-link-alt\"></i></a>（本地）+<a class=\"link\"   href=\"https://picx.xpoet.cn/\" >PicX<i class=\"fas fa-external-link-alt\"></i></a>（在线）。PicGO+Typora是本地Markdown文档写作的一种高效方式，可以一键上传和转义替换图片。<br />PicX是作者<a class=\"link\"   href=\"https://xpoet.cn/\" >@Xpoet<i class=\"fas fa-external-link-alt\"></i></a>基于Github开发的在线图床，目前支持批量上传、图片管理、图片压缩、jsdeliver CDN等功能。使用教程见：<a class=\"link\"   href=\"https://github.com/XPoet/picx/blob/master/README.md\" >https://github.com/XPoet/picx/blob/master/README.md<i class=\"fas fa-external-link-alt\"></i></a><br />​</p>\n<p>付费的图床推荐使用SM.MS。目前SM.MS已推出付费套餐，终身会员只需59美元，会员有100 G的空间、支持支链及有专门的CDN线路。此外SM.MS还推出了ios、ipad和Mac APP，对于苹果全家桶的人更是值得推荐。<br />目前SM.MS关闭了匿名上传功能（禁止游客上传），滥用减少，也常常搞活动，例如我就只花了29美元购买。</p>\n<blockquote>\n<p>SM.MS：由于关闭游客上传后，滥用减少，  SM.MS 图床的运营成本骤减，因此我们推出了 SM.MS 新年优惠，终身会员仅需 29 美元，使用优惠码 VMP6OUXH24 购买即可享受 VIP 服务，购买链接 <a class=\"link\"   href=\"https://sa.net/r/12\" >https://sa.net/r/12<i class=\"fas fa-external-link-alt\"></i></a>（2022.01.25）</p>\n</blockquote>\n<p>为了博客图片的稳定访问，我也不打算折腾了，目前已经入手SM.MS终身会员。不过，也不保证SM.MS真的能永久运行，每篇博客文章也都在<a class=\"link\"   href=\"https://www.yuque.com/\" >语雀<i class=\"fas fa-external-link-alt\"></i></a>进行了备份。</p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>一个优秀的图床，能够节省blogger很多时间。<br />时间就是金钱！<br />目前免费的图床我只推荐Github。Github搭配jsdeliver免费CDN，还是能有不错的速度。<br />但由于滥用，jsdeliver目前在国内的访问也很不稳定。<strong>目前jsdeliver的使用限制如下：</strong></p>\n<ul>\n<li>单个文件大小。（实测20M是没有问题的）</li>\n<li>单个仓库最大文件数10000。</li>\n<li>单个仓库容量。（超过50M警告，超过100M封禁）</li>\n</ul>\n<p><strong>jsdeliver的官方说明：</strong><a class=\"link\"   href=\"https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net\" >https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net<i class=\"fas fa-external-link-alt\"></i></a><br />基于Github的图床工具目前有<a class=\"link\"   href=\"https://github.com/Molunerfinn/PicGo\" >PicGO<i class=\"fas fa-external-link-alt\"></i></a>（本地）+<a class=\"link\"   href=\"https://picx.xpoet.cn/\" >PicX<i class=\"fas fa-external-link-alt\"></i></a>（在线）。PicGO+Typora是本地Markdown文档写作的一种高效方式，可以一键上传和转义替换图片。<br />PicX是作者<a class=\"link\"   href=\"https://xpoet.cn/\" >@Xpoet<i class=\"fas fa-external-link-alt\"></i></a>基于Github开发的在线图床，目前支持批量上传、图片管理、图片压缩、jsdeliver CDN等功能。使用教程见：<a class=\"link\"   href=\"https://github.com/XPoet/picx/blob/master/README.md\" >https://github.com/XPoet/picx/blob/master/README.md<i class=\"fas fa-external-link-alt\"></i></a><br />​</p>\n<p>付费的图床推荐使用SM.MS。目前SM.MS已推出付费套餐，终身会员只需59美元，会员有100 G的空间、支持支链及有专门的CDN线路。此外SM.MS还推出了ios、ipad和Mac APP，对于苹果全家桶的人更是值得推荐。<br />目前SM.MS关闭了匿名上传功能（禁止游客上传），滥用减少，也常常搞活动，例如我就只花了29美元购买。</p>\n<blockquote>\n<p>SM.MS：由于关闭游客上传后，滥用减少，  SM.MS 图床的运营成本骤减，因此我们推出了 SM.MS 新年优惠，终身会员仅需 29 美元，使用优惠码 VMP6OUXH24 购买即可享受 VIP 服务，购买链接 <a class=\"link\"   href=\"https://sa.net/r/12\" >https://sa.net/r/12<i class=\"fas fa-external-link-alt\"></i></a>（2022.01.25）</p>\n</blockquote>\n<p>为了博客图片的稳定访问，我也不打算折腾了，目前已经入手SM.MS终身会员。不过，也不保证SM.MS真的能永久运行，每篇博客文章也都在<a class=\"link\"   href=\"https://www.yuque.com/\" >语雀<i class=\"fas fa-external-link-alt\"></i></a>进行了备份。</p>\n"},{"title":"几个常用的正则表达式可视化网站","date":"2017-01-25T09:32:26.000Z","_content":"\n我们在写正则表达式的时候，为了快速验证结果，可以去以下几个常用的正则表达式可视化网站。\n\n1. [https://regexr.com/](https://regexr.com/)\n\n![](https://vip1.loli.io/2022/01/25/YGE4sM7xcdR3oqZ.png)\n\n2. [https://www.debuggex.com/](https://www.debuggex.com/)\n\n![](https://vip1.loli.io/2022/01/25/GsanMQ4fTwuB9Jl.png)\n\n3. [https://regexper.com/](https://regexper.com/)\n\n![image.png](https://vip2.loli.io/2022/01/25/uQGPALbispcI4Jk.png)\n\n4. [https://jex.im/regulex/](https://jex.im/regulex/)\n\n![image.png](https://vip1.loli.io/2022/01/25/NSa4Jr8x7qhKlov.png)\n\n","source":"_posts/几个常用的正则表达式可视化网站.md","raw":"---\ntitle: 几个常用的正则表达式可视化网站\ndate: 2017-01-25 17:32:26\ntags:\n- Python\n- 正则表达式\ncategories:\n- 编程笔记\n- \tPython\n---\n\n我们在写正则表达式的时候，为了快速验证结果，可以去以下几个常用的正则表达式可视化网站。\n\n1. [https://regexr.com/](https://regexr.com/)\n\n![](https://vip1.loli.io/2022/01/25/YGE4sM7xcdR3oqZ.png)\n\n2. [https://www.debuggex.com/](https://www.debuggex.com/)\n\n![](https://vip1.loli.io/2022/01/25/GsanMQ4fTwuB9Jl.png)\n\n3. [https://regexper.com/](https://regexper.com/)\n\n![image.png](https://vip2.loli.io/2022/01/25/uQGPALbispcI4Jk.png)\n\n4. [https://jex.im/regulex/](https://jex.im/regulex/)\n\n![image.png](https://vip1.loli.io/2022/01/25/NSa4Jr8x7qhKlov.png)\n\n","slug":"几个常用的正则表达式可视化网站","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmmv0011uwvf1tr9dhhh","content":"<p>我们在写正则表达式的时候，为了快速验证结果，可以去以下几个常用的正则表达式可视化网站。</p>\n<ol>\n<li><a class=\"link\"   href=\"https://regexr.com/\" >https://regexr.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/YGE4sM7xcdR3oqZ.png\"\n                     \n                ></p>\n<ol start=\"2\">\n<li><a class=\"link\"   href=\"https://www.debuggex.com/\" >https://www.debuggex.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/GsanMQ4fTwuB9Jl.png\"\n                     \n                ></p>\n<ol start=\"3\">\n<li><a class=\"link\"   href=\"https://regexper.com/\" >https://regexper.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/uQGPALbispcI4Jk.png\"\n                      alt=\"image.png\"\n                ></p>\n<ol start=\"4\">\n<li><a class=\"link\"   href=\"https://jex.im/regulex/\" >https://jex.im/regulex/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/NSa4Jr8x7qhKlov.png\"\n                      alt=\"image.png\"\n                ></p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>我们在写正则表达式的时候，为了快速验证结果，可以去以下几个常用的正则表达式可视化网站。</p>\n<ol>\n<li><a class=\"link\"   href=\"https://regexr.com/\" >https://regexr.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/YGE4sM7xcdR3oqZ.png\"\n                     \n                ></p>\n<ol start=\"2\">\n<li><a class=\"link\"   href=\"https://www.debuggex.com/\" >https://www.debuggex.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/GsanMQ4fTwuB9Jl.png\"\n                     \n                ></p>\n<ol start=\"3\">\n<li><a class=\"link\"   href=\"https://regexper.com/\" >https://regexper.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/25/uQGPALbispcI4Jk.png\"\n                      alt=\"image.png\"\n                ></p>\n<ol start=\"4\">\n<li><a class=\"link\"   href=\"https://jex.im/regulex/\" >https://jex.im/regulex/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/NSa4Jr8x7qhKlov.png\"\n                      alt=\"image.png\"\n                ></p>\n"},{"title":"利用Aria2打造一个离线的OneDrive网盘","date":"2021-01-13T07:32:26.000Z","_content":"\n<a name=\"toc-heading-1\"></a>\n## 原理\nAria2 有一个配置项`on-download-complete`，在下载完后执行一个脚本。当下载完成后 Aria2 会给脚本传递3个变量 `$1`、`$2`、`$3` 分别为 gid 、文件数量、文件路径。利用这个配置项和这些变量就可以实现很多功能，比如下载完成后调用 Rclone 进行上传操作。整个过程简单来说就是，Aria2 下载文件到 VPS ，完成后告诉 Rclone 将这个文件上传到网盘。理论上只要是 Rclone 支持的网盘，都可以按照这个思路来实现~~伪~~离线下载。并且还可实现下载完成上传OneDrive后自动本地删除，不占用VPS空间。\n<a name=\"toc-heading-2\"></a>\n## 安装 Aria2\n这里使用 Aria2 一键安装管理脚本，执行下面的代码下载并运行脚本，出现脚本操作菜单输入 `1`开始安装。<br />`wget -N https://git.io/aria2.sh && chmod +x aria2.sh && bash aria2.sh`\n<a name=\"toc-heading-3\"></a>\n## 安装和配置 Rclone\n`curl https://rclone.org/install.sh | sudo bash`<br />安装完后，输入 `rclone config` 命令进入交互式配置选项，按照提示一步一步来进行操作即可。\n<a name=\"toc-heading-4\"></a>\n### Rclone配置教程\n**获取Token**<br />在本地 Windows 电脑上[下载 rclone](https://rclone.org/downloads/)，然后解压出来，解压后进入文件夹，在资源管理器地址栏输入`cmd`，回车就会在当前路径打开命令提示符。输入以下命令：<br />`rclone authorize \"onedrive\"`<br />接下来会弹出浏览器，要求你登录账号进行授权。授权完后命令提示符窗口会出现以下信息：\n```bash\nIf your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth\nLog in and authorize rclone for access\nWaiting for code...\nGot code\nPaste the following into your remote machine --->\n{\"access_token\":\"xxxxxxxx\"}  # 注意!复制{xxxxxxxx}整个内容，并保存好，后面需要用到\n<---End paste\n```\n配置Rclone<br />输入 `rclone config` 命令，会出现以下信息，参照下面的注释进行操作。\n```bash\ne) Edit existing remote\nn) New remote\nd) Delete remote\nr) Rename remote\nc) Copy remote\ns) Set configuration password\nq) Quit config\ne/n/d/r/c/s/q> n  # 选择n，新建\nname> P3TERX   # 输入名称，类似于标签，用于区分不同的网盘。\nType of storage to configure.\nEnter a string value. Press Enter for the default (\"\").\nChoose a number from below, or type in your own value\n 1 / A stackable unification remote, which can appear to merge the contents of several remotes\n   \\ \"union\"\n 2 / Alias for a existing remote\n   \\ \"alias\"\n 3 / Amazon Drive\n   \\ \"amazon cloud drive\"\n 4 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio)\n   \\ \"s3\"\n 5 / Backblaze B2\n   \\ \"b2\"\n 6 / Box\n   \\ \"box\"\n 7 / Cache a remote\n   \\ \"cache\"\n 8 / Dropbox\n   \\ \"dropbox\"\n 9 / Encrypt/Decrypt a remote\n   \\ \"crypt\"\n10 / FTP Connection\n   \\ \"ftp\"\n11 / Google Cloud Storage (this is not Google Drive)\n   \\ \"google cloud storage\"\n12 / Google Drive\n   \\ \"drive\"\n13 / Hubic\n   \\ \"hubic\"\n14 / JottaCloud\n   \\ \"jottacloud\"\n15 / Local Disk\n   \\ \"local\"\n16 / Mega\n   \\ \"mega\"\n17 / Microsoft Azure Blob Storage\n   \\ \"azureblob\"\n18 / Microsoft OneDrive\n   \\ \"onedrive\"\n19 / OpenDrive\n   \\ \"opendrive\"\n20 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)\n   \\ \"swift\"\n21 / Pcloud\n   \\ \"pcloud\"\n22 / QingCloud Object Storage\n   \\ \"qingstor\"\n23 / SSH/SFTP Connection\n   \\ \"sftp\"\n24 / Webdav\n   \\ \"webdav\"\n25 / Yandex Disk\n   \\ \"yandex\"\n26 / http Connection\n   \\ \"http\"\nStorage> 18  # 选择18，Microsoft OneDrive\n** See help for onedrive backend at: https://rclone.org/onedrive/ **\nMicrosoft App Client Id\nLeave blank normally.\nEnter a string value. Press Enter for the default (\"\").\nclient_id>   # 留空，回车\nMicrosoft App Client Secret\nLeave blank normally.\nEnter a string value. Press Enter for the default (\"\").\nclient_secret>   # 留空，回车\nEdit advanced config? (y/n)\ny) Yes\nn) No\ny/n> n  # 选n\nRemote config\nUse auto config?\n * Say Y if not sure\n * Say N if you are working on a remote or headless machine\ny) Yes\nn) No\ny/n> n  # 选n\nFor this to work, you will need rclone available on a machine that has a web browser available.\nExecute the following on your machine:\n    rclone authorize \"onedrive\"\nThen paste the result below:\nresult> {\"XXXXXXXX\"}  # 上面保存的token复制到这里\n2018/10/31 19:54:06 ERROR : Failed to save new token in config file: section 'P3TERX' not found\nChoose a number from below, or type in an existing value\n 1 / OneDrive Personal or Business\n   \\ \"onedrive\"\n 2 / Root Sharepoint site\n   \\ \"sharepoint\"\n 3 / Type in driveID\n   \\ \"driveid\"\n 4 / Type in SiteID\n   \\ \"siteid\"\n 5 / Search a Sharepoint site\n   \\ \"search\"\nYour choice> 1  # 这里问你要选择的类型，选1\nFound 1 drives, please select the one you want to use:\n0: OneDrive (business) \nChose drive to use:> 0  # 程序找到网盘，这里编号是0，就选择0\nFound drive 'root' of type 'business', URL: https://xxxxxx-my.sharepoint.com/personal/xxxxxxx/Documents\nIs that okay?\ny) Yes\nn) No\ny/n> y  # 选y\n--------------------\n[P3TERX]\ntype = onedrive\ntoken = {\"XXXXXXXX\"}\ndrive_id = XXXXXXXXX\ndrive_type = business\n--------------------\ny) Yes this is OK\ne) Edit this remote\nd) Delete this remote\ny/e/d> y  # 选y\nCurrent remotes:\nName                 Type\n====                 ====\nP3TERX               onedrive\ne) Edit existing remote\nn) New remote\nd) Delete remote\nr) Rename remote\nc) Copy remote\ns) Set configuration password\nq) Quit config\ne/n/d/r/c/s/q> q  # 选q，退出\n```\n至此，Rclone 已成功连接到了 OneDrive 网盘。\n<a name=\"toc-heading-5\"></a>\n## 配置自动上传脚本\nAria2 一键安装管理脚本整合了 Aria2 完美配置 ，安装时会下载自动上传脚本。考虑到不是所有人都需要上传，默认不启用，需要手动启用。<br />输入`nano /root/.aria2/autoupload.sh`打开自动上传脚本进行编辑，脚本中有中文注释，按照自己的实际情况进行修改，一般只需要修改下面2个部分。\n```bash\nname='Onedrive' #配置Rclone时的name\nfolder='/DRIVEX/Download' #网盘里的文件夹，留空为网盘根目录。\n```\n输入`nano /root/.aria2/aria2.conf`打开 Aria2 配置文件进行修改。或使用Aria2 一键安装管理脚本中的手动修改选项打开配置文件进行修改。找到“下载完成后执行的命令”，修改成下面的这样。\n```\n# 下载完成后执行的命令\n# 删除.aria2文件\n#on-download-complete=/root/.aria2/delete.aria2.sh\n# 调用 rclone 上传(move)到网盘\non-download-complete=/root/.aria2/autoupload.sh\n```\n> - 在`on-download-complete=/root/.aria2/delete.aria2.sh`前加上`#`\n> - 去掉`#on-download-complete=/root/.aria2/autoupload.sh`前面的`#`\n\n**重启 Aria2**<br />`service aria2 restart`<br />**当你进行完以上所有操作，现在下载文件就会自动上传至相应的网盘。**\n<a name=\"toc-heading-6\"></a>\n## 前端面板使用\n现在，你可用通过命令行利用Aria2下载，不过比较繁琐，可以用一个前端面板进行远程连接下载。\n<a name=\"toc-heading-7\"></a>\n### 安装 AriaNg\nAriaNg是个 Web 前端，在项目的 releases页面下载后，上传至 VPS 进行部署，这里不做过多说明。~~作者直接提供了一个演示页面，是可以直接使用的。~~\n> **Q：使用他人提供的页面会不会不安全？**\n> A：设置是缓存在本地的，所填写的 RPC 地址和 RPC 密钥是不会上传的。如果不放心，可以使用本地程序或者自己部署。建议萌新学习一些建站经验后再尝试自己部署。\n\n<a name=\"toc-heading-8\"></a>\n### 本地程序\n[AriaNg Native](https://github.com/mayswind/AriaNg-Native/releases/tag/1.1.3) 是 Web 前端的本地化程序，比起网页端它功能会多一些，且不需要复杂的部署过程，下载安装后打开就可以使用，支持 Windows 和 macOS<br />另外，手机也有对应的Aria2客户端，例如[Aria2App](https://github.com/devgianlu/Aria2App)。\n<a name=\"toc-heading-9\"></a>\n## 前后端连接\n在`AriaNg 设置`中填写相关 RPC 信息。`RPC 地址`对应 IP 或域名， `RPC 秘钥`对应配置文件中`rpc-secret`选项后面的参数。如果没有过修改端口，就只需要填写`RPC 地址`和`RPC 密钥`两项。使用 Aria2 一键安装管理脚本安装后会显示这些信息，设置起来更简单。<br />![image](https://vip1.loli.io/2022/01/27/BAwglq9jT1dyohv.jpg)<br />\n<br />在你没有完全了解 Aria2 的情况下，不建议去修改设置，保持默认即可。\n\n- 在 AriaNg （或其它前端面板）中修改设置项，只有在运行中才有效，属于临时设置，它不会修改配置文件。重启或关闭 Aria2 后端程序后，会重新读取配置文件。所以必要的设置，需写入配置文件中。\n- 如果在修改配置文件后，重启 Aria2 的过程中没有关闭 AriaNg ，AriaNg 可能会给服务端传递之前缓存的配置，这就导致修改的配置没有生效（理论上其它前端面板也是这样）\n> 参考文献：\n\n1. [Aria2 前端面板(GUI) AriaNg 使用教程](https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html)\n1. [Aria2 + Rclone 实现 OneDrive、Google Drive 等网盘离线下载](https://p3terx.com/archives/offline-download-of-onedrive-gdrive.html)\n1. [Aria2 一键安装管理脚本](https://p3terx.com/archives/aria2-oneclick-installation-management-script.html)\n1. [https://rclone.org/install/#script-installation](https://rclone.org/install/#script-installation)\n1. [https://github.com/P3TERX/aria2_perfect_config](https://github.com/P3TERX/aria2_perfect_config)\n1. [Aria2 官方手册](https://aria2.github.io/manual/en/html/aria2c.html)\n1. [Rclone 官方手册](https://rclone.org/docs/)\n","source":"_posts/利用Aria2打造一个离线的OneDrive网盘.md","raw":"---\ntitle: 利用Aria2打造一个离线的OneDrive网盘\ndate: 2021-01-13 15:32:26\ntags:\n- Aria2\n- Rclone\ncategories:\n- 网站建设\n---\n\n<a name=\"toc-heading-1\"></a>\n## 原理\nAria2 有一个配置项`on-download-complete`，在下载完后执行一个脚本。当下载完成后 Aria2 会给脚本传递3个变量 `$1`、`$2`、`$3` 分别为 gid 、文件数量、文件路径。利用这个配置项和这些变量就可以实现很多功能，比如下载完成后调用 Rclone 进行上传操作。整个过程简单来说就是，Aria2 下载文件到 VPS ，完成后告诉 Rclone 将这个文件上传到网盘。理论上只要是 Rclone 支持的网盘，都可以按照这个思路来实现~~伪~~离线下载。并且还可实现下载完成上传OneDrive后自动本地删除，不占用VPS空间。\n<a name=\"toc-heading-2\"></a>\n## 安装 Aria2\n这里使用 Aria2 一键安装管理脚本，执行下面的代码下载并运行脚本，出现脚本操作菜单输入 `1`开始安装。<br />`wget -N https://git.io/aria2.sh && chmod +x aria2.sh && bash aria2.sh`\n<a name=\"toc-heading-3\"></a>\n## 安装和配置 Rclone\n`curl https://rclone.org/install.sh | sudo bash`<br />安装完后，输入 `rclone config` 命令进入交互式配置选项，按照提示一步一步来进行操作即可。\n<a name=\"toc-heading-4\"></a>\n### Rclone配置教程\n**获取Token**<br />在本地 Windows 电脑上[下载 rclone](https://rclone.org/downloads/)，然后解压出来，解压后进入文件夹，在资源管理器地址栏输入`cmd`，回车就会在当前路径打开命令提示符。输入以下命令：<br />`rclone authorize \"onedrive\"`<br />接下来会弹出浏览器，要求你登录账号进行授权。授权完后命令提示符窗口会出现以下信息：\n```bash\nIf your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth\nLog in and authorize rclone for access\nWaiting for code...\nGot code\nPaste the following into your remote machine --->\n{\"access_token\":\"xxxxxxxx\"}  # 注意!复制{xxxxxxxx}整个内容，并保存好，后面需要用到\n<---End paste\n```\n配置Rclone<br />输入 `rclone config` 命令，会出现以下信息，参照下面的注释进行操作。\n```bash\ne) Edit existing remote\nn) New remote\nd) Delete remote\nr) Rename remote\nc) Copy remote\ns) Set configuration password\nq) Quit config\ne/n/d/r/c/s/q> n  # 选择n，新建\nname> P3TERX   # 输入名称，类似于标签，用于区分不同的网盘。\nType of storage to configure.\nEnter a string value. Press Enter for the default (\"\").\nChoose a number from below, or type in your own value\n 1 / A stackable unification remote, which can appear to merge the contents of several remotes\n   \\ \"union\"\n 2 / Alias for a existing remote\n   \\ \"alias\"\n 3 / Amazon Drive\n   \\ \"amazon cloud drive\"\n 4 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio)\n   \\ \"s3\"\n 5 / Backblaze B2\n   \\ \"b2\"\n 6 / Box\n   \\ \"box\"\n 7 / Cache a remote\n   \\ \"cache\"\n 8 / Dropbox\n   \\ \"dropbox\"\n 9 / Encrypt/Decrypt a remote\n   \\ \"crypt\"\n10 / FTP Connection\n   \\ \"ftp\"\n11 / Google Cloud Storage (this is not Google Drive)\n   \\ \"google cloud storage\"\n12 / Google Drive\n   \\ \"drive\"\n13 / Hubic\n   \\ \"hubic\"\n14 / JottaCloud\n   \\ \"jottacloud\"\n15 / Local Disk\n   \\ \"local\"\n16 / Mega\n   \\ \"mega\"\n17 / Microsoft Azure Blob Storage\n   \\ \"azureblob\"\n18 / Microsoft OneDrive\n   \\ \"onedrive\"\n19 / OpenDrive\n   \\ \"opendrive\"\n20 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)\n   \\ \"swift\"\n21 / Pcloud\n   \\ \"pcloud\"\n22 / QingCloud Object Storage\n   \\ \"qingstor\"\n23 / SSH/SFTP Connection\n   \\ \"sftp\"\n24 / Webdav\n   \\ \"webdav\"\n25 / Yandex Disk\n   \\ \"yandex\"\n26 / http Connection\n   \\ \"http\"\nStorage> 18  # 选择18，Microsoft OneDrive\n** See help for onedrive backend at: https://rclone.org/onedrive/ **\nMicrosoft App Client Id\nLeave blank normally.\nEnter a string value. Press Enter for the default (\"\").\nclient_id>   # 留空，回车\nMicrosoft App Client Secret\nLeave blank normally.\nEnter a string value. Press Enter for the default (\"\").\nclient_secret>   # 留空，回车\nEdit advanced config? (y/n)\ny) Yes\nn) No\ny/n> n  # 选n\nRemote config\nUse auto config?\n * Say Y if not sure\n * Say N if you are working on a remote or headless machine\ny) Yes\nn) No\ny/n> n  # 选n\nFor this to work, you will need rclone available on a machine that has a web browser available.\nExecute the following on your machine:\n    rclone authorize \"onedrive\"\nThen paste the result below:\nresult> {\"XXXXXXXX\"}  # 上面保存的token复制到这里\n2018/10/31 19:54:06 ERROR : Failed to save new token in config file: section 'P3TERX' not found\nChoose a number from below, or type in an existing value\n 1 / OneDrive Personal or Business\n   \\ \"onedrive\"\n 2 / Root Sharepoint site\n   \\ \"sharepoint\"\n 3 / Type in driveID\n   \\ \"driveid\"\n 4 / Type in SiteID\n   \\ \"siteid\"\n 5 / Search a Sharepoint site\n   \\ \"search\"\nYour choice> 1  # 这里问你要选择的类型，选1\nFound 1 drives, please select the one you want to use:\n0: OneDrive (business) \nChose drive to use:> 0  # 程序找到网盘，这里编号是0，就选择0\nFound drive 'root' of type 'business', URL: https://xxxxxx-my.sharepoint.com/personal/xxxxxxx/Documents\nIs that okay?\ny) Yes\nn) No\ny/n> y  # 选y\n--------------------\n[P3TERX]\ntype = onedrive\ntoken = {\"XXXXXXXX\"}\ndrive_id = XXXXXXXXX\ndrive_type = business\n--------------------\ny) Yes this is OK\ne) Edit this remote\nd) Delete this remote\ny/e/d> y  # 选y\nCurrent remotes:\nName                 Type\n====                 ====\nP3TERX               onedrive\ne) Edit existing remote\nn) New remote\nd) Delete remote\nr) Rename remote\nc) Copy remote\ns) Set configuration password\nq) Quit config\ne/n/d/r/c/s/q> q  # 选q，退出\n```\n至此，Rclone 已成功连接到了 OneDrive 网盘。\n<a name=\"toc-heading-5\"></a>\n## 配置自动上传脚本\nAria2 一键安装管理脚本整合了 Aria2 完美配置 ，安装时会下载自动上传脚本。考虑到不是所有人都需要上传，默认不启用，需要手动启用。<br />输入`nano /root/.aria2/autoupload.sh`打开自动上传脚本进行编辑，脚本中有中文注释，按照自己的实际情况进行修改，一般只需要修改下面2个部分。\n```bash\nname='Onedrive' #配置Rclone时的name\nfolder='/DRIVEX/Download' #网盘里的文件夹，留空为网盘根目录。\n```\n输入`nano /root/.aria2/aria2.conf`打开 Aria2 配置文件进行修改。或使用Aria2 一键安装管理脚本中的手动修改选项打开配置文件进行修改。找到“下载完成后执行的命令”，修改成下面的这样。\n```\n# 下载完成后执行的命令\n# 删除.aria2文件\n#on-download-complete=/root/.aria2/delete.aria2.sh\n# 调用 rclone 上传(move)到网盘\non-download-complete=/root/.aria2/autoupload.sh\n```\n> - 在`on-download-complete=/root/.aria2/delete.aria2.sh`前加上`#`\n> - 去掉`#on-download-complete=/root/.aria2/autoupload.sh`前面的`#`\n\n**重启 Aria2**<br />`service aria2 restart`<br />**当你进行完以上所有操作，现在下载文件就会自动上传至相应的网盘。**\n<a name=\"toc-heading-6\"></a>\n## 前端面板使用\n现在，你可用通过命令行利用Aria2下载，不过比较繁琐，可以用一个前端面板进行远程连接下载。\n<a name=\"toc-heading-7\"></a>\n### 安装 AriaNg\nAriaNg是个 Web 前端，在项目的 releases页面下载后，上传至 VPS 进行部署，这里不做过多说明。~~作者直接提供了一个演示页面，是可以直接使用的。~~\n> **Q：使用他人提供的页面会不会不安全？**\n> A：设置是缓存在本地的，所填写的 RPC 地址和 RPC 密钥是不会上传的。如果不放心，可以使用本地程序或者自己部署。建议萌新学习一些建站经验后再尝试自己部署。\n\n<a name=\"toc-heading-8\"></a>\n### 本地程序\n[AriaNg Native](https://github.com/mayswind/AriaNg-Native/releases/tag/1.1.3) 是 Web 前端的本地化程序，比起网页端它功能会多一些，且不需要复杂的部署过程，下载安装后打开就可以使用，支持 Windows 和 macOS<br />另外，手机也有对应的Aria2客户端，例如[Aria2App](https://github.com/devgianlu/Aria2App)。\n<a name=\"toc-heading-9\"></a>\n## 前后端连接\n在`AriaNg 设置`中填写相关 RPC 信息。`RPC 地址`对应 IP 或域名， `RPC 秘钥`对应配置文件中`rpc-secret`选项后面的参数。如果没有过修改端口，就只需要填写`RPC 地址`和`RPC 密钥`两项。使用 Aria2 一键安装管理脚本安装后会显示这些信息，设置起来更简单。<br />![image](https://vip1.loli.io/2022/01/27/BAwglq9jT1dyohv.jpg)<br />\n<br />在你没有完全了解 Aria2 的情况下，不建议去修改设置，保持默认即可。\n\n- 在 AriaNg （或其它前端面板）中修改设置项，只有在运行中才有效，属于临时设置，它不会修改配置文件。重启或关闭 Aria2 后端程序后，会重新读取配置文件。所以必要的设置，需写入配置文件中。\n- 如果在修改配置文件后，重启 Aria2 的过程中没有关闭 AriaNg ，AriaNg 可能会给服务端传递之前缓存的配置，这就导致修改的配置没有生效（理论上其它前端面板也是这样）\n> 参考文献：\n\n1. [Aria2 前端面板(GUI) AriaNg 使用教程](https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html)\n1. [Aria2 + Rclone 实现 OneDrive、Google Drive 等网盘离线下载](https://p3terx.com/archives/offline-download-of-onedrive-gdrive.html)\n1. [Aria2 一键安装管理脚本](https://p3terx.com/archives/aria2-oneclick-installation-management-script.html)\n1. [https://rclone.org/install/#script-installation](https://rclone.org/install/#script-installation)\n1. [https://github.com/P3TERX/aria2_perfect_config](https://github.com/P3TERX/aria2_perfect_config)\n1. [Aria2 官方手册](https://aria2.github.io/manual/en/html/aria2c.html)\n1. [Rclone 官方手册](https://rclone.org/docs/)\n","slug":"利用Aria2打造一个离线的OneDrive网盘","published":1,"updated":"2022-01-27T03:11:23.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmmy0015uwvf8mwv1whf","content":"<p><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>Aria2 有一个配置项<code>on-download-complete</code>，在下载完后执行一个脚本。当下载完成后 Aria2 会给脚本传递3个变量 <code>$1</code>、<code>$2</code>、<code>$3</code> 分别为 gid 、文件数量、文件路径。利用这个配置项和这些变量就可以实现很多功能，比如下载完成后调用 Rclone 进行上传操作。整个过程简单来说就是，Aria2 下载文件到 VPS ，完成后告诉 Rclone 将这个文件上传到网盘。理论上只要是 Rclone 支持的网盘，都可以按照这个思路来实现<del>伪</del>离线下载。并且还可实现下载完成上传OneDrive后自动本地删除，不占用VPS空间。<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"安装-Aria2\"><a href=\"#安装-Aria2\" class=\"headerlink\" title=\"安装 Aria2\"></a>安装 Aria2</h2><p>这里使用 Aria2 一键安装管理脚本，执行下面的代码下载并运行脚本，出现脚本操作菜单输入 <code>1</code>开始安装。<br /><code>wget -N https://git.io/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</code><br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"安装和配置-Rclone\"><a href=\"#安装和配置-Rclone\" class=\"headerlink\" title=\"安装和配置 Rclone\"></a>安装和配置 Rclone</h2><p><code>curl https://rclone.org/install.sh | sudo bash</code><br />安装完后，输入 <code>rclone config</code> 命令进入交互式配置选项，按照提示一步一步来进行操作即可。<br><a name=\"toc-heading-4\"></a></p>\n<h3 id=\"Rclone配置教程\"><a href=\"#Rclone配置教程\" class=\"headerlink\" title=\"Rclone配置教程\"></a>Rclone配置教程</h3><p><strong>获取Token</strong><br />在本地 Windows 电脑上<a class=\"link\"   href=\"https://rclone.org/downloads/\" >下载 rclone<i class=\"fas fa-external-link-alt\"></i></a>，然后解压出来，解压后进入文件夹，在资源管理器地址栏输入<code>cmd</code>，回车就会在当前路径打开命令提示符。输入以下命令：<br /><code>rclone authorize &quot;onedrive&quot;</code><br />接下来会弹出浏览器，要求你登录账号进行授权。授权完后命令提示符窗口会出现以下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If your browser doesn<span class=\"string\">&#x27;t open automatically go to the following link: http://127.0.0.1:53682/auth</span></span><br><span class=\"line\"><span class=\"string\">Log in and authorize rclone for access</span></span><br><span class=\"line\"><span class=\"string\">Waiting for code...</span></span><br><span class=\"line\"><span class=\"string\">Got code</span></span><br><span class=\"line\"><span class=\"string\">Paste the following into your remote machine ---&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#123;&quot;access_token&quot;:&quot;xxxxxxxx&quot;&#125;  # 注意!复制&#123;xxxxxxxx&#125;整个内容，并保存好，后面需要用到</span></span><br><span class=\"line\"><span class=\"string\">&lt;---End paste</span></span><br></pre></td></tr></table></figure>\n<p>配置Rclone<br />输入 <code>rclone config</code> 命令，会出现以下信息，参照下面的注释进行操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e) Edit existing remote</span><br><span class=\"line\">n) New remote</span><br><span class=\"line\">d) Delete remote</span><br><span class=\"line\">r) Rename remote</span><br><span class=\"line\">c) Copy remote</span><br><span class=\"line\">s) Set configuration password</span><br><span class=\"line\">q) Quit config</span><br><span class=\"line\">e/n/d/r/c/s/q&gt; n  <span class=\"comment\"># 选择n，新建</span></span><br><span class=\"line\">name&gt; P3TERX   <span class=\"comment\"># 输入名称，类似于标签，用于区分不同的网盘。</span></span><br><span class=\"line\">Type of storage to configure.</span><br><span class=\"line\">Enter a string value. Press Enter <span class=\"keyword\">for</span> the default (<span class=\"string\">&quot;&quot;</span>).</span><br><span class=\"line\">Choose a number from below, or <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> your own value</span><br><span class=\"line\"> 1 / A stackable unification remote, <span class=\"built_in\">which</span> can appear to merge the contents of several remotes</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;union&quot;</span></span><br><span class=\"line\"> 2 / Alias <span class=\"keyword\">for</span> a existing remote</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;alias&quot;</span></span><br><span class=\"line\"> 3 / Amazon Drive</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;amazon cloud drive&quot;</span></span><br><span class=\"line\"> 4 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio)</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;s3&quot;</span></span><br><span class=\"line\"> 5 / Backblaze B2</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;b2&quot;</span></span><br><span class=\"line\"> 6 / Box</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;box&quot;</span></span><br><span class=\"line\"> 7 / Cache a remote</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;cache&quot;</span></span><br><span class=\"line\"> 8 / Dropbox</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;dropbox&quot;</span></span><br><span class=\"line\"> 9 / Encrypt/Decrypt a remote</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;crypt&quot;</span></span><br><span class=\"line\">10 / FTP Connection</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;ftp&quot;</span></span><br><span class=\"line\">11 / Google Cloud Storage (this is not Google Drive)</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;google cloud storage&quot;</span></span><br><span class=\"line\">12 / Google Drive</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;drive&quot;</span></span><br><span class=\"line\">13 / Hubic</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;hubic&quot;</span></span><br><span class=\"line\">14 / JottaCloud</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;jottacloud&quot;</span></span><br><span class=\"line\">15 / Local Disk</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;local&quot;</span></span><br><span class=\"line\">16 / Mega</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;mega&quot;</span></span><br><span class=\"line\">17 / Microsoft Azure Blob Storage</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;azureblob&quot;</span></span><br><span class=\"line\">18 / Microsoft OneDrive</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;onedrive&quot;</span></span><br><span class=\"line\">19 / OpenDrive</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;opendrive&quot;</span></span><br><span class=\"line\">20 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;swift&quot;</span></span><br><span class=\"line\">21 / Pcloud</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;pcloud&quot;</span></span><br><span class=\"line\">22 / QingCloud Object Storage</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;qingstor&quot;</span></span><br><span class=\"line\">23 / SSH/SFTP Connection</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;sftp&quot;</span></span><br><span class=\"line\">24 / Webdav</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;webdav&quot;</span></span><br><span class=\"line\">25 / Yandex Disk</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;yandex&quot;</span></span><br><span class=\"line\">26 / http Connection</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;http&quot;</span></span><br><span class=\"line\">Storage&gt; 18  <span class=\"comment\"># 选择18，Microsoft OneDrive</span></span><br><span class=\"line\">** See <span class=\"built_in\">help</span> <span class=\"keyword\">for</span> onedrive backend at: https://rclone.org/onedrive/ **</span><br><span class=\"line\">Microsoft App Client Id</span><br><span class=\"line\">Leave blank normally.</span><br><span class=\"line\">Enter a string value. Press Enter <span class=\"keyword\">for</span> the default (<span class=\"string\">&quot;&quot;</span>).</span><br><span class=\"line\">client_id&gt;   <span class=\"comment\"># 留空，回车</span></span><br><span class=\"line\">Microsoft App Client Secret</span><br><span class=\"line\">Leave blank normally.</span><br><span class=\"line\">Enter a string value. Press Enter <span class=\"keyword\">for</span> the default (<span class=\"string\">&quot;&quot;</span>).</span><br><span class=\"line\">client_secret&gt;   <span class=\"comment\"># 留空，回车</span></span><br><span class=\"line\">Edit advanced config? (y/n)</span><br><span class=\"line\">y) Yes</span><br><span class=\"line\">n) No</span><br><span class=\"line\">y/n&gt; n  <span class=\"comment\"># 选n</span></span><br><span class=\"line\">Remote config</span><br><span class=\"line\">Use auto config?</span><br><span class=\"line\"> * Say Y <span class=\"keyword\">if</span> not sure</span><br><span class=\"line\"> * Say N <span class=\"keyword\">if</span> you are working on a remote or headless machine</span><br><span class=\"line\">y) Yes</span><br><span class=\"line\">n) No</span><br><span class=\"line\">y/n&gt; n  <span class=\"comment\"># 选n</span></span><br><span class=\"line\">For this to work, you will need rclone available on a machine that has a web browser available.</span><br><span class=\"line\">Execute the following on your machine:</span><br><span class=\"line\">    rclone authorize <span class=\"string\">&quot;onedrive&quot;</span></span><br><span class=\"line\">Then paste the result below:</span><br><span class=\"line\">result&gt; &#123;<span class=\"string\">&quot;XXXXXXXX&quot;</span>&#125;  <span class=\"comment\"># 上面保存的token复制到这里</span></span><br><span class=\"line\">2018/10/31 19:54:06 ERROR : Failed to save new token <span class=\"keyword\">in</span> config file: section <span class=\"string\">&#x27;P3TERX&#x27;</span> not found</span><br><span class=\"line\">Choose a number from below, or <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> an existing value</span><br><span class=\"line\"> 1 / OneDrive Personal or Business</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;onedrive&quot;</span></span><br><span class=\"line\"> 2 / Root Sharepoint site</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;sharepoint&quot;</span></span><br><span class=\"line\"> 3 / Type <span class=\"keyword\">in</span> driveID</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;driveid&quot;</span></span><br><span class=\"line\"> 4 / Type <span class=\"keyword\">in</span> SiteID</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;siteid&quot;</span></span><br><span class=\"line\"> 5 / Search a Sharepoint site</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;search&quot;</span></span><br><span class=\"line\">Your choice&gt; 1  <span class=\"comment\"># 这里问你要选择的类型，选1</span></span><br><span class=\"line\">Found 1 drives, please select the one you want to use:</span><br><span class=\"line\">0: OneDrive (business) </span><br><span class=\"line\">Chose drive to use:&gt; 0  <span class=\"comment\"># 程序找到网盘，这里编号是0，就选择0</span></span><br><span class=\"line\">Found drive <span class=\"string\">&#x27;root&#x27;</span> of <span class=\"built_in\">type</span> <span class=\"string\">&#x27;business&#x27;</span>, URL: https://xxxxxx-my.sharepoint.com/personal/xxxxxxx/Documents</span><br><span class=\"line\">Is that okay?</span><br><span class=\"line\">y) Yes</span><br><span class=\"line\">n) No</span><br><span class=\"line\">y/n&gt; y  <span class=\"comment\"># 选y</span></span><br><span class=\"line\">--------------------</span><br><span class=\"line\">[P3TERX]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = onedrive</span><br><span class=\"line\">token = &#123;<span class=\"string\">&quot;XXXXXXXX&quot;</span>&#125;</span><br><span class=\"line\">drive_id = XXXXXXXXX</span><br><span class=\"line\">drive_type = business</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">y) Yes this is OK</span><br><span class=\"line\">e) Edit this remote</span><br><span class=\"line\">d) Delete this remote</span><br><span class=\"line\">y/e/d&gt; y  <span class=\"comment\"># 选y</span></span><br><span class=\"line\">Current remotes:</span><br><span class=\"line\">Name                 Type</span><br><span class=\"line\">====                 ====</span><br><span class=\"line\">P3TERX               onedrive</span><br><span class=\"line\">e) Edit existing remote</span><br><span class=\"line\">n) New remote</span><br><span class=\"line\">d) Delete remote</span><br><span class=\"line\">r) Rename remote</span><br><span class=\"line\">c) Copy remote</span><br><span class=\"line\">s) Set configuration password</span><br><span class=\"line\">q) Quit config</span><br><span class=\"line\">e/n/d/r/c/s/q&gt; q  <span class=\"comment\"># 选q，退出</span></span><br></pre></td></tr></table></figure>\n<p>至此，Rclone 已成功连接到了 OneDrive 网盘。<br><a name=\"toc-heading-5\"></a></p>\n<h2 id=\"配置自动上传脚本\"><a href=\"#配置自动上传脚本\" class=\"headerlink\" title=\"配置自动上传脚本\"></a>配置自动上传脚本</h2><p>Aria2 一键安装管理脚本整合了 Aria2 完美配置 ，安装时会下载自动上传脚本。考虑到不是所有人都需要上传，默认不启用，需要手动启用。<br />输入<code>nano /root/.aria2/autoupload.sh</code>打开自动上传脚本进行编辑，脚本中有中文注释，按照自己的实际情况进行修改，一般只需要修改下面2个部分。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">&#x27;Onedrive&#x27;</span> <span class=\"comment\">#配置Rclone时的name</span></span><br><span class=\"line\">folder=<span class=\"string\">&#x27;/DRIVEX/Download&#x27;</span> <span class=\"comment\">#网盘里的文件夹，留空为网盘根目录。</span></span><br></pre></td></tr></table></figure>\n<p>输入<code>nano /root/.aria2/aria2.conf</code>打开 Aria2 配置文件进行修改。或使用Aria2 一键安装管理脚本中的手动修改选项打开配置文件进行修改。找到“下载完成后执行的命令”，修改成下面的这样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载完成后执行的命令</span><br><span class=\"line\"># 删除.aria2文件</span><br><span class=\"line\">#on-download-complete=/root/.aria2/delete.aria2.sh</span><br><span class=\"line\"># 调用 rclone 上传(move)到网盘</span><br><span class=\"line\">on-download-complete=/root/.aria2/autoupload.sh</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>在<code>on-download-complete=/root/.aria2/delete.aria2.sh</code>前加上<code>#</code></li>\n<li>去掉<code>#on-download-complete=/root/.aria2/autoupload.sh</code>前面的<code>#</code></li>\n</ul>\n</blockquote>\n<p><strong>重启 Aria2</strong><br /><code>service aria2 restart</code><br /><strong>当你进行完以上所有操作，现在下载文件就会自动上传至相应的网盘。</strong><br><a name=\"toc-heading-6\"></a></p>\n<h2 id=\"前端面板使用\"><a href=\"#前端面板使用\" class=\"headerlink\" title=\"前端面板使用\"></a>前端面板使用</h2><p>现在，你可用通过命令行利用Aria2下载，不过比较繁琐，可以用一个前端面板进行远程连接下载。<br><a name=\"toc-heading-7\"></a></p>\n<h3 id=\"安装-AriaNg\"><a href=\"#安装-AriaNg\" class=\"headerlink\" title=\"安装 AriaNg\"></a>安装 AriaNg</h3><p>AriaNg是个 Web 前端，在项目的 releases页面下载后，上传至 VPS 进行部署，这里不做过多说明。<del>作者直接提供了一个演示页面，是可以直接使用的。</del></p>\n<blockquote>\n<p><strong>Q：使用他人提供的页面会不会不安全？</strong><br>A：设置是缓存在本地的，所填写的 RPC 地址和 RPC 密钥是不会上传的。如果不放心，可以使用本地程序或者自己部署。建议萌新学习一些建站经验后再尝试自己部署。</p>\n</blockquote>\n<p><a name=\"toc-heading-8\"></a></p>\n<h3 id=\"本地程序\"><a href=\"#本地程序\" class=\"headerlink\" title=\"本地程序\"></a>本地程序</h3><p><a class=\"link\"   href=\"https://github.com/mayswind/AriaNg-Native/releases/tag/1.1.3\" >AriaNg Native<i class=\"fas fa-external-link-alt\"></i></a> 是 Web 前端的本地化程序，比起网页端它功能会多一些，且不需要复杂的部署过程，下载安装后打开就可以使用，支持 Windows 和 macOS<br />另外，手机也有对应的Aria2客户端，例如<a class=\"link\"   href=\"https://github.com/devgianlu/Aria2App\" >Aria2App<i class=\"fas fa-external-link-alt\"></i></a>。<br><a name=\"toc-heading-9\"></a></p>\n<h2 id=\"前后端连接\"><a href=\"#前后端连接\" class=\"headerlink\" title=\"前后端连接\"></a>前后端连接</h2><p>在<code>AriaNg 设置</code>中填写相关 RPC 信息。<code>RPC 地址</code>对应 IP 或域名， <code>RPC 秘钥</code>对应配置文件中<code>rpc-secret</code>选项后面的参数。如果没有过修改端口，就只需要填写<code>RPC 地址</code>和<code>RPC 密钥</code>两项。使用 Aria2 一键安装管理脚本安装后会显示这些信息，设置起来更简单。<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/27/BAwglq9jT1dyohv.jpg\"\n                      alt=\"image\"\n                ><br /><br><br />在你没有完全了解 Aria2 的情况下，不建议去修改设置，保持默认即可。</p>\n<ul>\n<li>在 AriaNg （或其它前端面板）中修改设置项，只有在运行中才有效，属于临时设置，它不会修改配置文件。重启或关闭 Aria2 后端程序后，会重新读取配置文件。所以必要的设置，需写入配置文件中。</li>\n<li>如果在修改配置文件后，重启 Aria2 的过程中没有关闭 AriaNg ，AriaNg 可能会给服务端传递之前缓存的配置，这就导致修改的配置没有生效（理论上其它前端面板也是这样）<blockquote>\n<p>参考文献：</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><a class=\"link\"   href=\"https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html\" >Aria2 前端面板(GUI) AriaNg 使用教程<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://p3terx.com/archives/offline-download-of-onedrive-gdrive.html\" >Aria2 + Rclone 实现 OneDrive、Google Drive 等网盘离线下载<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://p3terx.com/archives/aria2-oneclick-installation-management-script.html\" >Aria2 一键安装管理脚本<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://rclone.org/install/#script-installation\" >https://rclone.org/install/#script-installation<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/P3TERX/aria2_perfect_config\" >https://github.com/P3TERX/aria2_perfect_config<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://aria2.github.io/manual/en/html/aria2c.html\" >Aria2 官方手册<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://rclone.org/docs/\" >Rclone 官方手册<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>Aria2 有一个配置项<code>on-download-complete</code>，在下载完后执行一个脚本。当下载完成后 Aria2 会给脚本传递3个变量 <code>$1</code>、<code>$2</code>、<code>$3</code> 分别为 gid 、文件数量、文件路径。利用这个配置项和这些变量就可以实现很多功能，比如下载完成后调用 Rclone 进行上传操作。整个过程简单来说就是，Aria2 下载文件到 VPS ，完成后告诉 Rclone 将这个文件上传到网盘。理论上只要是 Rclone 支持的网盘，都可以按照这个思路来实现<del>伪</del>离线下载。并且还可实现下载完成上传OneDrive后自动本地删除，不占用VPS空间。<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"安装-Aria2\"><a href=\"#安装-Aria2\" class=\"headerlink\" title=\"安装 Aria2\"></a>安装 Aria2</h2><p>这里使用 Aria2 一键安装管理脚本，执行下面的代码下载并运行脚本，出现脚本操作菜单输入 <code>1</code>开始安装。<br /><code>wget -N https://git.io/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</code><br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"安装和配置-Rclone\"><a href=\"#安装和配置-Rclone\" class=\"headerlink\" title=\"安装和配置 Rclone\"></a>安装和配置 Rclone</h2><p><code>curl https://rclone.org/install.sh | sudo bash</code><br />安装完后，输入 <code>rclone config</code> 命令进入交互式配置选项，按照提示一步一步来进行操作即可。<br><a name=\"toc-heading-4\"></a></p>\n<h3 id=\"Rclone配置教程\"><a href=\"#Rclone配置教程\" class=\"headerlink\" title=\"Rclone配置教程\"></a>Rclone配置教程</h3><p><strong>获取Token</strong><br />在本地 Windows 电脑上<a class=\"link\"   href=\"https://rclone.org/downloads/\" >下载 rclone<i class=\"fas fa-external-link-alt\"></i></a>，然后解压出来，解压后进入文件夹，在资源管理器地址栏输入<code>cmd</code>，回车就会在当前路径打开命令提示符。输入以下命令：<br /><code>rclone authorize &quot;onedrive&quot;</code><br />接下来会弹出浏览器，要求你登录账号进行授权。授权完后命令提示符窗口会出现以下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If your browser doesn<span class=\"string\">&#x27;t open automatically go to the following link: http://127.0.0.1:53682/auth</span></span><br><span class=\"line\"><span class=\"string\">Log in and authorize rclone for access</span></span><br><span class=\"line\"><span class=\"string\">Waiting for code...</span></span><br><span class=\"line\"><span class=\"string\">Got code</span></span><br><span class=\"line\"><span class=\"string\">Paste the following into your remote machine ---&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#123;&quot;access_token&quot;:&quot;xxxxxxxx&quot;&#125;  # 注意!复制&#123;xxxxxxxx&#125;整个内容，并保存好，后面需要用到</span></span><br><span class=\"line\"><span class=\"string\">&lt;---End paste</span></span><br></pre></td></tr></table></figure>\n<p>配置Rclone<br />输入 <code>rclone config</code> 命令，会出现以下信息，参照下面的注释进行操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e) Edit existing remote</span><br><span class=\"line\">n) New remote</span><br><span class=\"line\">d) Delete remote</span><br><span class=\"line\">r) Rename remote</span><br><span class=\"line\">c) Copy remote</span><br><span class=\"line\">s) Set configuration password</span><br><span class=\"line\">q) Quit config</span><br><span class=\"line\">e/n/d/r/c/s/q&gt; n  <span class=\"comment\"># 选择n，新建</span></span><br><span class=\"line\">name&gt; P3TERX   <span class=\"comment\"># 输入名称，类似于标签，用于区分不同的网盘。</span></span><br><span class=\"line\">Type of storage to configure.</span><br><span class=\"line\">Enter a string value. Press Enter <span class=\"keyword\">for</span> the default (<span class=\"string\">&quot;&quot;</span>).</span><br><span class=\"line\">Choose a number from below, or <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> your own value</span><br><span class=\"line\"> 1 / A stackable unification remote, <span class=\"built_in\">which</span> can appear to merge the contents of several remotes</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;union&quot;</span></span><br><span class=\"line\"> 2 / Alias <span class=\"keyword\">for</span> a existing remote</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;alias&quot;</span></span><br><span class=\"line\"> 3 / Amazon Drive</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;amazon cloud drive&quot;</span></span><br><span class=\"line\"> 4 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio)</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;s3&quot;</span></span><br><span class=\"line\"> 5 / Backblaze B2</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;b2&quot;</span></span><br><span class=\"line\"> 6 / Box</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;box&quot;</span></span><br><span class=\"line\"> 7 / Cache a remote</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;cache&quot;</span></span><br><span class=\"line\"> 8 / Dropbox</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;dropbox&quot;</span></span><br><span class=\"line\"> 9 / Encrypt/Decrypt a remote</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;crypt&quot;</span></span><br><span class=\"line\">10 / FTP Connection</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;ftp&quot;</span></span><br><span class=\"line\">11 / Google Cloud Storage (this is not Google Drive)</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;google cloud storage&quot;</span></span><br><span class=\"line\">12 / Google Drive</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;drive&quot;</span></span><br><span class=\"line\">13 / Hubic</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;hubic&quot;</span></span><br><span class=\"line\">14 / JottaCloud</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;jottacloud&quot;</span></span><br><span class=\"line\">15 / Local Disk</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;local&quot;</span></span><br><span class=\"line\">16 / Mega</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;mega&quot;</span></span><br><span class=\"line\">17 / Microsoft Azure Blob Storage</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;azureblob&quot;</span></span><br><span class=\"line\">18 / Microsoft OneDrive</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;onedrive&quot;</span></span><br><span class=\"line\">19 / OpenDrive</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;opendrive&quot;</span></span><br><span class=\"line\">20 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;swift&quot;</span></span><br><span class=\"line\">21 / Pcloud</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;pcloud&quot;</span></span><br><span class=\"line\">22 / QingCloud Object Storage</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;qingstor&quot;</span></span><br><span class=\"line\">23 / SSH/SFTP Connection</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;sftp&quot;</span></span><br><span class=\"line\">24 / Webdav</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;webdav&quot;</span></span><br><span class=\"line\">25 / Yandex Disk</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;yandex&quot;</span></span><br><span class=\"line\">26 / http Connection</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;http&quot;</span></span><br><span class=\"line\">Storage&gt; 18  <span class=\"comment\"># 选择18，Microsoft OneDrive</span></span><br><span class=\"line\">** See <span class=\"built_in\">help</span> <span class=\"keyword\">for</span> onedrive backend at: https://rclone.org/onedrive/ **</span><br><span class=\"line\">Microsoft App Client Id</span><br><span class=\"line\">Leave blank normally.</span><br><span class=\"line\">Enter a string value. Press Enter <span class=\"keyword\">for</span> the default (<span class=\"string\">&quot;&quot;</span>).</span><br><span class=\"line\">client_id&gt;   <span class=\"comment\"># 留空，回车</span></span><br><span class=\"line\">Microsoft App Client Secret</span><br><span class=\"line\">Leave blank normally.</span><br><span class=\"line\">Enter a string value. Press Enter <span class=\"keyword\">for</span> the default (<span class=\"string\">&quot;&quot;</span>).</span><br><span class=\"line\">client_secret&gt;   <span class=\"comment\"># 留空，回车</span></span><br><span class=\"line\">Edit advanced config? (y/n)</span><br><span class=\"line\">y) Yes</span><br><span class=\"line\">n) No</span><br><span class=\"line\">y/n&gt; n  <span class=\"comment\"># 选n</span></span><br><span class=\"line\">Remote config</span><br><span class=\"line\">Use auto config?</span><br><span class=\"line\"> * Say Y <span class=\"keyword\">if</span> not sure</span><br><span class=\"line\"> * Say N <span class=\"keyword\">if</span> you are working on a remote or headless machine</span><br><span class=\"line\">y) Yes</span><br><span class=\"line\">n) No</span><br><span class=\"line\">y/n&gt; n  <span class=\"comment\"># 选n</span></span><br><span class=\"line\">For this to work, you will need rclone available on a machine that has a web browser available.</span><br><span class=\"line\">Execute the following on your machine:</span><br><span class=\"line\">    rclone authorize <span class=\"string\">&quot;onedrive&quot;</span></span><br><span class=\"line\">Then paste the result below:</span><br><span class=\"line\">result&gt; &#123;<span class=\"string\">&quot;XXXXXXXX&quot;</span>&#125;  <span class=\"comment\"># 上面保存的token复制到这里</span></span><br><span class=\"line\">2018/10/31 19:54:06 ERROR : Failed to save new token <span class=\"keyword\">in</span> config file: section <span class=\"string\">&#x27;P3TERX&#x27;</span> not found</span><br><span class=\"line\">Choose a number from below, or <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> an existing value</span><br><span class=\"line\"> 1 / OneDrive Personal or Business</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;onedrive&quot;</span></span><br><span class=\"line\"> 2 / Root Sharepoint site</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;sharepoint&quot;</span></span><br><span class=\"line\"> 3 / Type <span class=\"keyword\">in</span> driveID</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;driveid&quot;</span></span><br><span class=\"line\"> 4 / Type <span class=\"keyword\">in</span> SiteID</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;siteid&quot;</span></span><br><span class=\"line\"> 5 / Search a Sharepoint site</span><br><span class=\"line\">   \\ <span class=\"string\">&quot;search&quot;</span></span><br><span class=\"line\">Your choice&gt; 1  <span class=\"comment\"># 这里问你要选择的类型，选1</span></span><br><span class=\"line\">Found 1 drives, please select the one you want to use:</span><br><span class=\"line\">0: OneDrive (business) </span><br><span class=\"line\">Chose drive to use:&gt; 0  <span class=\"comment\"># 程序找到网盘，这里编号是0，就选择0</span></span><br><span class=\"line\">Found drive <span class=\"string\">&#x27;root&#x27;</span> of <span class=\"built_in\">type</span> <span class=\"string\">&#x27;business&#x27;</span>, URL: https://xxxxxx-my.sharepoint.com/personal/xxxxxxx/Documents</span><br><span class=\"line\">Is that okay?</span><br><span class=\"line\">y) Yes</span><br><span class=\"line\">n) No</span><br><span class=\"line\">y/n&gt; y  <span class=\"comment\"># 选y</span></span><br><span class=\"line\">--------------------</span><br><span class=\"line\">[P3TERX]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = onedrive</span><br><span class=\"line\">token = &#123;<span class=\"string\">&quot;XXXXXXXX&quot;</span>&#125;</span><br><span class=\"line\">drive_id = XXXXXXXXX</span><br><span class=\"line\">drive_type = business</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">y) Yes this is OK</span><br><span class=\"line\">e) Edit this remote</span><br><span class=\"line\">d) Delete this remote</span><br><span class=\"line\">y/e/d&gt; y  <span class=\"comment\"># 选y</span></span><br><span class=\"line\">Current remotes:</span><br><span class=\"line\">Name                 Type</span><br><span class=\"line\">====                 ====</span><br><span class=\"line\">P3TERX               onedrive</span><br><span class=\"line\">e) Edit existing remote</span><br><span class=\"line\">n) New remote</span><br><span class=\"line\">d) Delete remote</span><br><span class=\"line\">r) Rename remote</span><br><span class=\"line\">c) Copy remote</span><br><span class=\"line\">s) Set configuration password</span><br><span class=\"line\">q) Quit config</span><br><span class=\"line\">e/n/d/r/c/s/q&gt; q  <span class=\"comment\"># 选q，退出</span></span><br></pre></td></tr></table></figure>\n<p>至此，Rclone 已成功连接到了 OneDrive 网盘。<br><a name=\"toc-heading-5\"></a></p>\n<h2 id=\"配置自动上传脚本\"><a href=\"#配置自动上传脚本\" class=\"headerlink\" title=\"配置自动上传脚本\"></a>配置自动上传脚本</h2><p>Aria2 一键安装管理脚本整合了 Aria2 完美配置 ，安装时会下载自动上传脚本。考虑到不是所有人都需要上传，默认不启用，需要手动启用。<br />输入<code>nano /root/.aria2/autoupload.sh</code>打开自动上传脚本进行编辑，脚本中有中文注释，按照自己的实际情况进行修改，一般只需要修改下面2个部分。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">&#x27;Onedrive&#x27;</span> <span class=\"comment\">#配置Rclone时的name</span></span><br><span class=\"line\">folder=<span class=\"string\">&#x27;/DRIVEX/Download&#x27;</span> <span class=\"comment\">#网盘里的文件夹，留空为网盘根目录。</span></span><br></pre></td></tr></table></figure>\n<p>输入<code>nano /root/.aria2/aria2.conf</code>打开 Aria2 配置文件进行修改。或使用Aria2 一键安装管理脚本中的手动修改选项打开配置文件进行修改。找到“下载完成后执行的命令”，修改成下面的这样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载完成后执行的命令</span><br><span class=\"line\"># 删除.aria2文件</span><br><span class=\"line\">#on-download-complete=/root/.aria2/delete.aria2.sh</span><br><span class=\"line\"># 调用 rclone 上传(move)到网盘</span><br><span class=\"line\">on-download-complete=/root/.aria2/autoupload.sh</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>在<code>on-download-complete=/root/.aria2/delete.aria2.sh</code>前加上<code>#</code></li>\n<li>去掉<code>#on-download-complete=/root/.aria2/autoupload.sh</code>前面的<code>#</code></li>\n</ul>\n</blockquote>\n<p><strong>重启 Aria2</strong><br /><code>service aria2 restart</code><br /><strong>当你进行完以上所有操作，现在下载文件就会自动上传至相应的网盘。</strong><br><a name=\"toc-heading-6\"></a></p>\n<h2 id=\"前端面板使用\"><a href=\"#前端面板使用\" class=\"headerlink\" title=\"前端面板使用\"></a>前端面板使用</h2><p>现在，你可用通过命令行利用Aria2下载，不过比较繁琐，可以用一个前端面板进行远程连接下载。<br><a name=\"toc-heading-7\"></a></p>\n<h3 id=\"安装-AriaNg\"><a href=\"#安装-AriaNg\" class=\"headerlink\" title=\"安装 AriaNg\"></a>安装 AriaNg</h3><p>AriaNg是个 Web 前端，在项目的 releases页面下载后，上传至 VPS 进行部署，这里不做过多说明。<del>作者直接提供了一个演示页面，是可以直接使用的。</del></p>\n<blockquote>\n<p><strong>Q：使用他人提供的页面会不会不安全？</strong><br>A：设置是缓存在本地的，所填写的 RPC 地址和 RPC 密钥是不会上传的。如果不放心，可以使用本地程序或者自己部署。建议萌新学习一些建站经验后再尝试自己部署。</p>\n</blockquote>\n<p><a name=\"toc-heading-8\"></a></p>\n<h3 id=\"本地程序\"><a href=\"#本地程序\" class=\"headerlink\" title=\"本地程序\"></a>本地程序</h3><p><a class=\"link\"   href=\"https://github.com/mayswind/AriaNg-Native/releases/tag/1.1.3\" >AriaNg Native<i class=\"fas fa-external-link-alt\"></i></a> 是 Web 前端的本地化程序，比起网页端它功能会多一些，且不需要复杂的部署过程，下载安装后打开就可以使用，支持 Windows 和 macOS<br />另外，手机也有对应的Aria2客户端，例如<a class=\"link\"   href=\"https://github.com/devgianlu/Aria2App\" >Aria2App<i class=\"fas fa-external-link-alt\"></i></a>。<br><a name=\"toc-heading-9\"></a></p>\n<h2 id=\"前后端连接\"><a href=\"#前后端连接\" class=\"headerlink\" title=\"前后端连接\"></a>前后端连接</h2><p>在<code>AriaNg 设置</code>中填写相关 RPC 信息。<code>RPC 地址</code>对应 IP 或域名， <code>RPC 秘钥</code>对应配置文件中<code>rpc-secret</code>选项后面的参数。如果没有过修改端口，就只需要填写<code>RPC 地址</code>和<code>RPC 密钥</code>两项。使用 Aria2 一键安装管理脚本安装后会显示这些信息，设置起来更简单。<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/27/BAwglq9jT1dyohv.jpg\"\n                      alt=\"image\"\n                ><br /><br><br />在你没有完全了解 Aria2 的情况下，不建议去修改设置，保持默认即可。</p>\n<ul>\n<li>在 AriaNg （或其它前端面板）中修改设置项，只有在运行中才有效，属于临时设置，它不会修改配置文件。重启或关闭 Aria2 后端程序后，会重新读取配置文件。所以必要的设置，需写入配置文件中。</li>\n<li>如果在修改配置文件后，重启 Aria2 的过程中没有关闭 AriaNg ，AriaNg 可能会给服务端传递之前缓存的配置，这就导致修改的配置没有生效（理论上其它前端面板也是这样）<blockquote>\n<p>参考文献：</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><a class=\"link\"   href=\"https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html\" >Aria2 前端面板(GUI) AriaNg 使用教程<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://p3terx.com/archives/offline-download-of-onedrive-gdrive.html\" >Aria2 + Rclone 实现 OneDrive、Google Drive 等网盘离线下载<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://p3terx.com/archives/aria2-oneclick-installation-management-script.html\" >Aria2 一键安装管理脚本<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://rclone.org/install/#script-installation\" >https://rclone.org/install/#script-installation<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/P3TERX/aria2_perfect_config\" >https://github.com/P3TERX/aria2_perfect_config<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://aria2.github.io/manual/en/html/aria2c.html\" >Aria2 官方手册<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://rclone.org/docs/\" >Rclone 官方手册<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"利用Github Actions+Hexo+Github Pages实现完全在线写博客","date":"2022-01-19T08:32:26.000Z","_content":"\n<a name=\"JnUTE\"></a>\n# 1、本地安装Hexo\n\n<br />Hexo是基于node.js，所以需要安装[node.js](https://nodejs.org/en/)和[Git](https://git-scm.com/)(用于提交本地文件到Github)<br />安装好环境后，打开Git Bash，全局安装`hexo-cli`\n```bash\nnpm install -g hexo-cli\n```\n之后利用hexo命令建立本地站点：\n```bash\nhexo init howarzheng.github.io\ncd howarzheng.github.io\nnpm install\n```\n\n<br />执行完毕之后，博客的框架就安装好了。<br />执行下面命令即可预览本地博客内容：<br />\n\n```bash\nhexo g\nhexo s\n```\n\n\n> Hexo站点和主题相关配置网上有较多教程，这里略。\n\n\n\n<a name=\"747ac54f\"></a>\n# 2、Github Actions实现Github Pages自动发布\n\n<br />为了利用Github Actions实现Github Pages自动发布，我们首先需要将我们的Hexo站点文件推送到远程Github仓库分支。<br />**Git配置：**<br />\n\n```bash\n# 配置用户名和邮箱\n git config --global user.name \"HowarZheng\n git config --global user.email \"howar.zheng@gmail.com\n```\n\n<br />接着生成 ssh 密钥文件，输入如下命令后直接三次回车即可：<br />\n\n```bash\n# 生成 ssh 密钥\nssh-keygen -t rsa -C \"howar.zheng@gmail.com\"\n```\n\n<br />执行上述命令之后，会生成 id_rsa 和 id_rsa.pub 两个文件，前者是我们私有的，而后者则是对外开放的。<br />**配置公钥：**<br />接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，比如：yourname.github.io 这种，访问 Settings -> Deploy keys：<br />![howarzhengimage](https://vip2.loli.io/2022/01/27/KjRfOeSGDqoJsVd.jpg)<br />点击Add deploy key添加公钥。Title: HEXO_DEPLOY_PUB；Key: id_rsa.pub内容。<br />**配置私钥：**<br />首先在 GitHub 上打开保存 Hexo 的仓库，访问 Settings -> Secrets，然后选择 New secret。Name: HEXO_DEPLOY_PRI。Value: id_rsa内容。<br />**推送本地文件到远程分支：**\n```bash\ngit init // 初始化版本库\ngit add . // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 \ngit commit -m \"版本备注\"\ngit remote add origin git@github.com:HowarZheng/howarzheng.github.io.git // 关联远程仓库\ngit push -u origin master // 第一次推送时\ngit push origin master // 第一次推送后，直接使用该命令即可推送修改\n```\n<a name=\"hOrjt\"></a>\n# 3、创建Github Actions Workflow\n\n\nHexo站点文件在master分支，hexo生成的HTML站点文件在hexo-web分支，图片放在Figure_Bed分支。\n```yaml\nname: Hexo Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-18.04\n    if: github.event.repository.owner.id == github.event.sender.id\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          ref: master\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: '12'\n\n      - name: Setup Hexo\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 700 ~/.ssh\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"howar.zheng@gmail.com\"\n          git config --global user.name \"HowarZheng\"\n          npm install hexo-cli -g\n          npm install\n      - name: Deploy\n        run: |\n          hexo clean\n          hexo deploy\n```\n> 简单解释一下，当我们推送内容到远程 master 分支的时候，就会触发这个 Workflow。使用 Ubuntu 18.04 作为 hexo deploy 的系统。首先 checkout 源代码，然后设置使用最新的 Node.js v12 LTS 作为 node 解释器。接下来就是创建 SSH 相关的配置文件，注意 secrets.HEXO_DEPLOY_PRI 就是对应我们之前设置的私钥，所以名字一定不要搞错。git config 相关的名字和邮件地址替换成大家自己使用的就好了。最后就是安装 Hexo CLI、各个依赖模块和部署了。\n\n<a name=\"vvhh9\"></a>\n# 参考文献\n[1、用 GitHub Actions 来自动部署 Hexo](https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/)\n","source":"_posts/利用Github Actions+Hexo+Github Pages实现完全在线写博客.md","raw":"---\ntitle: 利用Github Actions+Hexo+Github Pages实现完全在线写博客\ndate: 2022-01-19 16:32:26\ntags:\n- Github Actions\n- Hexo\n- Github Pages\ncategories:\n- 网站建设\n---\n\n<a name=\"JnUTE\"></a>\n# 1、本地安装Hexo\n\n<br />Hexo是基于node.js，所以需要安装[node.js](https://nodejs.org/en/)和[Git](https://git-scm.com/)(用于提交本地文件到Github)<br />安装好环境后，打开Git Bash，全局安装`hexo-cli`\n```bash\nnpm install -g hexo-cli\n```\n之后利用hexo命令建立本地站点：\n```bash\nhexo init howarzheng.github.io\ncd howarzheng.github.io\nnpm install\n```\n\n<br />执行完毕之后，博客的框架就安装好了。<br />执行下面命令即可预览本地博客内容：<br />\n\n```bash\nhexo g\nhexo s\n```\n\n\n> Hexo站点和主题相关配置网上有较多教程，这里略。\n\n\n\n<a name=\"747ac54f\"></a>\n# 2、Github Actions实现Github Pages自动发布\n\n<br />为了利用Github Actions实现Github Pages自动发布，我们首先需要将我们的Hexo站点文件推送到远程Github仓库分支。<br />**Git配置：**<br />\n\n```bash\n# 配置用户名和邮箱\n git config --global user.name \"HowarZheng\n git config --global user.email \"howar.zheng@gmail.com\n```\n\n<br />接着生成 ssh 密钥文件，输入如下命令后直接三次回车即可：<br />\n\n```bash\n# 生成 ssh 密钥\nssh-keygen -t rsa -C \"howar.zheng@gmail.com\"\n```\n\n<br />执行上述命令之后，会生成 id_rsa 和 id_rsa.pub 两个文件，前者是我们私有的，而后者则是对外开放的。<br />**配置公钥：**<br />接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，比如：yourname.github.io 这种，访问 Settings -> Deploy keys：<br />![howarzhengimage](https://vip2.loli.io/2022/01/27/KjRfOeSGDqoJsVd.jpg)<br />点击Add deploy key添加公钥。Title: HEXO_DEPLOY_PUB；Key: id_rsa.pub内容。<br />**配置私钥：**<br />首先在 GitHub 上打开保存 Hexo 的仓库，访问 Settings -> Secrets，然后选择 New secret。Name: HEXO_DEPLOY_PRI。Value: id_rsa内容。<br />**推送本地文件到远程分支：**\n```bash\ngit init // 初始化版本库\ngit add . // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 \ngit commit -m \"版本备注\"\ngit remote add origin git@github.com:HowarZheng/howarzheng.github.io.git // 关联远程仓库\ngit push -u origin master // 第一次推送时\ngit push origin master // 第一次推送后，直接使用该命令即可推送修改\n```\n<a name=\"hOrjt\"></a>\n# 3、创建Github Actions Workflow\n\n\nHexo站点文件在master分支，hexo生成的HTML站点文件在hexo-web分支，图片放在Figure_Bed分支。\n```yaml\nname: Hexo Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-18.04\n    if: github.event.repository.owner.id == github.event.sender.id\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          ref: master\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: '12'\n\n      - name: Setup Hexo\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 700 ~/.ssh\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"howar.zheng@gmail.com\"\n          git config --global user.name \"HowarZheng\"\n          npm install hexo-cli -g\n          npm install\n      - name: Deploy\n        run: |\n          hexo clean\n          hexo deploy\n```\n> 简单解释一下，当我们推送内容到远程 master 分支的时候，就会触发这个 Workflow。使用 Ubuntu 18.04 作为 hexo deploy 的系统。首先 checkout 源代码，然后设置使用最新的 Node.js v12 LTS 作为 node 解释器。接下来就是创建 SSH 相关的配置文件，注意 secrets.HEXO_DEPLOY_PRI 就是对应我们之前设置的私钥，所以名字一定不要搞错。git config 相关的名字和邮件地址替换成大家自己使用的就好了。最后就是安装 Hexo CLI、各个依赖模块和部署了。\n\n<a name=\"vvhh9\"></a>\n# 参考文献\n[1、用 GitHub Actions 来自动部署 Hexo](https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/)\n","slug":"利用Github Actions+Hexo+Github Pages实现完全在线写博客","published":1,"updated":"2022-01-27T03:13:06.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmn10019uwvf154o47we","content":"<p><a name=\"JnUTE\"></a></p>\n<h1 id=\"1、本地安装Hexo\"><a href=\"#1、本地安装Hexo\" class=\"headerlink\" title=\"1、本地安装Hexo\"></a>1、本地安装Hexo</h1><p><br />Hexo是基于node.js，所以需要安装<a class=\"link\"   href=\"https://nodejs.org/en/\" >node.js<i class=\"fas fa-external-link-alt\"></i></a>和<a class=\"link\"   href=\"https://git-scm.com/\" >Git<i class=\"fas fa-external-link-alt\"></i></a>(用于提交本地文件到Github)<br />安装好环境后，打开Git Bash，全局安装<code>hexo-cli</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>之后利用hexo命令建立本地站点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init howarzheng.github.io</span><br><span class=\"line\"><span class=\"built_in\">cd</span> howarzheng.github.io</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p><br />执行完毕之后，博客的框架就安装好了。<br />执行下面命令即可预览本地博客内容：<br /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>Hexo站点和主题相关配置网上有较多教程，这里略。</p>\n</blockquote>\n<p><a name=\"747ac54f\"></a></p>\n<h1 id=\"2、Github-Actions实现Github-Pages自动发布\"><a href=\"#2、Github-Actions实现Github-Pages自动发布\" class=\"headerlink\" title=\"2、Github Actions实现Github Pages自动发布\"></a>2、Github Actions实现Github Pages自动发布</h1><p><br />为了利用Github Actions实现Github Pages自动发布，我们首先需要将我们的Hexo站点文件推送到远程Github仓库分支。<br /><strong>Git配置：</strong><br /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置用户名和邮箱</span></span><br><span class=\"line\"> git config --global user.name <span class=\"string\">&quot;HowarZheng</span></span><br><span class=\"line\"><span class=\"string\"> git config --global user.email &quot;</span>howar.zheng@gmail.com</span><br></pre></td></tr></table></figure>\n\n<p><br />接着生成 ssh 密钥文件，输入如下命令后直接三次回车即可：<br /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 ssh 密钥</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;howar.zheng@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><br />执行上述命令之后，会生成 id_rsa 和 id_rsa.pub 两个文件，前者是我们私有的，而后者则是对外开放的。<br /><strong>配置公钥：</strong><br />接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，比如：yourname.github.io 这种，访问 Settings -&gt; Deploy keys：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/KjRfOeSGDqoJsVd.jpg\"\n                      alt=\"howarzhengimage\"\n                ><br />点击Add deploy key添加公钥。Title: HEXO_DEPLOY_PUB；Key: id_rsa.pub内容。<br /><strong>配置私钥：</strong><br />首先在 GitHub 上打开保存 Hexo 的仓库，访问 Settings -&gt; Secrets，然后选择 New secret。Name: HEXO_DEPLOY_PRI。Value: id_rsa内容。<br /><strong>推送本地文件到远程分支：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init // 初始化版本库</span><br><span class=\"line\">git add . // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;版本备注&quot;</span></span><br><span class=\"line\">git remote add origin git@github.com:HowarZheng/howarzheng.github.io.git // 关联远程仓库</span><br><span class=\"line\">git push -u origin master // 第一次推送时</span><br><span class=\"line\">git push origin master // 第一次推送后，直接使用该命令即可推送修改</span><br></pre></td></tr></table></figure>\n<p><a name=\"hOrjt\"></a></p>\n<h1 id=\"3、创建Github-Actions-Workflow\"><a href=\"#3、创建Github-Actions-Workflow\" class=\"headerlink\" title=\"3、创建Github Actions Workflow\"></a>3、创建Github Actions Workflow</h1><p>Hexo站点文件在master分支，hexo生成的HTML站点文件在hexo-web分支，图片放在Figure_Bed分支。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-18.04</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">github.event.repository.owner.id</span> <span class=\"string\">==</span> <span class=\"string\">github.event.sender.id</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"string\">source</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node.js</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&#x27;12&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">ACTION_DEPLOY_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          mkdir -p ~/.ssh/</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          chmod 700 ~/.ssh</span></span><br><span class=\"line\"><span class=\"string\">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.email &quot;howar.zheng@gmail.com&quot;</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.name &quot;HowarZheng&quot;</span></span><br><span class=\"line\"><span class=\"string\">          npm install hexo-cli -g</span></span><br><span class=\"line\"><span class=\"string\">          npm install</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          hexo clean</span></span><br><span class=\"line\"><span class=\"string\">          hexo deploy</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>简单解释一下，当我们推送内容到远程 master 分支的时候，就会触发这个 Workflow。使用 Ubuntu 18.04 作为 hexo deploy 的系统。首先 checkout 源代码，然后设置使用最新的 Node.js v12 LTS 作为 node 解释器。接下来就是创建 SSH 相关的配置文件，注意 secrets.HEXO_DEPLOY_PRI 就是对应我们之前设置的私钥，所以名字一定不要搞错。git config 相关的名字和邮件地址替换成大家自己使用的就好了。最后就是安装 Hexo CLI、各个依赖模块和部署了。</p>\n</blockquote>\n<p><a name=\"vvhh9\"></a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a class=\"link\"   href=\"https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/\" >1、用 GitHub Actions 来自动部署 Hexo<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><a name=\"JnUTE\"></a></p>\n<h1 id=\"1、本地安装Hexo\"><a href=\"#1、本地安装Hexo\" class=\"headerlink\" title=\"1、本地安装Hexo\"></a>1、本地安装Hexo</h1><p><br />Hexo是基于node.js，所以需要安装<a class=\"link\"   href=\"https://nodejs.org/en/\" >node.js<i class=\"fas fa-external-link-alt\"></i></a>和<a class=\"link\"   href=\"https://git-scm.com/\" >Git<i class=\"fas fa-external-link-alt\"></i></a>(用于提交本地文件到Github)<br />安装好环境后，打开Git Bash，全局安装<code>hexo-cli</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>之后利用hexo命令建立本地站点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init howarzheng.github.io</span><br><span class=\"line\"><span class=\"built_in\">cd</span> howarzheng.github.io</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p><br />执行完毕之后，博客的框架就安装好了。<br />执行下面命令即可预览本地博客内容：<br /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>Hexo站点和主题相关配置网上有较多教程，这里略。</p>\n</blockquote>\n<p><a name=\"747ac54f\"></a></p>\n<h1 id=\"2、Github-Actions实现Github-Pages自动发布\"><a href=\"#2、Github-Actions实现Github-Pages自动发布\" class=\"headerlink\" title=\"2、Github Actions实现Github Pages自动发布\"></a>2、Github Actions实现Github Pages自动发布</h1><p><br />为了利用Github Actions实现Github Pages自动发布，我们首先需要将我们的Hexo站点文件推送到远程Github仓库分支。<br /><strong>Git配置：</strong><br /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置用户名和邮箱</span></span><br><span class=\"line\"> git config --global user.name <span class=\"string\">&quot;HowarZheng</span></span><br><span class=\"line\"><span class=\"string\"> git config --global user.email &quot;</span>howar.zheng@gmail.com</span><br></pre></td></tr></table></figure>\n\n<p><br />接着生成 ssh 密钥文件，输入如下命令后直接三次回车即可：<br /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 ssh 密钥</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;howar.zheng@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><br />执行上述命令之后，会生成 id_rsa 和 id_rsa.pub 两个文件，前者是我们私有的，而后者则是对外开放的。<br /><strong>配置公钥：</strong><br />接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，比如：yourname.github.io 这种，访问 Settings -&gt; Deploy keys：<br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/KjRfOeSGDqoJsVd.jpg\"\n                      alt=\"howarzhengimage\"\n                ><br />点击Add deploy key添加公钥。Title: HEXO_DEPLOY_PUB；Key: id_rsa.pub内容。<br /><strong>配置私钥：</strong><br />首先在 GitHub 上打开保存 Hexo 的仓库，访问 Settings -&gt; Secrets，然后选择 New secret。Name: HEXO_DEPLOY_PRI。Value: id_rsa内容。<br /><strong>推送本地文件到远程分支：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init // 初始化版本库</span><br><span class=\"line\">git add . // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;版本备注&quot;</span></span><br><span class=\"line\">git remote add origin git@github.com:HowarZheng/howarzheng.github.io.git // 关联远程仓库</span><br><span class=\"line\">git push -u origin master // 第一次推送时</span><br><span class=\"line\">git push origin master // 第一次推送后，直接使用该命令即可推送修改</span><br></pre></td></tr></table></figure>\n<p><a name=\"hOrjt\"></a></p>\n<h1 id=\"3、创建Github-Actions-Workflow\"><a href=\"#3、创建Github-Actions-Workflow\" class=\"headerlink\" title=\"3、创建Github Actions Workflow\"></a>3、创建Github Actions Workflow</h1><p>Hexo站点文件在master分支，hexo生成的HTML站点文件在hexo-web分支，图片放在Figure_Bed分支。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-18.04</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">github.event.repository.owner.id</span> <span class=\"string\">==</span> <span class=\"string\">github.event.sender.id</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"string\">source</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node.js</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&#x27;12&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">ACTION_DEPLOY_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          mkdir -p ~/.ssh/</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          chmod 700 ~/.ssh</span></span><br><span class=\"line\"><span class=\"string\">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.email &quot;howar.zheng@gmail.com&quot;</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.name &quot;HowarZheng&quot;</span></span><br><span class=\"line\"><span class=\"string\">          npm install hexo-cli -g</span></span><br><span class=\"line\"><span class=\"string\">          npm install</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          hexo clean</span></span><br><span class=\"line\"><span class=\"string\">          hexo deploy</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>简单解释一下，当我们推送内容到远程 master 分支的时候，就会触发这个 Workflow。使用 Ubuntu 18.04 作为 hexo deploy 的系统。首先 checkout 源代码，然后设置使用最新的 Node.js v12 LTS 作为 node 解释器。接下来就是创建 SSH 相关的配置文件，注意 secrets.HEXO_DEPLOY_PRI 就是对应我们之前设置的私钥，所以名字一定不要搞错。git config 相关的名字和邮件地址替换成大家自己使用的就好了。最后就是安装 Hexo CLI、各个依赖模块和部署了。</p>\n</blockquote>\n<p><a name=\"vvhh9\"></a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a class=\"link\"   href=\"https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/\" >1、用 GitHub Actions 来自动部署 Hexo<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"前后端同学必会的Linux基础命令","date":"2018-08-13T05:34:46.000Z","_content":"<a name=\"toc-heading-1\"></a>\n## 基础篇\n<a name=\"toc-heading-2\"></a>\n### 1、进入目录\n`cd 目录名`\n<a name=\"toc-heading-3\"></a>\n### 2、显示当前路径\n`pwd`\n<a name=\"toc-heading-4\"></a>\n### 3、显示路径下的文件\n`ls`<br />`ls -a 显示隐藏文件。隐藏文件以 . 开头命名`\n<a name=\"toc-heading-5\"></a>\n### 4、查看创建文本\n`touch abc.txt 查看abc.txt 如果不存在则自动创建`\n<a name=\"toc-heading-6\"></a>\n### 5、创建文件夹\n`mkdir 文件名 当前目录创建一个文件夹`<br />`mkdir -p name1/name2 当期目录递归创建name1/name2文件，如 提示 mkdir: xxx: Permission denied，则需要admin账号 sudo -i 输入密码 即可`\n<a name=\"toc-heading-7\"></a>\n### 6、重命名操作\n`mv test test1 把test文件的名字修改为test1`<br />`mv test1 /home/wechat/ 将test1文件 移动到/home/wechat 目录下`\n<a name=\"toc-heading-8\"></a>\n### 7、删除操作\n`rm file 删除file文件(存在子文件时不可删除)`<br />`rm -r /file 删除file文件下的所有目录文件`<br />`rm -rf ./* 删库跑路专用命令`\n<a name=\"toc-heading-9\"></a>\n### 8、复制\n`cp file /home 复制file命令至home目录下`<br />`cp -r test /home/wechat 复制test文件夹和其所有子文件 至 /home/wechat目录下`<br />`cp -r test /home/wechat/test2 复制test文件夹和其所有子文件 至 /home/wechat目录下并重命名为test2`\n<a name=\"toc-heading-10\"></a>\n### 9、压缩、解压\n解压tar<br />`tar xvf test.tar`<br />压缩tar<br />`tar cvf test1.tar name 将name文件夹压缩为test1.tar`<br />解压tar.gz<br />`tar zxvf test.tar.gz`<br />压缩<br />`tar zxvf test.tar.gz name`\n<a name=\"toc-heading-11\"></a>\n## 查找 && 日志\n<a name=\"toc-heading-12\"></a>\n### 1、cat、more、less命令\n`cat test.log 查看test.log 的文件内容`<br />`cat -n test.log 查看test.log的文件内容并显示行号`<br />more、less和cat作用基本相同，只不过more可以按页码来查看。 都是按q退出查看使用命令时，空格键翻页(显示下一屏内容)<br />回车：显示下一行内容\n<a name=\"toc-heading-13\"></a>\n### 2、find命令\n```bash\n.代表当前目录\nfind . -name '*.txt'          查找当前目录及其子目录下扩展名为txt的文件\nfind . -mtime -2             列出两天内修改过的文件\nfind . -atime -3             列出三天内被存取的文件\nfind . -mmin +30             半个小时内被修改过的文件\nfind . -amin +40              四十分钟内被存取过的文件\nfind . -size +1M              查找当前目录超过1M的文件\nfind .  -size -1M              查找当前目录小于1M的文件\nfind .  -size   +512k          超过512k的文件\nfind . -empty                  查找当前目录为空的文件或者文件夹\n```\n<a name=\"toc-heading-14\"></a>\n### 3、whereis命令\n`whereis name/ 搜索name文件的路径`\n<a name=\"toc-heading-15\"></a>\n### 4、grep命令\n`ps -ef|grep nginx 查看nginx的进程`<br />`ps -ef|grep nginx -c 查看nginx的进程个数`<br />`cat test.log | grep ^a 查找test.log 中以o开头的内容`<br />`cat test.log | grep $k 查找test.log中以K结尾的内容`<br />`cat test.log | grep 'bd4f63cc918611e8a14f7c04d0d7fdcc' --color 在test.log中搜索bd4f63cc918611e8a14f7c04d0d7fdcc并高亮，等同于 grep 'bd4f63cc918611e8a14f7c04d0d7fdcc' test.log --color`<br />`grep -n 'abc' test.log 搜索结果显示行数`<br />`grep 'abc' test1.log test2.log 从多个文件中查找abc`\n<a name=\"toc-heading-16\"></a>\n### 5、tail命令\n`tail -f xxx.log 查看xxx.log 默认显示最后10行`<br />`tail -f 100 xx.log /tail -100f xx.log 查看100行`\n<a name=\"toc-heading-17\"></a>\n### 6、vim命令\n`vim`<br />`vim file 查看文本`<br />`vim file1 file2 ... 查看多个文本`<br />正常模式/vim模式 通过**ESC**进行切换<br />vim模式下\n```bash\ni：在当前位置插入\ndd： 删除光标所在行\nD:删除光标所在行\n2dd: 删除光标之后的2行\nG：切换光标至末尾\nw! 强制写入\nwq 保存并退出\nq！ 强制退出 不保存\n/abc  在文本中查找abc\nset nu 显示文本行数\n移动光标 k(上)、j(下)、h(左)、l(右)\nyy 复制光标所在行\np粘贴复制的\no:另起一行\n```\n<a name=\"toc-heading-18\"></a>\n## 其他常用操作\n<a name=\"toc-heading-19\"></a>\n### 1、查看用户信息\n`w`<br />`who`\n<a name=\"toc-heading-20\"></a>\n### 2、修改文件权限\n`chmod 777 file1 每个人都可以对file文件进行读写和执行的权限`<br />`chmod 666 file1 每个人都可以对file文件进行读写操作`\n<a name=\"toc-heading-21\"></a>\n### 3、系统级别\n`top 实时显示系统资源使用情况`<br />`dh -h 查看当前那磁盘使用情况`<br />`du -sh /usr 计算usr文件大小`<br />`netstat –a 列出 tcp, udp 和 unix 协议下所有套接字的所有连接`<br />`kill 端口号 终止该端口`<br />`kill -9 端口 立即强制终止端口`<br />`rz lz 上传 和下载文件`\n> 参考文献：\n\n1. [前后端同学必会的Linux基础命令](https://zhuanlan.zhihu.com/p/51796190)\n","source":"_posts/前后端同学必会的Linux基础命令.md","raw":"---\ntitle: 前后端同学必会的Linux基础命令\ndate: 2018-08-13 13:34:46\ntags:\n- Linux\ncategories:\n- 编程笔记\n---\n<a name=\"toc-heading-1\"></a>\n## 基础篇\n<a name=\"toc-heading-2\"></a>\n### 1、进入目录\n`cd 目录名`\n<a name=\"toc-heading-3\"></a>\n### 2、显示当前路径\n`pwd`\n<a name=\"toc-heading-4\"></a>\n### 3、显示路径下的文件\n`ls`<br />`ls -a 显示隐藏文件。隐藏文件以 . 开头命名`\n<a name=\"toc-heading-5\"></a>\n### 4、查看创建文本\n`touch abc.txt 查看abc.txt 如果不存在则自动创建`\n<a name=\"toc-heading-6\"></a>\n### 5、创建文件夹\n`mkdir 文件名 当前目录创建一个文件夹`<br />`mkdir -p name1/name2 当期目录递归创建name1/name2文件，如 提示 mkdir: xxx: Permission denied，则需要admin账号 sudo -i 输入密码 即可`\n<a name=\"toc-heading-7\"></a>\n### 6、重命名操作\n`mv test test1 把test文件的名字修改为test1`<br />`mv test1 /home/wechat/ 将test1文件 移动到/home/wechat 目录下`\n<a name=\"toc-heading-8\"></a>\n### 7、删除操作\n`rm file 删除file文件(存在子文件时不可删除)`<br />`rm -r /file 删除file文件下的所有目录文件`<br />`rm -rf ./* 删库跑路专用命令`\n<a name=\"toc-heading-9\"></a>\n### 8、复制\n`cp file /home 复制file命令至home目录下`<br />`cp -r test /home/wechat 复制test文件夹和其所有子文件 至 /home/wechat目录下`<br />`cp -r test /home/wechat/test2 复制test文件夹和其所有子文件 至 /home/wechat目录下并重命名为test2`\n<a name=\"toc-heading-10\"></a>\n### 9、压缩、解压\n解压tar<br />`tar xvf test.tar`<br />压缩tar<br />`tar cvf test1.tar name 将name文件夹压缩为test1.tar`<br />解压tar.gz<br />`tar zxvf test.tar.gz`<br />压缩<br />`tar zxvf test.tar.gz name`\n<a name=\"toc-heading-11\"></a>\n## 查找 && 日志\n<a name=\"toc-heading-12\"></a>\n### 1、cat、more、less命令\n`cat test.log 查看test.log 的文件内容`<br />`cat -n test.log 查看test.log的文件内容并显示行号`<br />more、less和cat作用基本相同，只不过more可以按页码来查看。 都是按q退出查看使用命令时，空格键翻页(显示下一屏内容)<br />回车：显示下一行内容\n<a name=\"toc-heading-13\"></a>\n### 2、find命令\n```bash\n.代表当前目录\nfind . -name '*.txt'          查找当前目录及其子目录下扩展名为txt的文件\nfind . -mtime -2             列出两天内修改过的文件\nfind . -atime -3             列出三天内被存取的文件\nfind . -mmin +30             半个小时内被修改过的文件\nfind . -amin +40              四十分钟内被存取过的文件\nfind . -size +1M              查找当前目录超过1M的文件\nfind .  -size -1M              查找当前目录小于1M的文件\nfind .  -size   +512k          超过512k的文件\nfind . -empty                  查找当前目录为空的文件或者文件夹\n```\n<a name=\"toc-heading-14\"></a>\n### 3、whereis命令\n`whereis name/ 搜索name文件的路径`\n<a name=\"toc-heading-15\"></a>\n### 4、grep命令\n`ps -ef|grep nginx 查看nginx的进程`<br />`ps -ef|grep nginx -c 查看nginx的进程个数`<br />`cat test.log | grep ^a 查找test.log 中以o开头的内容`<br />`cat test.log | grep $k 查找test.log中以K结尾的内容`<br />`cat test.log | grep 'bd4f63cc918611e8a14f7c04d0d7fdcc' --color 在test.log中搜索bd4f63cc918611e8a14f7c04d0d7fdcc并高亮，等同于 grep 'bd4f63cc918611e8a14f7c04d0d7fdcc' test.log --color`<br />`grep -n 'abc' test.log 搜索结果显示行数`<br />`grep 'abc' test1.log test2.log 从多个文件中查找abc`\n<a name=\"toc-heading-16\"></a>\n### 5、tail命令\n`tail -f xxx.log 查看xxx.log 默认显示最后10行`<br />`tail -f 100 xx.log /tail -100f xx.log 查看100行`\n<a name=\"toc-heading-17\"></a>\n### 6、vim命令\n`vim`<br />`vim file 查看文本`<br />`vim file1 file2 ... 查看多个文本`<br />正常模式/vim模式 通过**ESC**进行切换<br />vim模式下\n```bash\ni：在当前位置插入\ndd： 删除光标所在行\nD:删除光标所在行\n2dd: 删除光标之后的2行\nG：切换光标至末尾\nw! 强制写入\nwq 保存并退出\nq！ 强制退出 不保存\n/abc  在文本中查找abc\nset nu 显示文本行数\n移动光标 k(上)、j(下)、h(左)、l(右)\nyy 复制光标所在行\np粘贴复制的\no:另起一行\n```\n<a name=\"toc-heading-18\"></a>\n## 其他常用操作\n<a name=\"toc-heading-19\"></a>\n### 1、查看用户信息\n`w`<br />`who`\n<a name=\"toc-heading-20\"></a>\n### 2、修改文件权限\n`chmod 777 file1 每个人都可以对file文件进行读写和执行的权限`<br />`chmod 666 file1 每个人都可以对file文件进行读写操作`\n<a name=\"toc-heading-21\"></a>\n### 3、系统级别\n`top 实时显示系统资源使用情况`<br />`dh -h 查看当前那磁盘使用情况`<br />`du -sh /usr 计算usr文件大小`<br />`netstat –a 列出 tcp, udp 和 unix 协议下所有套接字的所有连接`<br />`kill 端口号 终止该端口`<br />`kill -9 端口 立即强制终止端口`<br />`rz lz 上传 和下载文件`\n> 参考文献：\n\n1. [前后端同学必会的Linux基础命令](https://zhuanlan.zhihu.com/p/51796190)\n","slug":"前后端同学必会的Linux基础命令","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmn3001duwvf9u8gf27q","content":"<p><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><p><a name=\"toc-heading-2\"></a></p>\n<h3 id=\"1、进入目录\"><a href=\"#1、进入目录\" class=\"headerlink\" title=\"1、进入目录\"></a>1、进入目录</h3><p><code>cd 目录名</code><br><a name=\"toc-heading-3\"></a></p>\n<h3 id=\"2、显示当前路径\"><a href=\"#2、显示当前路径\" class=\"headerlink\" title=\"2、显示当前路径\"></a>2、显示当前路径</h3><p><code>pwd</code><br><a name=\"toc-heading-4\"></a></p>\n<h3 id=\"3、显示路径下的文件\"><a href=\"#3、显示路径下的文件\" class=\"headerlink\" title=\"3、显示路径下的文件\"></a>3、显示路径下的文件</h3><p><code>ls</code><br /><code>ls -a 显示隐藏文件。隐藏文件以 . 开头命名</code><br><a name=\"toc-heading-5\"></a></p>\n<h3 id=\"4、查看创建文本\"><a href=\"#4、查看创建文本\" class=\"headerlink\" title=\"4、查看创建文本\"></a>4、查看创建文本</h3><p><code>touch abc.txt 查看abc.txt 如果不存在则自动创建</code><br><a name=\"toc-heading-6\"></a></p>\n<h3 id=\"5、创建文件夹\"><a href=\"#5、创建文件夹\" class=\"headerlink\" title=\"5、创建文件夹\"></a>5、创建文件夹</h3><p><code>mkdir 文件名 当前目录创建一个文件夹</code><br /><code>mkdir -p name1/name2 当期目录递归创建name1/name2文件，如 提示 mkdir: xxx: Permission denied，则需要admin账号 sudo -i 输入密码 即可</code><br><a name=\"toc-heading-7\"></a></p>\n<h3 id=\"6、重命名操作\"><a href=\"#6、重命名操作\" class=\"headerlink\" title=\"6、重命名操作\"></a>6、重命名操作</h3><p><code>mv test test1 把test文件的名字修改为test1</code><br /><code>mv test1 /home/wechat/ 将test1文件 移动到/home/wechat 目录下</code><br><a name=\"toc-heading-8\"></a></p>\n<h3 id=\"7、删除操作\"><a href=\"#7、删除操作\" class=\"headerlink\" title=\"7、删除操作\"></a>7、删除操作</h3><p><code>rm file 删除file文件(存在子文件时不可删除)</code><br /><code>rm -r /file 删除file文件下的所有目录文件</code><br /><code>rm -rf ./* 删库跑路专用命令</code><br><a name=\"toc-heading-9\"></a></p>\n<h3 id=\"8、复制\"><a href=\"#8、复制\" class=\"headerlink\" title=\"8、复制\"></a>8、复制</h3><p><code>cp file /home 复制file命令至home目录下</code><br /><code>cp -r test /home/wechat 复制test文件夹和其所有子文件 至 /home/wechat目录下</code><br /><code>cp -r test /home/wechat/test2 复制test文件夹和其所有子文件 至 /home/wechat目录下并重命名为test2</code><br><a name=\"toc-heading-10\"></a></p>\n<h3 id=\"9、压缩、解压\"><a href=\"#9、压缩、解压\" class=\"headerlink\" title=\"9、压缩、解压\"></a>9、压缩、解压</h3><p>解压tar<br /><code>tar xvf test.tar</code><br />压缩tar<br /><code>tar cvf test1.tar name 将name文件夹压缩为test1.tar</code><br />解压tar.gz<br /><code>tar zxvf test.tar.gz</code><br />压缩<br /><code>tar zxvf test.tar.gz name</code><br><a name=\"toc-heading-11\"></a></p>\n<h2 id=\"查找-amp-amp-日志\"><a href=\"#查找-amp-amp-日志\" class=\"headerlink\" title=\"查找 &amp;&amp; 日志\"></a>查找 &amp;&amp; 日志</h2><p><a name=\"toc-heading-12\"></a></p>\n<h3 id=\"1、cat、more、less命令\"><a href=\"#1、cat、more、less命令\" class=\"headerlink\" title=\"1、cat、more、less命令\"></a>1、cat、more、less命令</h3><p><code>cat test.log 查看test.log 的文件内容</code><br /><code>cat -n test.log 查看test.log的文件内容并显示行号</code><br />more、less和cat作用基本相同，只不过more可以按页码来查看。 都是按q退出查看使用命令时，空格键翻页(显示下一屏内容)<br />回车：显示下一行内容<br><a name=\"toc-heading-13\"></a></p>\n<h3 id=\"2、find命令\"><a href=\"#2、find命令\" class=\"headerlink\" title=\"2、find命令\"></a>2、find命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.代表当前目录</span><br><span class=\"line\">find . -name <span class=\"string\">&#x27;*.txt&#x27;</span>          查找当前目录及其子目录下扩展名为txt的文件</span><br><span class=\"line\">find . -mtime -2             列出两天内修改过的文件</span><br><span class=\"line\">find . -atime -3             列出三天内被存取的文件</span><br><span class=\"line\">find . -mmin +30             半个小时内被修改过的文件</span><br><span class=\"line\">find . -amin +40              四十分钟内被存取过的文件</span><br><span class=\"line\">find . -size +1M              查找当前目录超过1M的文件</span><br><span class=\"line\">find .  -size -1M              查找当前目录小于1M的文件</span><br><span class=\"line\">find .  -size   +512k          超过512k的文件</span><br><span class=\"line\">find . -empty                  查找当前目录为空的文件或者文件夹</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-14\"></a></p>\n<h3 id=\"3、whereis命令\"><a href=\"#3、whereis命令\" class=\"headerlink\" title=\"3、whereis命令\"></a>3、whereis命令</h3><p><code>whereis name/ 搜索name文件的路径</code><br><a name=\"toc-heading-15\"></a></p>\n<h3 id=\"4、grep命令\"><a href=\"#4、grep命令\" class=\"headerlink\" title=\"4、grep命令\"></a>4、grep命令</h3><p><code>ps -ef|grep nginx 查看nginx的进程</code><br /><code>ps -ef|grep nginx -c 查看nginx的进程个数</code><br /><code>cat test.log | grep ^a 查找test.log 中以o开头的内容</code><br /><code>cat test.log | grep $k 查找test.log中以K结尾的内容</code><br /><code>cat test.log | grep &#39;bd4f63cc918611e8a14f7c04d0d7fdcc&#39; --color 在test.log中搜索bd4f63cc918611e8a14f7c04d0d7fdcc并高亮，等同于 grep &#39;bd4f63cc918611e8a14f7c04d0d7fdcc&#39; test.log --color</code><br /><code>grep -n &#39;abc&#39; test.log 搜索结果显示行数</code><br /><code>grep &#39;abc&#39; test1.log test2.log 从多个文件中查找abc</code><br><a name=\"toc-heading-16\"></a></p>\n<h3 id=\"5、tail命令\"><a href=\"#5、tail命令\" class=\"headerlink\" title=\"5、tail命令\"></a>5、tail命令</h3><p><code>tail -f xxx.log 查看xxx.log 默认显示最后10行</code><br /><code>tail -f 100 xx.log /tail -100f xx.log 查看100行</code><br><a name=\"toc-heading-17\"></a></p>\n<h3 id=\"6、vim命令\"><a href=\"#6、vim命令\" class=\"headerlink\" title=\"6、vim命令\"></a>6、vim命令</h3><p><code>vim</code><br /><code>vim file 查看文本</code><br /><code>vim file1 file2 ... 查看多个文本</code><br />正常模式/vim模式 通过<strong>ESC</strong>进行切换<br />vim模式下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i：在当前位置插入</span><br><span class=\"line\">dd： 删除光标所在行</span><br><span class=\"line\">D:删除光标所在行</span><br><span class=\"line\">2dd: 删除光标之后的2行</span><br><span class=\"line\">G：切换光标至末尾</span><br><span class=\"line\">w! 强制写入</span><br><span class=\"line\">wq 保存并退出</span><br><span class=\"line\">q！ 强制退出 不保存</span><br><span class=\"line\">/abc  在文本中查找abc</span><br><span class=\"line\"><span class=\"built_in\">set</span> nu 显示文本行数</span><br><span class=\"line\">移动光标 k(上)、j(下)、h(左)、l(右)</span><br><span class=\"line\">yy 复制光标所在行</span><br><span class=\"line\">p粘贴复制的</span><br><span class=\"line\">o:另起一行</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-18\"></a></p>\n<h2 id=\"其他常用操作\"><a href=\"#其他常用操作\" class=\"headerlink\" title=\"其他常用操作\"></a>其他常用操作</h2><p><a name=\"toc-heading-19\"></a></p>\n<h3 id=\"1、查看用户信息\"><a href=\"#1、查看用户信息\" class=\"headerlink\" title=\"1、查看用户信息\"></a>1、查看用户信息</h3><p><code>w</code><br /><code>who</code><br><a name=\"toc-heading-20\"></a></p>\n<h3 id=\"2、修改文件权限\"><a href=\"#2、修改文件权限\" class=\"headerlink\" title=\"2、修改文件权限\"></a>2、修改文件权限</h3><p><code>chmod 777 file1 每个人都可以对file文件进行读写和执行的权限</code><br /><code>chmod 666 file1 每个人都可以对file文件进行读写操作</code><br><a name=\"toc-heading-21\"></a></p>\n<h3 id=\"3、系统级别\"><a href=\"#3、系统级别\" class=\"headerlink\" title=\"3、系统级别\"></a>3、系统级别</h3><p><code>top 实时显示系统资源使用情况</code><br /><code>dh -h 查看当前那磁盘使用情况</code><br /><code>du -sh /usr 计算usr文件大小</code><br /><code>netstat –a 列出 tcp, udp 和 unix 协议下所有套接字的所有连接</code><br /><code>kill 端口号 终止该端口</code><br /><code>kill -9 端口 立即强制终止端口</code><br /><code>rz lz 上传 和下载文件</code></p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/51796190\" >前后端同学必会的Linux基础命令<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><p><a name=\"toc-heading-2\"></a></p>\n<h3 id=\"1、进入目录\"><a href=\"#1、进入目录\" class=\"headerlink\" title=\"1、进入目录\"></a>1、进入目录</h3><p><code>cd 目录名</code><br><a name=\"toc-heading-3\"></a></p>\n<h3 id=\"2、显示当前路径\"><a href=\"#2、显示当前路径\" class=\"headerlink\" title=\"2、显示当前路径\"></a>2、显示当前路径</h3><p><code>pwd</code><br><a name=\"toc-heading-4\"></a></p>\n<h3 id=\"3、显示路径下的文件\"><a href=\"#3、显示路径下的文件\" class=\"headerlink\" title=\"3、显示路径下的文件\"></a>3、显示路径下的文件</h3><p><code>ls</code><br /><code>ls -a 显示隐藏文件。隐藏文件以 . 开头命名</code><br><a name=\"toc-heading-5\"></a></p>\n<h3 id=\"4、查看创建文本\"><a href=\"#4、查看创建文本\" class=\"headerlink\" title=\"4、查看创建文本\"></a>4、查看创建文本</h3><p><code>touch abc.txt 查看abc.txt 如果不存在则自动创建</code><br><a name=\"toc-heading-6\"></a></p>\n<h3 id=\"5、创建文件夹\"><a href=\"#5、创建文件夹\" class=\"headerlink\" title=\"5、创建文件夹\"></a>5、创建文件夹</h3><p><code>mkdir 文件名 当前目录创建一个文件夹</code><br /><code>mkdir -p name1/name2 当期目录递归创建name1/name2文件，如 提示 mkdir: xxx: Permission denied，则需要admin账号 sudo -i 输入密码 即可</code><br><a name=\"toc-heading-7\"></a></p>\n<h3 id=\"6、重命名操作\"><a href=\"#6、重命名操作\" class=\"headerlink\" title=\"6、重命名操作\"></a>6、重命名操作</h3><p><code>mv test test1 把test文件的名字修改为test1</code><br /><code>mv test1 /home/wechat/ 将test1文件 移动到/home/wechat 目录下</code><br><a name=\"toc-heading-8\"></a></p>\n<h3 id=\"7、删除操作\"><a href=\"#7、删除操作\" class=\"headerlink\" title=\"7、删除操作\"></a>7、删除操作</h3><p><code>rm file 删除file文件(存在子文件时不可删除)</code><br /><code>rm -r /file 删除file文件下的所有目录文件</code><br /><code>rm -rf ./* 删库跑路专用命令</code><br><a name=\"toc-heading-9\"></a></p>\n<h3 id=\"8、复制\"><a href=\"#8、复制\" class=\"headerlink\" title=\"8、复制\"></a>8、复制</h3><p><code>cp file /home 复制file命令至home目录下</code><br /><code>cp -r test /home/wechat 复制test文件夹和其所有子文件 至 /home/wechat目录下</code><br /><code>cp -r test /home/wechat/test2 复制test文件夹和其所有子文件 至 /home/wechat目录下并重命名为test2</code><br><a name=\"toc-heading-10\"></a></p>\n<h3 id=\"9、压缩、解压\"><a href=\"#9、压缩、解压\" class=\"headerlink\" title=\"9、压缩、解压\"></a>9、压缩、解压</h3><p>解压tar<br /><code>tar xvf test.tar</code><br />压缩tar<br /><code>tar cvf test1.tar name 将name文件夹压缩为test1.tar</code><br />解压tar.gz<br /><code>tar zxvf test.tar.gz</code><br />压缩<br /><code>tar zxvf test.tar.gz name</code><br><a name=\"toc-heading-11\"></a></p>\n<h2 id=\"查找-amp-amp-日志\"><a href=\"#查找-amp-amp-日志\" class=\"headerlink\" title=\"查找 &amp;&amp; 日志\"></a>查找 &amp;&amp; 日志</h2><p><a name=\"toc-heading-12\"></a></p>\n<h3 id=\"1、cat、more、less命令\"><a href=\"#1、cat、more、less命令\" class=\"headerlink\" title=\"1、cat、more、less命令\"></a>1、cat、more、less命令</h3><p><code>cat test.log 查看test.log 的文件内容</code><br /><code>cat -n test.log 查看test.log的文件内容并显示行号</code><br />more、less和cat作用基本相同，只不过more可以按页码来查看。 都是按q退出查看使用命令时，空格键翻页(显示下一屏内容)<br />回车：显示下一行内容<br><a name=\"toc-heading-13\"></a></p>\n<h3 id=\"2、find命令\"><a href=\"#2、find命令\" class=\"headerlink\" title=\"2、find命令\"></a>2、find命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.代表当前目录</span><br><span class=\"line\">find . -name <span class=\"string\">&#x27;*.txt&#x27;</span>          查找当前目录及其子目录下扩展名为txt的文件</span><br><span class=\"line\">find . -mtime -2             列出两天内修改过的文件</span><br><span class=\"line\">find . -atime -3             列出三天内被存取的文件</span><br><span class=\"line\">find . -mmin +30             半个小时内被修改过的文件</span><br><span class=\"line\">find . -amin +40              四十分钟内被存取过的文件</span><br><span class=\"line\">find . -size +1M              查找当前目录超过1M的文件</span><br><span class=\"line\">find .  -size -1M              查找当前目录小于1M的文件</span><br><span class=\"line\">find .  -size   +512k          超过512k的文件</span><br><span class=\"line\">find . -empty                  查找当前目录为空的文件或者文件夹</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-14\"></a></p>\n<h3 id=\"3、whereis命令\"><a href=\"#3、whereis命令\" class=\"headerlink\" title=\"3、whereis命令\"></a>3、whereis命令</h3><p><code>whereis name/ 搜索name文件的路径</code><br><a name=\"toc-heading-15\"></a></p>\n<h3 id=\"4、grep命令\"><a href=\"#4、grep命令\" class=\"headerlink\" title=\"4、grep命令\"></a>4、grep命令</h3><p><code>ps -ef|grep nginx 查看nginx的进程</code><br /><code>ps -ef|grep nginx -c 查看nginx的进程个数</code><br /><code>cat test.log | grep ^a 查找test.log 中以o开头的内容</code><br /><code>cat test.log | grep $k 查找test.log中以K结尾的内容</code><br /><code>cat test.log | grep &#39;bd4f63cc918611e8a14f7c04d0d7fdcc&#39; --color 在test.log中搜索bd4f63cc918611e8a14f7c04d0d7fdcc并高亮，等同于 grep &#39;bd4f63cc918611e8a14f7c04d0d7fdcc&#39; test.log --color</code><br /><code>grep -n &#39;abc&#39; test.log 搜索结果显示行数</code><br /><code>grep &#39;abc&#39; test1.log test2.log 从多个文件中查找abc</code><br><a name=\"toc-heading-16\"></a></p>\n<h3 id=\"5、tail命令\"><a href=\"#5、tail命令\" class=\"headerlink\" title=\"5、tail命令\"></a>5、tail命令</h3><p><code>tail -f xxx.log 查看xxx.log 默认显示最后10行</code><br /><code>tail -f 100 xx.log /tail -100f xx.log 查看100行</code><br><a name=\"toc-heading-17\"></a></p>\n<h3 id=\"6、vim命令\"><a href=\"#6、vim命令\" class=\"headerlink\" title=\"6、vim命令\"></a>6、vim命令</h3><p><code>vim</code><br /><code>vim file 查看文本</code><br /><code>vim file1 file2 ... 查看多个文本</code><br />正常模式/vim模式 通过<strong>ESC</strong>进行切换<br />vim模式下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i：在当前位置插入</span><br><span class=\"line\">dd： 删除光标所在行</span><br><span class=\"line\">D:删除光标所在行</span><br><span class=\"line\">2dd: 删除光标之后的2行</span><br><span class=\"line\">G：切换光标至末尾</span><br><span class=\"line\">w! 强制写入</span><br><span class=\"line\">wq 保存并退出</span><br><span class=\"line\">q！ 强制退出 不保存</span><br><span class=\"line\">/abc  在文本中查找abc</span><br><span class=\"line\"><span class=\"built_in\">set</span> nu 显示文本行数</span><br><span class=\"line\">移动光标 k(上)、j(下)、h(左)、l(右)</span><br><span class=\"line\">yy 复制光标所在行</span><br><span class=\"line\">p粘贴复制的</span><br><span class=\"line\">o:另起一行</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-18\"></a></p>\n<h2 id=\"其他常用操作\"><a href=\"#其他常用操作\" class=\"headerlink\" title=\"其他常用操作\"></a>其他常用操作</h2><p><a name=\"toc-heading-19\"></a></p>\n<h3 id=\"1、查看用户信息\"><a href=\"#1、查看用户信息\" class=\"headerlink\" title=\"1、查看用户信息\"></a>1、查看用户信息</h3><p><code>w</code><br /><code>who</code><br><a name=\"toc-heading-20\"></a></p>\n<h3 id=\"2、修改文件权限\"><a href=\"#2、修改文件权限\" class=\"headerlink\" title=\"2、修改文件权限\"></a>2、修改文件权限</h3><p><code>chmod 777 file1 每个人都可以对file文件进行读写和执行的权限</code><br /><code>chmod 666 file1 每个人都可以对file文件进行读写操作</code><br><a name=\"toc-heading-21\"></a></p>\n<h3 id=\"3、系统级别\"><a href=\"#3、系统级别\" class=\"headerlink\" title=\"3、系统级别\"></a>3、系统级别</h3><p><code>top 实时显示系统资源使用情况</code><br /><code>dh -h 查看当前那磁盘使用情况</code><br /><code>du -sh /usr 计算usr文件大小</code><br /><code>netstat –a 列出 tcp, udp 和 unix 协议下所有套接字的所有连接</code><br /><code>kill 端口号 终止该端口</code><br /><code>kill -9 端口 立即强制终止端口</code><br /><code>rz lz 上传 和下载文件</code></p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/51796190\" >前后端同学必会的Linux基础命令<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"只需3行代码15秒就能抠图的Python神库","date":"2022-01-25T09:54:26.000Z","_content":"\n_这是一款网站：_[_Remove.bg_](https://www.remove.bg/)<br />_可以通过调用网站提供的API进行抠图，每月可以免费抠图50张。唯一缺点就是分辨率限制。_\n<a name=\"toc-heading-1\"></a>\n\n## 实现步骤\n**第一步：**<br />[网站上注册获取 API](https://www.remove.bg/api)<br />**第二步：**<br />安装抠图库<br />`pip install removebg`<br />**实现抠图**\n```python\nfrom removebg import RemoveBg\nrmbg = RemoveBg(\"WPZ2Q4fraseKfAN9PPxxxxxx\", \"error.log\") # 引号内是你获取的API\nrmbg.remove_background_from_img_file(\"C:/Users/sony/Desktop/1.jpg\") #图片地址\n```\n<a name=\"toc-heading-2\"></a>\n## 批量抠图\n```python\nfrom removebg import RemoveBg\nimport os\nrmbg = RemoveBg(\"WPZ2Q4fraseKfAN9PPxxxxxx\", \"error.log\")\npath = '%s/picture'%os.getcwd() #图片放到程序的同级文件夹 picture 里面\nfor pic in os.listdir(path):\n    rmbg.remove_background_from_img_file(\"%s\\%s\"%(path,pic))\n```\nGitHub 库地址：[https://github.com/brilam/remove-bg](https://github.com/brilam/remove-bg)\n> 参考文献\n\n1. [只需 3 行代码 5 秒就能抠图的 Python 神库](https://zhuanlan.zhihu.com/p/73073456)\n1. [python利用Remove.bg接口自动去背景](https://blog.csdn.net/Quentin_he/article/details/97569625)\n1. [Remove.bg](https://www.remove.bg/)\n","source":"_posts/只需3行代码15秒就能抠图的Python神库.md","raw":"---\ntitle: 只需3行代码15秒就能抠图的Python神库\ndate: 2022-01-25 17:54:26\ntags:\n- Python\ncategories:\n- 编程笔记\n- \tPython\n---\n\n_这是一款网站：_[_Remove.bg_](https://www.remove.bg/)<br />_可以通过调用网站提供的API进行抠图，每月可以免费抠图50张。唯一缺点就是分辨率限制。_\n<a name=\"toc-heading-1\"></a>\n\n## 实现步骤\n**第一步：**<br />[网站上注册获取 API](https://www.remove.bg/api)<br />**第二步：**<br />安装抠图库<br />`pip install removebg`<br />**实现抠图**\n```python\nfrom removebg import RemoveBg\nrmbg = RemoveBg(\"WPZ2Q4fraseKfAN9PPxxxxxx\", \"error.log\") # 引号内是你获取的API\nrmbg.remove_background_from_img_file(\"C:/Users/sony/Desktop/1.jpg\") #图片地址\n```\n<a name=\"toc-heading-2\"></a>\n## 批量抠图\n```python\nfrom removebg import RemoveBg\nimport os\nrmbg = RemoveBg(\"WPZ2Q4fraseKfAN9PPxxxxxx\", \"error.log\")\npath = '%s/picture'%os.getcwd() #图片放到程序的同级文件夹 picture 里面\nfor pic in os.listdir(path):\n    rmbg.remove_background_from_img_file(\"%s\\%s\"%(path,pic))\n```\nGitHub 库地址：[https://github.com/brilam/remove-bg](https://github.com/brilam/remove-bg)\n> 参考文献\n\n1. [只需 3 行代码 5 秒就能抠图的 Python 神库](https://zhuanlan.zhihu.com/p/73073456)\n1. [python利用Remove.bg接口自动去背景](https://blog.csdn.net/Quentin_he/article/details/97569625)\n1. [Remove.bg](https://www.remove.bg/)\n","slug":"只需3行代码15秒就能抠图的Python神库","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmn5001huwvfgyrjals4","content":"<p><em>这是一款网站：</em><a href=\"https://www.remove.bg/\"><em>Remove.bg</em></a><br /><em>可以通过调用网站提供的API进行抠图，每月可以免费抠图50张。唯一缺点就是分辨率限制。</em><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p><strong>第一步：</strong><br /><a class=\"link\"   href=\"https://www.remove.bg/api\" >网站上注册获取 API<i class=\"fas fa-external-link-alt\"></i></a><br /><strong>第二步：</strong><br />安装抠图库<br /><code>pip install removebg</code><br /><strong>实现抠图</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> removebg <span class=\"keyword\">import</span> RemoveBg</span><br><span class=\"line\">rmbg = RemoveBg(<span class=\"string\">&quot;WPZ2Q4fraseKfAN9PPxxxxxx&quot;</span>, <span class=\"string\">&quot;error.log&quot;</span>) <span class=\"comment\"># 引号内是你获取的API</span></span><br><span class=\"line\">rmbg.remove_background_from_img_file(<span class=\"string\">&quot;C:/Users/sony/Desktop/1.jpg&quot;</span>) <span class=\"comment\">#图片地址</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"批量抠图\"><a href=\"#批量抠图\" class=\"headerlink\" title=\"批量抠图\"></a>批量抠图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> removebg <span class=\"keyword\">import</span> RemoveBg</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">rmbg = RemoveBg(<span class=\"string\">&quot;WPZ2Q4fraseKfAN9PPxxxxxx&quot;</span>, <span class=\"string\">&quot;error.log&quot;</span>)</span><br><span class=\"line\">path = <span class=\"string\">&#x27;%s/picture&#x27;</span>%os.getcwd() <span class=\"comment\">#图片放到程序的同级文件夹 picture 里面</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pic <span class=\"keyword\">in</span> os.listdir(path):</span><br><span class=\"line\">    rmbg.remove_background_from_img_file(<span class=\"string\">&quot;%s\\%s&quot;</span>%(path,pic))</span><br></pre></td></tr></table></figure>\n<p>GitHub 库地址：<a class=\"link\"   href=\"https://github.com/brilam/remove-bg\" >https://github.com/brilam/remove-bg<i class=\"fas fa-external-link-alt\"></i></a></p>\n<blockquote>\n<p>参考文献</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/73073456\" >只需 3 行代码 5 秒就能抠图的 Python 神库<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/Quentin_he/article/details/97569625\" >python利用Remove.bg接口自动去背景<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.remove.bg/\" >Remove.bg<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><em>这是一款网站：</em><a href=\"https://www.remove.bg/\"><em>Remove.bg</em></a><br /><em>可以通过调用网站提供的API进行抠图，每月可以免费抠图50张。唯一缺点就是分辨率限制。</em><br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p><strong>第一步：</strong><br /><a class=\"link\"   href=\"https://www.remove.bg/api\" >网站上注册获取 API<i class=\"fas fa-external-link-alt\"></i></a><br /><strong>第二步：</strong><br />安装抠图库<br /><code>pip install removebg</code><br /><strong>实现抠图</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> removebg <span class=\"keyword\">import</span> RemoveBg</span><br><span class=\"line\">rmbg = RemoveBg(<span class=\"string\">&quot;WPZ2Q4fraseKfAN9PPxxxxxx&quot;</span>, <span class=\"string\">&quot;error.log&quot;</span>) <span class=\"comment\"># 引号内是你获取的API</span></span><br><span class=\"line\">rmbg.remove_background_from_img_file(<span class=\"string\">&quot;C:/Users/sony/Desktop/1.jpg&quot;</span>) <span class=\"comment\">#图片地址</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"批量抠图\"><a href=\"#批量抠图\" class=\"headerlink\" title=\"批量抠图\"></a>批量抠图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> removebg <span class=\"keyword\">import</span> RemoveBg</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">rmbg = RemoveBg(<span class=\"string\">&quot;WPZ2Q4fraseKfAN9PPxxxxxx&quot;</span>, <span class=\"string\">&quot;error.log&quot;</span>)</span><br><span class=\"line\">path = <span class=\"string\">&#x27;%s/picture&#x27;</span>%os.getcwd() <span class=\"comment\">#图片放到程序的同级文件夹 picture 里面</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pic <span class=\"keyword\">in</span> os.listdir(path):</span><br><span class=\"line\">    rmbg.remove_background_from_img_file(<span class=\"string\">&quot;%s\\%s&quot;</span>%(path,pic))</span><br></pre></td></tr></table></figure>\n<p>GitHub 库地址：<a class=\"link\"   href=\"https://github.com/brilam/remove-bg\" >https://github.com/brilam/remove-bg<i class=\"fas fa-external-link-alt\"></i></a></p>\n<blockquote>\n<p>参考文献</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/73073456\" >只需 3 行代码 5 秒就能抠图的 Python 神库<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/Quentin_he/article/details/97569625\" >python利用Remove.bg接口自动去背景<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.remove.bg/\" >Remove.bg<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"宝塔面板安装Cloudreve——自建不限容量的在线网盘","date":"2022-01-19T06:32:13.000Z","_content":"Github：https://github.com/cloudreve/Cloudreve\n\n> 官方文档：https://docs.cloudreve.org/\n>\n> **部署环境：CentOS 7.6/Nginx -Tengine2.2.4/MySQL 5.7.30**\n\n## 安装\n\n1.Releases下载程序到本地：\n\n```bash\nwget https://github.com/cloudreve/Cloudreve/releases/download/3.1.1/cloudreve_3.1.1_linux_amd64.tar.gz\n```\n\n在 /home 目录新建一个程序文件夹，方便日后文件管理：\n\n```bash\nmkdir /home/cloudreve\n```\n\n将下载的程序解压到 /home/cloudreve 目录\n\n```bash\ntar -C /home/cloudreve -xzf cloudreve_3.1.1_linux_amd64.tar.gz\n```\n\n进入程序目录赋予执行权限，并启动\n\n```bash\n# 进入程序目录\ncd /home/cloudreve\n# 赋予执行权限\nchmod +x ./cloudreve\n# 启动 Cloudreve\n./cloudreve\n```\n\n不出意外的话会跳出程序初始化界面，记得保存账号密码。\n\n![image](https://vip2.loli.io/2022/01/27/8ISaRh5cDn7LtNY.jpg)\n\n放行 5212 端口（我是宝塔，后台添加放行端口即可 )。访问 http://ip:5212 看看程序是否正常开启，同时 Shell 也会跑出记录。\n![image](https://vip2.loli.io/2022/01/27/P1oWftS8Uv2u7dD.jpg)\n![image](https://vip2.loli.io/2022/01/27/vHADRozQXK8ShP4.jpg)\n\n\n确认无误后，Shell 面板 Ctrl+ C 结束程序运行, 配置 Systemd 进程守  \n\n```\nvim /usr/lib/systemd/system/cloudreve.service\n```\n\n根据实际情况填写以下内容并保存：\n\n```bash\n[Unit]\nDescription=Cloudreve\nDocumentation=https://docs.cloudreve.org\nAfter=network.target\nWants=network.target\n[Service]\nWorkingDirectory=/home/cloudreve\nExecStart=/home/cloudreve/cloudreve\nRestart=on-abnormal\nRestartSec=5s\nKillMode=mixed\nStandardOutput=null\nStandardError=syslog\n[Install]\nWantedBy=multi-user.target\n```\n\n其中以下配置项需要根据实际情况更改：\n\n- **WorkingDirectory** 主程序所在目录\n\n- 设置开机启动\n\n  ```bash\n  systemctl enable cloudreve\n  ```\n\n  \n\n日后你可以通过以下指令管理 Cloudreve 进程：\n\n```bash\n# 启动服务\nsystemctl start cloudreve\n# 停止服务 \nsystemctl stop cloudreve\n# 重启服务 \nsystemctl restart cloudreve\n# 查看状态 \nsystemctl status cloudreve\n```\n\n最后 Nginx 反代一波，宝塔添加一个站点，解析好域名, 站点修改添加反向代理:\n\n![image](https://vip2.loli.io/2022/01/27/8ISaRh5cDn7LtNY.jpg)\n\n添加完反代后便可以通过自己的域名访问了，程序的部署到这里也算基本完成了。\n\n## 补充\n\n接下来进行一些小调整，Cloudreve 默认数据库内置的 SQLite，个人还是喜欢 Mysql。\n\nTips: 更换数据库配置后，Cloudreve 会重新初始化数据库，原有的数据将会丢失。\n\n宝塔创建一个数据库，然后编辑 Cloudreve 的配置文件：\n\n```bash\nvim /home/cloudreve/conf.ini\n```\n\n添加以下配置：\n\n```bash\n[Database]\n; 数据库类型，目前支持 sqlite | mysql\nType = mysql\n; 用户名\nUser = root\n; 密码\nPassword = root\n; 数据库地址\nHost = 127.0.0.1\n; 数据库名称\nName = v3\n; 数据表前缀\nTablePrefix = Cloudreve\n```\n\n保存后，进程序目录重新初始化，生成新的账号密码，之后再用 systemctl 管理，完事了\n\n```bash\n#进程序目录\ncd /home/cloudreve\n#启动程序\n./cloudreve\n```\n\n另外提一嘴，程序默认监听端口也是在该文件修改。\n\n## 更新\n\n**V3 版本内升级步骤较为简单，总体流程如下：**\n\n1. 备份数据库；\n\n2. 下载或构建最新版本的 Cloudreve；\n\n3. 停止正在运行的 Cloudreve；\n\n4. 将老版本的 Cloudreve 主程序替换为新版本；\n\n5. 启动 Cloudreve；\n\n6. 清空浏览器缓存。\n\n   > 如果你在老版本使用了自行构建的前端静态资源文件，请使用新版对应的前端仓库代码重新构建。\n\n## 对接OneDrive\n\n1、前往[Azure Active Directory 控制台 (国际版账号)](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview) 或者 [Azure Active Directory 控制台 (世纪互联账号)](https://portal.azure.cn/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview)并登录，登录后进入`Azure Active Directory`管理面板。\n\n2、进入左侧 `应用注册` 菜单，并点击 `新注册` 按钮。\n\n3、填写应用注册表单。其中，名称可任取；`受支持的帐户类型` 选择为`任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户`；`重定向 URI (可选)`请选择`Web`，并填写`https://drive.codebaby.com.cn/api/v3/callback/onedrive/auth`； 其他保持默认即可\n\n4、创建秘钥。\n\n5、复制秘钥和ID到OneDrive存储策略页面，并填写相关资料，授权登陆即可。\n\n\n\n## 最后\n\n**更多安装方式和程序配置添加详见官方文档** （作者文档也咕了不少：\n\n> https://docs.cloudreve.org/getting-started/config\n\n## 附一个自己搭建的网盘\n网址：https://drive.codebaby.com.cn/   \n欢迎大家注册使用，**不限容量！！！**文件用OneDrive存储。【暂停使用！！！】\n\n##  参考资料\n\nhttps://www.feiyubk.com/archives/8.html\n","source":"_posts/宝塔面板安装Cloudreve——自建不限容量的在线网盘.md","raw":"---\ntitle: 宝塔面板安装Cloudreve——自建不限容量的在线网盘\ndate: 2022-01-19 14:32:13\ntags:\n- 宝塔\n- clouddreve\n- 网盘\ncategories:\n- 网站建设\n---\nGithub：https://github.com/cloudreve/Cloudreve\n\n> 官方文档：https://docs.cloudreve.org/\n>\n> **部署环境：CentOS 7.6/Nginx -Tengine2.2.4/MySQL 5.7.30**\n\n## 安装\n\n1.Releases下载程序到本地：\n\n```bash\nwget https://github.com/cloudreve/Cloudreve/releases/download/3.1.1/cloudreve_3.1.1_linux_amd64.tar.gz\n```\n\n在 /home 目录新建一个程序文件夹，方便日后文件管理：\n\n```bash\nmkdir /home/cloudreve\n```\n\n将下载的程序解压到 /home/cloudreve 目录\n\n```bash\ntar -C /home/cloudreve -xzf cloudreve_3.1.1_linux_amd64.tar.gz\n```\n\n进入程序目录赋予执行权限，并启动\n\n```bash\n# 进入程序目录\ncd /home/cloudreve\n# 赋予执行权限\nchmod +x ./cloudreve\n# 启动 Cloudreve\n./cloudreve\n```\n\n不出意外的话会跳出程序初始化界面，记得保存账号密码。\n\n![image](https://vip2.loli.io/2022/01/27/8ISaRh5cDn7LtNY.jpg)\n\n放行 5212 端口（我是宝塔，后台添加放行端口即可 )。访问 http://ip:5212 看看程序是否正常开启，同时 Shell 也会跑出记录。\n![image](https://vip2.loli.io/2022/01/27/P1oWftS8Uv2u7dD.jpg)\n![image](https://vip2.loli.io/2022/01/27/vHADRozQXK8ShP4.jpg)\n\n\n确认无误后，Shell 面板 Ctrl+ C 结束程序运行, 配置 Systemd 进程守  \n\n```\nvim /usr/lib/systemd/system/cloudreve.service\n```\n\n根据实际情况填写以下内容并保存：\n\n```bash\n[Unit]\nDescription=Cloudreve\nDocumentation=https://docs.cloudreve.org\nAfter=network.target\nWants=network.target\n[Service]\nWorkingDirectory=/home/cloudreve\nExecStart=/home/cloudreve/cloudreve\nRestart=on-abnormal\nRestartSec=5s\nKillMode=mixed\nStandardOutput=null\nStandardError=syslog\n[Install]\nWantedBy=multi-user.target\n```\n\n其中以下配置项需要根据实际情况更改：\n\n- **WorkingDirectory** 主程序所在目录\n\n- 设置开机启动\n\n  ```bash\n  systemctl enable cloudreve\n  ```\n\n  \n\n日后你可以通过以下指令管理 Cloudreve 进程：\n\n```bash\n# 启动服务\nsystemctl start cloudreve\n# 停止服务 \nsystemctl stop cloudreve\n# 重启服务 \nsystemctl restart cloudreve\n# 查看状态 \nsystemctl status cloudreve\n```\n\n最后 Nginx 反代一波，宝塔添加一个站点，解析好域名, 站点修改添加反向代理:\n\n![image](https://vip2.loli.io/2022/01/27/8ISaRh5cDn7LtNY.jpg)\n\n添加完反代后便可以通过自己的域名访问了，程序的部署到这里也算基本完成了。\n\n## 补充\n\n接下来进行一些小调整，Cloudreve 默认数据库内置的 SQLite，个人还是喜欢 Mysql。\n\nTips: 更换数据库配置后，Cloudreve 会重新初始化数据库，原有的数据将会丢失。\n\n宝塔创建一个数据库，然后编辑 Cloudreve 的配置文件：\n\n```bash\nvim /home/cloudreve/conf.ini\n```\n\n添加以下配置：\n\n```bash\n[Database]\n; 数据库类型，目前支持 sqlite | mysql\nType = mysql\n; 用户名\nUser = root\n; 密码\nPassword = root\n; 数据库地址\nHost = 127.0.0.1\n; 数据库名称\nName = v3\n; 数据表前缀\nTablePrefix = Cloudreve\n```\n\n保存后，进程序目录重新初始化，生成新的账号密码，之后再用 systemctl 管理，完事了\n\n```bash\n#进程序目录\ncd /home/cloudreve\n#启动程序\n./cloudreve\n```\n\n另外提一嘴，程序默认监听端口也是在该文件修改。\n\n## 更新\n\n**V3 版本内升级步骤较为简单，总体流程如下：**\n\n1. 备份数据库；\n\n2. 下载或构建最新版本的 Cloudreve；\n\n3. 停止正在运行的 Cloudreve；\n\n4. 将老版本的 Cloudreve 主程序替换为新版本；\n\n5. 启动 Cloudreve；\n\n6. 清空浏览器缓存。\n\n   > 如果你在老版本使用了自行构建的前端静态资源文件，请使用新版对应的前端仓库代码重新构建。\n\n## 对接OneDrive\n\n1、前往[Azure Active Directory 控制台 (国际版账号)](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview) 或者 [Azure Active Directory 控制台 (世纪互联账号)](https://portal.azure.cn/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview)并登录，登录后进入`Azure Active Directory`管理面板。\n\n2、进入左侧 `应用注册` 菜单，并点击 `新注册` 按钮。\n\n3、填写应用注册表单。其中，名称可任取；`受支持的帐户类型` 选择为`任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户`；`重定向 URI (可选)`请选择`Web`，并填写`https://drive.codebaby.com.cn/api/v3/callback/onedrive/auth`； 其他保持默认即可\n\n4、创建秘钥。\n\n5、复制秘钥和ID到OneDrive存储策略页面，并填写相关资料，授权登陆即可。\n\n\n\n## 最后\n\n**更多安装方式和程序配置添加详见官方文档** （作者文档也咕了不少：\n\n> https://docs.cloudreve.org/getting-started/config\n\n## 附一个自己搭建的网盘\n网址：https://drive.codebaby.com.cn/   \n欢迎大家注册使用，**不限容量！！！**文件用OneDrive存储。【暂停使用！！！】\n\n##  参考资料\n\nhttps://www.feiyubk.com/archives/8.html\n","slug":"宝塔面板安装Cloudreve——自建不限容量的在线网盘","published":1,"updated":"2022-01-27T03:10:51.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmn7001luwvf4i4kdn8y","content":"<p>Github：<a class=\"link\"   href=\"https://github.com/cloudreve/Cloudreve\" >https://github.com/cloudreve/Cloudreve<i class=\"fas fa-external-link-alt\"></i></a></p>\n<blockquote>\n<p>官方文档：<a class=\"link\"   href=\"https://docs.cloudreve.org/\" >https://docs.cloudreve.org/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>部署环境：CentOS 7.6/Nginx -Tengine2.2.4/MySQL 5.7.30</strong></p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>1.Releases下载程序到本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/cloudreve/Cloudreve/releases/download/3.1.1/cloudreve_3.1.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>在 /home 目录新建一个程序文件夹，方便日后文件管理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>将下载的程序解压到 /home/cloudreve 目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C /home/cloudreve -xzf cloudreve_3.1.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>进入程序目录赋予执行权限，并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入程序目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 赋予执行权限</span></span><br><span class=\"line\">chmod +x ./cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 启动 Cloudreve</span></span><br><span class=\"line\">./cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>不出意外的话会跳出程序初始化界面，记得保存账号密码。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/8ISaRh5cDn7LtNY.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>放行 5212 端口（我是宝塔，后台添加放行端口即可 )。访问 <a class=\"link\"   href=\"http://ip:5212/\" >http://ip:5212<i class=\"fas fa-external-link-alt\"></i></a> 看看程序是否正常开启，同时 Shell 也会跑出记录。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/P1oWftS8Uv2u7dD.jpg\"\n                      alt=\"image\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/vHADRozQXK8ShP4.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>确认无误后，Shell 面板 Ctrl+ C 结束程序运行, 配置 Systemd 进程守  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/lib/systemd/system/cloudreve.service</span><br></pre></td></tr></table></figure>\n\n<p>根据实际情况填写以下内容并保存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Cloudreve</span><br><span class=\"line\">Documentation=https://docs.cloudreve.org</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">WorkingDirectory=/home/cloudreve</span><br><span class=\"line\">ExecStart=/home/cloudreve/cloudreve</span><br><span class=\"line\">Restart=on-abnormal</span><br><span class=\"line\">RestartSec=5s</span><br><span class=\"line\">KillMode=mixed</span><br><span class=\"line\">StandardOutput=null</span><br><span class=\"line\">StandardError=syslog</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>其中以下配置项需要根据实际情况更改：</p>\n<ul>\n<li><p><strong>WorkingDirectory</strong> 主程序所在目录</p>\n</li>\n<li><p>设置开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> cloudreve</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>日后你可以通过以下指令管理 Cloudreve 进程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 停止服务 </span></span><br><span class=\"line\">systemctl stop cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 重启服务 </span></span><br><span class=\"line\">systemctl restart cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 查看状态 </span></span><br><span class=\"line\">systemctl status cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>最后 Nginx 反代一波，宝塔添加一个站点，解析好域名, 站点修改添加反向代理:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/8ISaRh5cDn7LtNY.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>添加完反代后便可以通过自己的域名访问了，程序的部署到这里也算基本完成了。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>接下来进行一些小调整，Cloudreve 默认数据库内置的 SQLite，个人还是喜欢 Mysql。</p>\n<p>Tips: 更换数据库配置后，Cloudreve 会重新初始化数据库，原有的数据将会丢失。</p>\n<p>宝塔创建一个数据库，然后编辑 Cloudreve 的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /home/cloudreve/conf.ini</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Database]</span><br><span class=\"line\">; 数据库类型，目前支持 sqlite | mysql</span><br><span class=\"line\">Type = mysql</span><br><span class=\"line\">; 用户名</span><br><span class=\"line\">User = root</span><br><span class=\"line\">; 密码</span><br><span class=\"line\">Password = root</span><br><span class=\"line\">; 数据库地址</span><br><span class=\"line\">Host = 127.0.0.1</span><br><span class=\"line\">; 数据库名称</span><br><span class=\"line\">Name = v3</span><br><span class=\"line\">; 数据表前缀</span><br><span class=\"line\">TablePrefix = Cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>保存后，进程序目录重新初始化，生成新的账号密码，之后再用 systemctl 管理，完事了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进程序目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/cloudreve</span><br><span class=\"line\"><span class=\"comment\">#启动程序</span></span><br><span class=\"line\">./cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>另外提一嘴，程序默认监听端口也是在该文件修改。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p><strong>V3 版本内升级步骤较为简单，总体流程如下：</strong></p>\n<ol>\n<li><p>备份数据库；</p>\n</li>\n<li><p>下载或构建最新版本的 Cloudreve；</p>\n</li>\n<li><p>停止正在运行的 Cloudreve；</p>\n</li>\n<li><p>将老版本的 Cloudreve 主程序替换为新版本；</p>\n</li>\n<li><p>启动 Cloudreve；</p>\n</li>\n<li><p>清空浏览器缓存。</p>\n<blockquote>\n<p>如果你在老版本使用了自行构建的前端静态资源文件，请使用新版对应的前端仓库代码重新构建。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"对接OneDrive\"><a href=\"#对接OneDrive\" class=\"headerlink\" title=\"对接OneDrive\"></a>对接OneDrive</h2><p>1、前往<a class=\"link\"   href=\"https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview\" >Azure Active Directory 控制台 (国际版账号)<i class=\"fas fa-external-link-alt\"></i></a> 或者 <a class=\"link\"   href=\"https://portal.azure.cn/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview\" >Azure Active Directory 控制台 (世纪互联账号)<i class=\"fas fa-external-link-alt\"></i></a>并登录，登录后进入<code>Azure Active Directory</code>管理面板。</p>\n<p>2、进入左侧 <code>应用注册</code> 菜单，并点击 <code>新注册</code> 按钮。</p>\n<p>3、填写应用注册表单。其中，名称可任取；<code>受支持的帐户类型</code> 选择为<code>任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户</code>；<code>重定向 URI (可选)</code>请选择<code>Web</code>，并填写<code>https://drive.codebaby.com.cn/api/v3/callback/onedrive/auth</code>； 其他保持默认即可</p>\n<p>4、创建秘钥。</p>\n<p>5、复制秘钥和ID到OneDrive存储策略页面，并填写相关资料，授权登陆即可。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p><strong>更多安装方式和程序配置添加详见官方文档</strong> （作者文档也咕了不少：</p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://docs.cloudreve.org/getting-started/config\" >https://docs.cloudreve.org/getting-started/config<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h2 id=\"附一个自己搭建的网盘\"><a href=\"#附一个自己搭建的网盘\" class=\"headerlink\" title=\"附一个自己搭建的网盘\"></a>附一个自己搭建的网盘</h2><p>网址：<a class=\"link\"   href=\"https://drive.codebaby.com.cn/\" >https://drive.codebaby.com.cn/<i class=\"fas fa-external-link-alt\"></i></a><br>欢迎大家注册使用，<strong>不限容量！！！</strong>文件用OneDrive存储。【暂停使用！！！】</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a class=\"link\"   href=\"https://www.feiyubk.com/archives/8.html\" >https://www.feiyubk.com/archives/8.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>Github：<a class=\"link\"   href=\"https://github.com/cloudreve/Cloudreve\" >https://github.com/cloudreve/Cloudreve<i class=\"fas fa-external-link-alt\"></i></a></p>\n<blockquote>\n<p>官方文档：<a class=\"link\"   href=\"https://docs.cloudreve.org/\" >https://docs.cloudreve.org/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>部署环境：CentOS 7.6/Nginx -Tengine2.2.4/MySQL 5.7.30</strong></p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>1.Releases下载程序到本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/cloudreve/Cloudreve/releases/download/3.1.1/cloudreve_3.1.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>在 /home 目录新建一个程序文件夹，方便日后文件管理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>将下载的程序解压到 /home/cloudreve 目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C /home/cloudreve -xzf cloudreve_3.1.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>进入程序目录赋予执行权限，并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入程序目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 赋予执行权限</span></span><br><span class=\"line\">chmod +x ./cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 启动 Cloudreve</span></span><br><span class=\"line\">./cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>不出意外的话会跳出程序初始化界面，记得保存账号密码。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/8ISaRh5cDn7LtNY.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>放行 5212 端口（我是宝塔，后台添加放行端口即可 )。访问 <a class=\"link\"   href=\"http://ip:5212/\" >http://ip:5212<i class=\"fas fa-external-link-alt\"></i></a> 看看程序是否正常开启，同时 Shell 也会跑出记录。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/P1oWftS8Uv2u7dD.jpg\"\n                      alt=\"image\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/vHADRozQXK8ShP4.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>确认无误后，Shell 面板 Ctrl+ C 结束程序运行, 配置 Systemd 进程守  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/lib/systemd/system/cloudreve.service</span><br></pre></td></tr></table></figure>\n\n<p>根据实际情况填写以下内容并保存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Cloudreve</span><br><span class=\"line\">Documentation=https://docs.cloudreve.org</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">WorkingDirectory=/home/cloudreve</span><br><span class=\"line\">ExecStart=/home/cloudreve/cloudreve</span><br><span class=\"line\">Restart=on-abnormal</span><br><span class=\"line\">RestartSec=5s</span><br><span class=\"line\">KillMode=mixed</span><br><span class=\"line\">StandardOutput=null</span><br><span class=\"line\">StandardError=syslog</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>其中以下配置项需要根据实际情况更改：</p>\n<ul>\n<li><p><strong>WorkingDirectory</strong> 主程序所在目录</p>\n</li>\n<li><p>设置开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> cloudreve</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>日后你可以通过以下指令管理 Cloudreve 进程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 停止服务 </span></span><br><span class=\"line\">systemctl stop cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 重启服务 </span></span><br><span class=\"line\">systemctl restart cloudreve</span><br><span class=\"line\"><span class=\"comment\"># 查看状态 </span></span><br><span class=\"line\">systemctl status cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>最后 Nginx 反代一波，宝塔添加一个站点，解析好域名, 站点修改添加反向代理:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/8ISaRh5cDn7LtNY.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>添加完反代后便可以通过自己的域名访问了，程序的部署到这里也算基本完成了。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>接下来进行一些小调整，Cloudreve 默认数据库内置的 SQLite，个人还是喜欢 Mysql。</p>\n<p>Tips: 更换数据库配置后，Cloudreve 会重新初始化数据库，原有的数据将会丢失。</p>\n<p>宝塔创建一个数据库，然后编辑 Cloudreve 的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /home/cloudreve/conf.ini</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Database]</span><br><span class=\"line\">; 数据库类型，目前支持 sqlite | mysql</span><br><span class=\"line\">Type = mysql</span><br><span class=\"line\">; 用户名</span><br><span class=\"line\">User = root</span><br><span class=\"line\">; 密码</span><br><span class=\"line\">Password = root</span><br><span class=\"line\">; 数据库地址</span><br><span class=\"line\">Host = 127.0.0.1</span><br><span class=\"line\">; 数据库名称</span><br><span class=\"line\">Name = v3</span><br><span class=\"line\">; 数据表前缀</span><br><span class=\"line\">TablePrefix = Cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>保存后，进程序目录重新初始化，生成新的账号密码，之后再用 systemctl 管理，完事了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进程序目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/cloudreve</span><br><span class=\"line\"><span class=\"comment\">#启动程序</span></span><br><span class=\"line\">./cloudreve</span><br></pre></td></tr></table></figure>\n\n<p>另外提一嘴，程序默认监听端口也是在该文件修改。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p><strong>V3 版本内升级步骤较为简单，总体流程如下：</strong></p>\n<ol>\n<li><p>备份数据库；</p>\n</li>\n<li><p>下载或构建最新版本的 Cloudreve；</p>\n</li>\n<li><p>停止正在运行的 Cloudreve；</p>\n</li>\n<li><p>将老版本的 Cloudreve 主程序替换为新版本；</p>\n</li>\n<li><p>启动 Cloudreve；</p>\n</li>\n<li><p>清空浏览器缓存。</p>\n<blockquote>\n<p>如果你在老版本使用了自行构建的前端静态资源文件，请使用新版对应的前端仓库代码重新构建。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"对接OneDrive\"><a href=\"#对接OneDrive\" class=\"headerlink\" title=\"对接OneDrive\"></a>对接OneDrive</h2><p>1、前往<a class=\"link\"   href=\"https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview\" >Azure Active Directory 控制台 (国际版账号)<i class=\"fas fa-external-link-alt\"></i></a> 或者 <a class=\"link\"   href=\"https://portal.azure.cn/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview\" >Azure Active Directory 控制台 (世纪互联账号)<i class=\"fas fa-external-link-alt\"></i></a>并登录，登录后进入<code>Azure Active Directory</code>管理面板。</p>\n<p>2、进入左侧 <code>应用注册</code> 菜单，并点击 <code>新注册</code> 按钮。</p>\n<p>3、填写应用注册表单。其中，名称可任取；<code>受支持的帐户类型</code> 选择为<code>任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户</code>；<code>重定向 URI (可选)</code>请选择<code>Web</code>，并填写<code>https://drive.codebaby.com.cn/api/v3/callback/onedrive/auth</code>； 其他保持默认即可</p>\n<p>4、创建秘钥。</p>\n<p>5、复制秘钥和ID到OneDrive存储策略页面，并填写相关资料，授权登陆即可。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p><strong>更多安装方式和程序配置添加详见官方文档</strong> （作者文档也咕了不少：</p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://docs.cloudreve.org/getting-started/config\" >https://docs.cloudreve.org/getting-started/config<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h2 id=\"附一个自己搭建的网盘\"><a href=\"#附一个自己搭建的网盘\" class=\"headerlink\" title=\"附一个自己搭建的网盘\"></a>附一个自己搭建的网盘</h2><p>网址：<a class=\"link\"   href=\"https://drive.codebaby.com.cn/\" >https://drive.codebaby.com.cn/<i class=\"fas fa-external-link-alt\"></i></a><br>欢迎大家注册使用，<strong>不限容量！！！</strong>文件用OneDrive存储。【暂停使用！！！】</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a class=\"link\"   href=\"https://www.feiyubk.com/archives/8.html\" >https://www.feiyubk.com/archives/8.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"宝塔面板部署Hexo","date":"2022-01-19T06:32:26.000Z","_content":"因为现在还是学生，可以购买阿里云的学生机。\n\n\n于是购买了3个月的阿里云服务器ESC，准备撸来玩玩。之前看了好多教程，想直接搭建Git和Nginx环境，然后慢慢配置，然而每次都有报错的地方，谷歌了好久还是没有解决。最后想利用宝塔面板试试。宝塔已经预装了Git环境，只需要安装Nginx即可。\n\n\n\n\n\n宝塔系统依托Centos开发，所以我们服务器系统选择Centos7+\n\n## 安装宝塔\n\n```bash\nyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n```\n\n安装完成后，登录宝塔，首次登陆会提示我们安装环境，我们勾选Nginx即可。\n\n之后，我们在home文件夹下新建git，hexo这两个文件夹。\n\n\n\n![image](https://vip2.loli.io/2022/01/27/c9u8DNSefF1Wsj2.jpg)                                \n\n**随后，我们通过阿里云或者xshell登录我们的服务器，依次执行**\n\n```\ncd ..   //这里是因为默认执行目录是root，需要返回根目录\ncd home\ncd git\ngit init --bare hexoBlog.git\n```\n\n接着，在目录 `/home/git/hexoBlog.git/hooks`下新建文件post-receive，写入以下代码：\n\n```\n#!/bin/bash\ngit --work-tree=/home/hexo --git-dir=/home/git/hexoBlog.git checkout -f\n```\n\n注意！这里的文件不要在宝塔里直接新建，需要通过连接服务器使用命令新建：\n\n```\ncd /home/git/hexoBlog.git/hooks  \nvim post-receive\n```\n\n**给post-receive权限**\n\n```\nchmod +x /home/git/hexoBlog.git/hooks/post-receive\n```\n\n## 配置Nginx\n\n宝塔面板默认的nginx配置文件在根目录->www->serve->nginx->conf下，找到nginx.conf，编辑它，如图：\n\n![image](https://vip2.loli.io/2022/01/27/xd2zNkWqCjwSZU8.jpg)\n\n重启Nginx服务\n\n```\nservice nginx restart\n```\n\n## 本地Hexo配置\n\n按照这个格式配置，如果你只推送到aliyun就配置那一行就行了，推送到多个平台务必按照以下格式进行填写（注意缩进）\n\n```\ndeploy:\n  type: git\n  repo:\n      github: git@github.com:HowarZheng/howarzheng.github.io.git,master\n      coding: https://git.dev.tencent.com/xigzheng/xigzheng.git,master\n      #gitee: https://gitee.com/howarzheng_001/howarzheng_001.git,master\n      aliyun: root@120.55.161.99:/home/git/hexoBlog\n```\n\n这时候已经完成一大半了，`hexo clean&&hexo g&&hexo d`部署后已经可以通过域名访问你的Hexo博客了。\n\n**接下来在宝塔面板里添加网站：**\n\n![image](https://vip1.loli.io/2022/01/27/qDV3ekwMTG6A1jn.jpg)\n\n\n\n网站目录选择`/home/hexo`\n\n之后在阿里云将域名解析到服务器ip即可。\n\n![image](https://vip1.loli.io/2022/01/27/9oBmZsSu8iAbXcD.jpg)\n\n## SSL证书申请\n\n宝塔可以免费申请SSL证书，并进行强制`https`访问：\n\n![image](https://vip2.loli.io/2022/01/27/wct4FXZaD6krbEO.jpg)\n\n\n\n> 参考文献：\n\n1. [腾讯云使用宝塔面板部署Hexo](https://www.leaflag.cn/2019/02/22/腾讯云部署Hexo/#正式开始！配置Git！)\n2. [阿里云Centos7+Nginx部署Hexo静态博客](https://www.jianshu.com/p/0f9dfa9c141b)\n","source":"_posts/宝塔面板部署Hexo.md","raw":"---\ntitle: 宝塔面板部署Hexo\ndate: 2022-01-19 14:32:26\ntags:\n- 宝塔\n- Hexo\ncategories:\n- 网站建设\n---\n因为现在还是学生，可以购买阿里云的学生机。\n\n\n于是购买了3个月的阿里云服务器ESC，准备撸来玩玩。之前看了好多教程，想直接搭建Git和Nginx环境，然后慢慢配置，然而每次都有报错的地方，谷歌了好久还是没有解决。最后想利用宝塔面板试试。宝塔已经预装了Git环境，只需要安装Nginx即可。\n\n\n\n\n\n宝塔系统依托Centos开发，所以我们服务器系统选择Centos7+\n\n## 安装宝塔\n\n```bash\nyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n```\n\n安装完成后，登录宝塔，首次登陆会提示我们安装环境，我们勾选Nginx即可。\n\n之后，我们在home文件夹下新建git，hexo这两个文件夹。\n\n\n\n![image](https://vip2.loli.io/2022/01/27/c9u8DNSefF1Wsj2.jpg)                                \n\n**随后，我们通过阿里云或者xshell登录我们的服务器，依次执行**\n\n```\ncd ..   //这里是因为默认执行目录是root，需要返回根目录\ncd home\ncd git\ngit init --bare hexoBlog.git\n```\n\n接着，在目录 `/home/git/hexoBlog.git/hooks`下新建文件post-receive，写入以下代码：\n\n```\n#!/bin/bash\ngit --work-tree=/home/hexo --git-dir=/home/git/hexoBlog.git checkout -f\n```\n\n注意！这里的文件不要在宝塔里直接新建，需要通过连接服务器使用命令新建：\n\n```\ncd /home/git/hexoBlog.git/hooks  \nvim post-receive\n```\n\n**给post-receive权限**\n\n```\nchmod +x /home/git/hexoBlog.git/hooks/post-receive\n```\n\n## 配置Nginx\n\n宝塔面板默认的nginx配置文件在根目录->www->serve->nginx->conf下，找到nginx.conf，编辑它，如图：\n\n![image](https://vip2.loli.io/2022/01/27/xd2zNkWqCjwSZU8.jpg)\n\n重启Nginx服务\n\n```\nservice nginx restart\n```\n\n## 本地Hexo配置\n\n按照这个格式配置，如果你只推送到aliyun就配置那一行就行了，推送到多个平台务必按照以下格式进行填写（注意缩进）\n\n```\ndeploy:\n  type: git\n  repo:\n      github: git@github.com:HowarZheng/howarzheng.github.io.git,master\n      coding: https://git.dev.tencent.com/xigzheng/xigzheng.git,master\n      #gitee: https://gitee.com/howarzheng_001/howarzheng_001.git,master\n      aliyun: root@120.55.161.99:/home/git/hexoBlog\n```\n\n这时候已经完成一大半了，`hexo clean&&hexo g&&hexo d`部署后已经可以通过域名访问你的Hexo博客了。\n\n**接下来在宝塔面板里添加网站：**\n\n![image](https://vip1.loli.io/2022/01/27/qDV3ekwMTG6A1jn.jpg)\n\n\n\n网站目录选择`/home/hexo`\n\n之后在阿里云将域名解析到服务器ip即可。\n\n![image](https://vip1.loli.io/2022/01/27/9oBmZsSu8iAbXcD.jpg)\n\n## SSL证书申请\n\n宝塔可以免费申请SSL证书，并进行强制`https`访问：\n\n![image](https://vip2.loli.io/2022/01/27/wct4FXZaD6krbEO.jpg)\n\n\n\n> 参考文献：\n\n1. [腾讯云使用宝塔面板部署Hexo](https://www.leaflag.cn/2019/02/22/腾讯云部署Hexo/#正式开始！配置Git！)\n2. [阿里云Centos7+Nginx部署Hexo静态博客](https://www.jianshu.com/p/0f9dfa9c141b)\n","slug":"宝塔面板部署Hexo","published":1,"updated":"2022-01-27T03:10:03.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmnb001ouwvfc5g24x2c","content":"<p>因为现在还是学生，可以购买阿里云的学生机。</p>\n<p>于是购买了3个月的阿里云服务器ESC，准备撸来玩玩。之前看了好多教程，想直接搭建Git和Nginx环境，然后慢慢配置，然而每次都有报错的地方，谷歌了好久还是没有解决。最后想利用宝塔面板试试。宝塔已经预装了Git环境，只需要安装Nginx即可。</p>\n<p>宝塔系统依托Centos开发，所以我们服务器系统选择Centos7+</p>\n<h2 id=\"安装宝塔\"><a href=\"#安装宝塔\" class=\"headerlink\" title=\"安装宝塔\"></a>安装宝塔</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，登录宝塔，首次登陆会提示我们安装环境，我们勾选Nginx即可。</p>\n<p>之后，我们在home文件夹下新建git，hexo这两个文件夹。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/c9u8DNSefF1Wsj2.jpg\"\n                      alt=\"image\"\n                >                                </p>\n<p><strong>随后，我们通过阿里云或者xshell登录我们的服务器，依次执行</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..   //这里是因为默认执行目录是root，需要返回根目录</span><br><span class=\"line\">cd home</span><br><span class=\"line\">cd git</span><br><span class=\"line\">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure>\n\n<p>接着，在目录 <code>/home/git/hexoBlog.git/hooks</code>下新建文件post-receive，写入以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">git --work-tree=/home/hexo --git-dir=/home/git/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure>\n\n<p>注意！这里的文件不要在宝塔里直接新建，需要通过连接服务器使用命令新建：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/git/hexoBlog.git/hooks  </span><br><span class=\"line\">vim post-receive</span><br></pre></td></tr></table></figure>\n\n<p><strong>给post-receive权限</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>宝塔面板默认的nginx配置文件在根目录-&gt;www-&gt;serve-&gt;nginx-&gt;conf下，找到nginx.conf，编辑它，如图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/xd2zNkWqCjwSZU8.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>重启Nginx服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地Hexo配置\"><a href=\"#本地Hexo配置\" class=\"headerlink\" title=\"本地Hexo配置\"></a>本地Hexo配置</h2><p>按照这个格式配置，如果你只推送到aliyun就配置那一行就行了，推送到多个平台务必按照以下格式进行填写（注意缩进）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">      github: git@github.com:HowarZheng/howarzheng.github.io.git,master</span><br><span class=\"line\">      coding: https://git.dev.tencent.com/xigzheng/xigzheng.git,master</span><br><span class=\"line\">      #gitee: https://gitee.com/howarzheng_001/howarzheng_001.git,master</span><br><span class=\"line\">      aliyun: root@120.55.161.99:/home/git/hexoBlog</span><br></pre></td></tr></table></figure>\n\n<p>这时候已经完成一大半了，<code>hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</code>部署后已经可以通过域名访问你的Hexo博客了。</p>\n<p><strong>接下来在宝塔面板里添加网站：</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/27/qDV3ekwMTG6A1jn.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>网站目录选择<code>/home/hexo</code></p>\n<p>之后在阿里云将域名解析到服务器ip即可。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/27/9oBmZsSu8iAbXcD.jpg\"\n                      alt=\"image\"\n                ></p>\n<h2 id=\"SSL证书申请\"><a href=\"#SSL证书申请\" class=\"headerlink\" title=\"SSL证书申请\"></a>SSL证书申请</h2><p>宝塔可以免费申请SSL证书，并进行强制<code>https</code>访问：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/wct4FXZaD6krbEO.jpg\"\n                      alt=\"image\"\n                ></p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://www.leaflag.cn/2019/02/22/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2Hexo/#%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%A7%8B%EF%BC%81%E9%85%8D%E7%BD%AEGit%EF%BC%81\" >腾讯云使用宝塔面板部署Hexo<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/0f9dfa9c141b\" >阿里云Centos7+Nginx部署Hexo静态博客<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>因为现在还是学生，可以购买阿里云的学生机。</p>\n<p>于是购买了3个月的阿里云服务器ESC，准备撸来玩玩。之前看了好多教程，想直接搭建Git和Nginx环境，然后慢慢配置，然而每次都有报错的地方，谷歌了好久还是没有解决。最后想利用宝塔面板试试。宝塔已经预装了Git环境，只需要安装Nginx即可。</p>\n<p>宝塔系统依托Centos开发，所以我们服务器系统选择Centos7+</p>\n<h2 id=\"安装宝塔\"><a href=\"#安装宝塔\" class=\"headerlink\" title=\"安装宝塔\"></a>安装宝塔</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，登录宝塔，首次登陆会提示我们安装环境，我们勾选Nginx即可。</p>\n<p>之后，我们在home文件夹下新建git，hexo这两个文件夹。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/c9u8DNSefF1Wsj2.jpg\"\n                      alt=\"image\"\n                >                                </p>\n<p><strong>随后，我们通过阿里云或者xshell登录我们的服务器，依次执行</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..   //这里是因为默认执行目录是root，需要返回根目录</span><br><span class=\"line\">cd home</span><br><span class=\"line\">cd git</span><br><span class=\"line\">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure>\n\n<p>接着，在目录 <code>/home/git/hexoBlog.git/hooks</code>下新建文件post-receive，写入以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">git --work-tree=/home/hexo --git-dir=/home/git/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure>\n\n<p>注意！这里的文件不要在宝塔里直接新建，需要通过连接服务器使用命令新建：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/git/hexoBlog.git/hooks  </span><br><span class=\"line\">vim post-receive</span><br></pre></td></tr></table></figure>\n\n<p><strong>给post-receive权限</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>宝塔面板默认的nginx配置文件在根目录-&gt;www-&gt;serve-&gt;nginx-&gt;conf下，找到nginx.conf，编辑它，如图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/xd2zNkWqCjwSZU8.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>重启Nginx服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地Hexo配置\"><a href=\"#本地Hexo配置\" class=\"headerlink\" title=\"本地Hexo配置\"></a>本地Hexo配置</h2><p>按照这个格式配置，如果你只推送到aliyun就配置那一行就行了，推送到多个平台务必按照以下格式进行填写（注意缩进）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">      github: git@github.com:HowarZheng/howarzheng.github.io.git,master</span><br><span class=\"line\">      coding: https://git.dev.tencent.com/xigzheng/xigzheng.git,master</span><br><span class=\"line\">      #gitee: https://gitee.com/howarzheng_001/howarzheng_001.git,master</span><br><span class=\"line\">      aliyun: root@120.55.161.99:/home/git/hexoBlog</span><br></pre></td></tr></table></figure>\n\n<p>这时候已经完成一大半了，<code>hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</code>部署后已经可以通过域名访问你的Hexo博客了。</p>\n<p><strong>接下来在宝塔面板里添加网站：</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/27/qDV3ekwMTG6A1jn.jpg\"\n                      alt=\"image\"\n                ></p>\n<p>网站目录选择<code>/home/hexo</code></p>\n<p>之后在阿里云将域名解析到服务器ip即可。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/27/9oBmZsSu8iAbXcD.jpg\"\n                      alt=\"image\"\n                ></p>\n<h2 id=\"SSL证书申请\"><a href=\"#SSL证书申请\" class=\"headerlink\" title=\"SSL证书申请\"></a>SSL证书申请</h2><p>宝塔可以免费申请SSL证书，并进行强制<code>https</code>访问：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip2.loli.io/2022/01/27/wct4FXZaD6krbEO.jpg\"\n                      alt=\"image\"\n                ></p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://www.leaflag.cn/2019/02/22/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2Hexo/#%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%A7%8B%EF%BC%81%E9%85%8D%E7%BD%AEGit%EF%BC%81\" >腾讯云使用宝塔面板部署Hexo<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/0f9dfa9c141b\" >阿里云Centos7+Nginx部署Hexo静态博客<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"数组的下标为什么从0开始","date":"2017-04-13T02:32:20.000Z","_content":"<a name=\"toc-heading-1\"></a>\n## 背景\n在回答大部分我们无法解释的诡异问题时，我们最常用的辩词通常是`历史原因`。那么，历史又是出于什么原因，使用了0标号数组呢？`Mike Hoye`就是本着这么一种追根刨地的科学精神为我们找到了解答。以下是一些他的重要结论的摘录翻译：<br />据作者的说法，`C语言`中从0开始标号的做法是沿用了`BCPL`这门编程语言的做法。而`BCPL`中如果一个变量是指针的话，那么该指针可以指向一系列连续的相同类型的数值。那么`p+0`就代表了这一串数值的第一个。在`BCPL`中数组第`5`个元素的写法是`p!5`，而`C语言`中把写法改成了`p[5]`，也就是现在的数组。具体原文摘录如下：\n> If a BCPL variable represents a pointer, it points to one or more consecutive words of memory. These words are the same size as BCPL variables. Just as machine code allows address arithmetic so does BCPL, so if p is a pointer p+1 is a pointer to the next word after the one p points to. Naturally p+0 has the same value as p. The monodic indirection operator ! takes a pointer as it’s argument and returns the contents of the word pointed to. If v is a pointer !(v+I) will access the word pointed to by v+I.\n\n至于为什么`C语言中`为什么使用[]方括号来表示数组下标，这个设计也有一定来历。据`C语言`作者的说法是方括号是现代键盘上唯一较为容易输入的`成对符号`（不用shift）不信你对着键盘找找？\n<a name=\"toc-heading-2\"></a>\n## 为什么这个反人类设计在一段时间内一直没有被改变\n根据`Mike`的说法，`BCPL`是被设计在`IBM`硬件环境下编译运行的。在`1960`后的很长一段时间内，服务器硬件几乎被`IBM`统治。一个城市内也许至于一台超级计算机，还需要根据时间配额使用。当你当天的配额用完以后，你的程序就被完全清出计算队列。甚至连计算结果都不给你保留，死无全尸。这个时候写一段高效的程序，就显得比什么都重要了。而这时0下标数组又体现了出了它的另一个优势，就是：相较于1下标数组，它的`编译效率`更高。原文摘录如下：\n> So: the technical reason we started counting arrays at zero is that in the mid-1960’s, you could shave a few cycles off of a program’s compilation time on an IBM 7094. The social reason is that we had to save every cycle we could, because if the job didn’t finish fast it might not finish at all and you never know when you’re getting bumped off the hardware because the President of IBM just called and fuck your thesis, it’s yacht-racing time.\n\n此外，还有另外一种说法。在C语言中有指针的概念，而指针数组标号实际上是一个偏移量而不是计数作用。例如对于指针p，第N个元素是`*(p+N)`，指针指向数组的第一个元素就是`*(p+0)`.\n<a name=\"toc-heading-3\"></a>\n## 更高效\n**数组（Arrary）** 是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。<br />从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。如果用a来表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]就表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要用公式：<br />`a[k]_address = base_address + k * type_size;`<br />但，如果数组从1开始计数，那公式的k就要做相应的改变了：<br />`a[k]_address = base_address + (k - 1 ) * type_size;`<br />对比两个公式，我们发现，如果从1开始编号，每次随机访问数组元素都多了一次减法运算，对于cpu来说，就是多了一次减法指令。<br />数组作为非常基础的数据结构，通过下标访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能的做到极致。从0开始，可以减少一次减法操作。\n> 参考文献：\n\n1. [https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html)\n1. [https://blog.csdn.net/localhostcom/article/details/86358593](https://blog.csdn.net/localhostcom/article/details/86358593)\n1. [https://www.zhihu.com/question/37408440](https://www.zhihu.com/question/37408440)\n1. [http://cenalulu.github.io/linux/why-array-start-from-zero/](http://cenalulu.github.io/linux/why-array-start-from-zero/)\n","source":"_posts/数组的下标为什么从0开始.md","raw":"---\ntitle: 数组的下标为什么从0开始\ndate: 2017-04-13 10:32:20\ntags:\n- 数组\ncategories:\n- 编程笔记\n---\n<a name=\"toc-heading-1\"></a>\n## 背景\n在回答大部分我们无法解释的诡异问题时，我们最常用的辩词通常是`历史原因`。那么，历史又是出于什么原因，使用了0标号数组呢？`Mike Hoye`就是本着这么一种追根刨地的科学精神为我们找到了解答。以下是一些他的重要结论的摘录翻译：<br />据作者的说法，`C语言`中从0开始标号的做法是沿用了`BCPL`这门编程语言的做法。而`BCPL`中如果一个变量是指针的话，那么该指针可以指向一系列连续的相同类型的数值。那么`p+0`就代表了这一串数值的第一个。在`BCPL`中数组第`5`个元素的写法是`p!5`，而`C语言`中把写法改成了`p[5]`，也就是现在的数组。具体原文摘录如下：\n> If a BCPL variable represents a pointer, it points to one or more consecutive words of memory. These words are the same size as BCPL variables. Just as machine code allows address arithmetic so does BCPL, so if p is a pointer p+1 is a pointer to the next word after the one p points to. Naturally p+0 has the same value as p. The monodic indirection operator ! takes a pointer as it’s argument and returns the contents of the word pointed to. If v is a pointer !(v+I) will access the word pointed to by v+I.\n\n至于为什么`C语言中`为什么使用[]方括号来表示数组下标，这个设计也有一定来历。据`C语言`作者的说法是方括号是现代键盘上唯一较为容易输入的`成对符号`（不用shift）不信你对着键盘找找？\n<a name=\"toc-heading-2\"></a>\n## 为什么这个反人类设计在一段时间内一直没有被改变\n根据`Mike`的说法，`BCPL`是被设计在`IBM`硬件环境下编译运行的。在`1960`后的很长一段时间内，服务器硬件几乎被`IBM`统治。一个城市内也许至于一台超级计算机，还需要根据时间配额使用。当你当天的配额用完以后，你的程序就被完全清出计算队列。甚至连计算结果都不给你保留，死无全尸。这个时候写一段高效的程序，就显得比什么都重要了。而这时0下标数组又体现了出了它的另一个优势，就是：相较于1下标数组，它的`编译效率`更高。原文摘录如下：\n> So: the technical reason we started counting arrays at zero is that in the mid-1960’s, you could shave a few cycles off of a program’s compilation time on an IBM 7094. The social reason is that we had to save every cycle we could, because if the job didn’t finish fast it might not finish at all and you never know when you’re getting bumped off the hardware because the President of IBM just called and fuck your thesis, it’s yacht-racing time.\n\n此外，还有另外一种说法。在C语言中有指针的概念，而指针数组标号实际上是一个偏移量而不是计数作用。例如对于指针p，第N个元素是`*(p+N)`，指针指向数组的第一个元素就是`*(p+0)`.\n<a name=\"toc-heading-3\"></a>\n## 更高效\n**数组（Arrary）** 是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。<br />从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。如果用a来表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]就表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要用公式：<br />`a[k]_address = base_address + k * type_size;`<br />但，如果数组从1开始计数，那公式的k就要做相应的改变了：<br />`a[k]_address = base_address + (k - 1 ) * type_size;`<br />对比两个公式，我们发现，如果从1开始编号，每次随机访问数组元素都多了一次减法运算，对于cpu来说，就是多了一次减法指令。<br />数组作为非常基础的数据结构，通过下标访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能的做到极致。从0开始，可以减少一次减法操作。\n> 参考文献：\n\n1. [https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html)\n1. [https://blog.csdn.net/localhostcom/article/details/86358593](https://blog.csdn.net/localhostcom/article/details/86358593)\n1. [https://www.zhihu.com/question/37408440](https://www.zhihu.com/question/37408440)\n1. [http://cenalulu.github.io/linux/why-array-start-from-zero/](http://cenalulu.github.io/linux/why-array-start-from-zero/)\n","slug":"数组的下标为什么从0开始","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmne001tuwvf9ilh24at","content":"<p><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在回答大部分我们无法解释的诡异问题时，我们最常用的辩词通常是<code>历史原因</code>。那么，历史又是出于什么原因，使用了0标号数组呢？<code>Mike Hoye</code>就是本着这么一种追根刨地的科学精神为我们找到了解答。以下是一些他的重要结论的摘录翻译：<br />据作者的说法，<code>C语言</code>中从0开始标号的做法是沿用了<code>BCPL</code>这门编程语言的做法。而<code>BCPL</code>中如果一个变量是指针的话，那么该指针可以指向一系列连续的相同类型的数值。那么<code>p+0</code>就代表了这一串数值的第一个。在<code>BCPL</code>中数组第<code>5</code>个元素的写法是<code>p!5</code>，而<code>C语言</code>中把写法改成了<code>p[5]</code>，也就是现在的数组。具体原文摘录如下：</p>\n<blockquote>\n<p>If a BCPL variable represents a pointer, it points to one or more consecutive words of memory. These words are the same size as BCPL variables. Just as machine code allows address arithmetic so does BCPL, so if p is a pointer p+1 is a pointer to the next word after the one p points to. Naturally p+0 has the same value as p. The monodic indirection operator ! takes a pointer as it’s argument and returns the contents of the word pointed to. If v is a pointer !(v+I) will access the word pointed to by v+I.</p>\n</blockquote>\n<p>至于为什么<code>C语言中</code>为什么使用[]方括号来表示数组下标，这个设计也有一定来历。据<code>C语言</code>作者的说法是方括号是现代键盘上唯一较为容易输入的<code>成对符号</code>（不用shift）不信你对着键盘找找？<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"为什么这个反人类设计在一段时间内一直没有被改变\"><a href=\"#为什么这个反人类设计在一段时间内一直没有被改变\" class=\"headerlink\" title=\"为什么这个反人类设计在一段时间内一直没有被改变\"></a>为什么这个反人类设计在一段时间内一直没有被改变</h2><p>根据<code>Mike</code>的说法，<code>BCPL</code>是被设计在<code>IBM</code>硬件环境下编译运行的。在<code>1960</code>后的很长一段时间内，服务器硬件几乎被<code>IBM</code>统治。一个城市内也许至于一台超级计算机，还需要根据时间配额使用。当你当天的配额用完以后，你的程序就被完全清出计算队列。甚至连计算结果都不给你保留，死无全尸。这个时候写一段高效的程序，就显得比什么都重要了。而这时0下标数组又体现了出了它的另一个优势，就是：相较于1下标数组，它的<code>编译效率</code>更高。原文摘录如下：</p>\n<blockquote>\n<p>So: the technical reason we started counting arrays at zero is that in the mid-1960’s, you could shave a few cycles off of a program’s compilation time on an IBM 7094. The social reason is that we had to save every cycle we could, because if the job didn’t finish fast it might not finish at all and you never know when you’re getting bumped off the hardware because the President of IBM just called and fuck your thesis, it’s yacht-racing time.</p>\n</blockquote>\n<p>此外，还有另外一种说法。在C语言中有指针的概念，而指针数组标号实际上是一个偏移量而不是计数作用。例如对于指针p，第N个元素是<code>*(p+N)</code>，指针指向数组的第一个元素就是<code>*(p+0)</code>.<br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"更高效\"><a href=\"#更高效\" class=\"headerlink\" title=\"更高效\"></a>更高效</h2><p><strong>数组（Arrary）</strong> 是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。<br />从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。如果用a来表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]就表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要用公式：<br /><code>a[k]_address = base_address + k * type_size;</code><br />但，如果数组从1开始计数，那公式的k就要做相应的改变了：<br /><code>a[k]_address = base_address + (k - 1 ) * type_size;</code><br />对比两个公式，我们发现，如果从1开始编号，每次随机访问数组元素都多了一次减法运算，对于cpu来说，就是多了一次减法指令。<br />数组作为非常基础的数据结构，通过下标访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能的做到极致。从0开始，可以减少一次减法操作。</p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html\" >https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/localhostcom/article/details/86358593\" >https://blog.csdn.net/localhostcom/article/details/86358593<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.zhihu.com/question/37408440\" >https://www.zhihu.com/question/37408440<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"http://cenalulu.github.io/linux/why-array-start-from-zero/\" >http://cenalulu.github.io/linux/why-array-start-from-zero/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在回答大部分我们无法解释的诡异问题时，我们最常用的辩词通常是<code>历史原因</code>。那么，历史又是出于什么原因，使用了0标号数组呢？<code>Mike Hoye</code>就是本着这么一种追根刨地的科学精神为我们找到了解答。以下是一些他的重要结论的摘录翻译：<br />据作者的说法，<code>C语言</code>中从0开始标号的做法是沿用了<code>BCPL</code>这门编程语言的做法。而<code>BCPL</code>中如果一个变量是指针的话，那么该指针可以指向一系列连续的相同类型的数值。那么<code>p+0</code>就代表了这一串数值的第一个。在<code>BCPL</code>中数组第<code>5</code>个元素的写法是<code>p!5</code>，而<code>C语言</code>中把写法改成了<code>p[5]</code>，也就是现在的数组。具体原文摘录如下：</p>\n<blockquote>\n<p>If a BCPL variable represents a pointer, it points to one or more consecutive words of memory. These words are the same size as BCPL variables. Just as machine code allows address arithmetic so does BCPL, so if p is a pointer p+1 is a pointer to the next word after the one p points to. Naturally p+0 has the same value as p. The monodic indirection operator ! takes a pointer as it’s argument and returns the contents of the word pointed to. If v is a pointer !(v+I) will access the word pointed to by v+I.</p>\n</blockquote>\n<p>至于为什么<code>C语言中</code>为什么使用[]方括号来表示数组下标，这个设计也有一定来历。据<code>C语言</code>作者的说法是方括号是现代键盘上唯一较为容易输入的<code>成对符号</code>（不用shift）不信你对着键盘找找？<br><a name=\"toc-heading-2\"></a></p>\n<h2 id=\"为什么这个反人类设计在一段时间内一直没有被改变\"><a href=\"#为什么这个反人类设计在一段时间内一直没有被改变\" class=\"headerlink\" title=\"为什么这个反人类设计在一段时间内一直没有被改变\"></a>为什么这个反人类设计在一段时间内一直没有被改变</h2><p>根据<code>Mike</code>的说法，<code>BCPL</code>是被设计在<code>IBM</code>硬件环境下编译运行的。在<code>1960</code>后的很长一段时间内，服务器硬件几乎被<code>IBM</code>统治。一个城市内也许至于一台超级计算机，还需要根据时间配额使用。当你当天的配额用完以后，你的程序就被完全清出计算队列。甚至连计算结果都不给你保留，死无全尸。这个时候写一段高效的程序，就显得比什么都重要了。而这时0下标数组又体现了出了它的另一个优势，就是：相较于1下标数组，它的<code>编译效率</code>更高。原文摘录如下：</p>\n<blockquote>\n<p>So: the technical reason we started counting arrays at zero is that in the mid-1960’s, you could shave a few cycles off of a program’s compilation time on an IBM 7094. The social reason is that we had to save every cycle we could, because if the job didn’t finish fast it might not finish at all and you never know when you’re getting bumped off the hardware because the President of IBM just called and fuck your thesis, it’s yacht-racing time.</p>\n</blockquote>\n<p>此外，还有另外一种说法。在C语言中有指针的概念，而指针数组标号实际上是一个偏移量而不是计数作用。例如对于指针p，第N个元素是<code>*(p+N)</code>，指针指向数组的第一个元素就是<code>*(p+0)</code>.<br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"更高效\"><a href=\"#更高效\" class=\"headerlink\" title=\"更高效\"></a>更高效</h2><p><strong>数组（Arrary）</strong> 是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。<br />从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。如果用a来表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]就表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要用公式：<br /><code>a[k]_address = base_address + k * type_size;</code><br />但，如果数组从1开始计数，那公式的k就要做相应的改变了：<br /><code>a[k]_address = base_address + (k - 1 ) * type_size;</code><br />对比两个公式，我们发现，如果从1开始编号，每次随机访问数组元素都多了一次减法运算，对于cpu来说，就是多了一次减法指令。<br />数组作为非常基础的数据结构，通过下标访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能的做到极致。从0开始，可以减少一次减法操作。</p>\n<blockquote>\n<p>参考文献：</p>\n</blockquote>\n<ol>\n<li><a class=\"link\"   href=\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html\" >https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/localhostcom/article/details/86358593\" >https://blog.csdn.net/localhostcom/article/details/86358593<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.zhihu.com/question/37408440\" >https://www.zhihu.com/question/37408440<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"http://cenalulu.github.io/linux/why-array-start-from-zero/\" >http://cenalulu.github.io/linux/why-array-start-from-zero/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n"},{"title":"用Python打造一个文献下载器","date":"2022-01-23T07:22:26.000Z","_content":"\n文献下载有很多插件，例如[sci-hub button](https://greasyfork.org/zh-CN/scripts/370246-sci-hub-button)和[Scholarscope](https://www.scholarscope.cn/)，但是今天突然想用万能的Python实现一个自动下载文献的功能。\n<a name=\"toc-heading-1\"></a>\n\n## 准备\n<a name=\"toc-heading-2\"></a>\n### 安装Anaconda\n安装完成后，打开`Jupyter Notebook`<br />![](https://vip1.loli.io/2022/01/25/hUSk4uLHjMycmrd.png)<br />**新建一个空白Python3文件**，保存为`pyhub.py`<br />输入：\n```python\nimport webbrowser #打开默认浏览器的标准库\nhub = \"http://sci-hub.tw/\"\nprint(\"Please enter DOI\")\nwhile(True):\n    doi = input()\n    paper = hub+doi\n    webbrowser.open(paper)\n```\n点击运行后会自动打开默认浏览器，打开一个类似`http://sci-hub.tw/10.1038/s41586-019-1497-4`这样的链接，点击下载即可。\n<a name=\"toc-heading-3\"></a>\n## 打包成exe\n为了让程序运行更方便，我们可以利用python的[PyInstaller](http://www.pyinstaller.org/)库将程序打包成exe。<br />Python 默认并不包含 PyInstaller 模块，因此需要自行安装 PyInstaller 模块。\n```python\npip install pyinstaller\n```\nPyInstaller **语法如下：**\n```python\npyinstaller 选项 Python源文件\n```\n<a name=\"toc-heading-4\"></a>\n### PyInstaller 支持的常用选项\n![](https://vip1.loli.io/2022/01/25/CrkYnTVylIOUeK1.png)<br />因此，我们可以在pyhub.py的目录下执行：\n```python\nPyinstaller -F -w pyhub.py\n```\n执行完毕，便可以看我们生成的exe文件，点击即可执行。\n","source":"_posts/用Python打造一个文献下载器.md","raw":"---\ntitle: 用Python打造一个文献下载器\ndate: 2022-01-23 15:22:26\ntags:\n- Python\ncategories:\n- 编程笔记\n- \tPython\n---\n\n文献下载有很多插件，例如[sci-hub button](https://greasyfork.org/zh-CN/scripts/370246-sci-hub-button)和[Scholarscope](https://www.scholarscope.cn/)，但是今天突然想用万能的Python实现一个自动下载文献的功能。\n<a name=\"toc-heading-1\"></a>\n\n## 准备\n<a name=\"toc-heading-2\"></a>\n### 安装Anaconda\n安装完成后，打开`Jupyter Notebook`<br />![](https://vip1.loli.io/2022/01/25/hUSk4uLHjMycmrd.png)<br />**新建一个空白Python3文件**，保存为`pyhub.py`<br />输入：\n```python\nimport webbrowser #打开默认浏览器的标准库\nhub = \"http://sci-hub.tw/\"\nprint(\"Please enter DOI\")\nwhile(True):\n    doi = input()\n    paper = hub+doi\n    webbrowser.open(paper)\n```\n点击运行后会自动打开默认浏览器，打开一个类似`http://sci-hub.tw/10.1038/s41586-019-1497-4`这样的链接，点击下载即可。\n<a name=\"toc-heading-3\"></a>\n## 打包成exe\n为了让程序运行更方便，我们可以利用python的[PyInstaller](http://www.pyinstaller.org/)库将程序打包成exe。<br />Python 默认并不包含 PyInstaller 模块，因此需要自行安装 PyInstaller 模块。\n```python\npip install pyinstaller\n```\nPyInstaller **语法如下：**\n```python\npyinstaller 选项 Python源文件\n```\n<a name=\"toc-heading-4\"></a>\n### PyInstaller 支持的常用选项\n![](https://vip1.loli.io/2022/01/25/CrkYnTVylIOUeK1.png)<br />因此，我们可以在pyhub.py的目录下执行：\n```python\nPyinstaller -F -w pyhub.py\n```\n执行完毕，便可以看我们生成的exe文件，点击即可执行。\n","slug":"用Python打造一个文献下载器","published":1,"updated":"2022-01-26T15:43:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyxwrmng001wuwvf6rjm3l31","content":"<p>文献下载有很多插件，例如<a class=\"link\"   href=\"https://greasyfork.org/zh-CN/scripts/370246-sci-hub-button\" >sci-hub button<i class=\"fas fa-external-link-alt\"></i></a>和<a class=\"link\"   href=\"https://www.scholarscope.cn/\" >Scholarscope<i class=\"fas fa-external-link-alt\"></i></a>，但是今天突然想用万能的Python实现一个自动下载文献的功能。<br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p><a name=\"toc-heading-2\"></a></p>\n<h3 id=\"安装Anaconda\"><a href=\"#安装Anaconda\" class=\"headerlink\" title=\"安装Anaconda\"></a>安装Anaconda</h3><p>安装完成后，打开<code>Jupyter Notebook</code><br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/hUSk4uLHjMycmrd.png\"\n                     \n                ><br /><strong>新建一个空白Python3文件</strong>，保存为<code>pyhub.py</code><br />输入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> webbrowser <span class=\"comment\">#打开默认浏览器的标准库</span></span><br><span class=\"line\">hub = <span class=\"string\">&quot;http://sci-hub.tw/&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Please enter DOI&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">True</span>):</span><br><span class=\"line\">    doi = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">    paper = hub+doi</span><br><span class=\"line\">    webbrowser.<span class=\"built_in\">open</span>(paper)</span><br></pre></td></tr></table></figure>\n<p>点击运行后会自动打开默认浏览器，打开一个类似<code>http://sci-hub.tw/10.1038/s41586-019-1497-4</code>这样的链接，点击下载即可。<br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"打包成exe\"><a href=\"#打包成exe\" class=\"headerlink\" title=\"打包成exe\"></a>打包成exe</h2><p>为了让程序运行更方便，我们可以利用python的<a class=\"link\"   href=\"http://www.pyinstaller.org/\" >PyInstaller<i class=\"fas fa-external-link-alt\"></i></a>库将程序打包成exe。<br />Python 默认并不包含 PyInstaller 模块，因此需要自行安装 PyInstaller 模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyinstaller</span><br></pre></td></tr></table></figure>\n<p>PyInstaller <strong>语法如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyinstaller 选项 Python源文件</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-4\"></a></p>\n<h3 id=\"PyInstaller-支持的常用选项\"><a href=\"#PyInstaller-支持的常用选项\" class=\"headerlink\" title=\"PyInstaller 支持的常用选项\"></a>PyInstaller 支持的常用选项</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/CrkYnTVylIOUeK1.png\"\n                     \n                ><br />因此，我们可以在pyhub.py的目录下执行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pyinstaller -F -w pyhub.py</span><br></pre></td></tr></table></figure>\n<p>执行完毕，便可以看我们生成的exe文件，点击即可执行。</p>\n","site":{"data":{"links":[{"name":"懶得勤快的博客","link":"https://masuit.com","description":"本站是一個集精品軟件、資源共享、前端技術和后端開發等互聯網技術分享的博客，專注于資源分享、前端開發和后端技術。熱衷于互聯網行業，喜歡各種折騰。","avatar":"https://pic.ldqkcdn.top/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>文献下载有很多插件，例如<a class=\"link\"   href=\"https://greasyfork.org/zh-CN/scripts/370246-sci-hub-button\" >sci-hub button<i class=\"fas fa-external-link-alt\"></i></a>和<a class=\"link\"   href=\"https://www.scholarscope.cn/\" >Scholarscope<i class=\"fas fa-external-link-alt\"></i></a>，但是今天突然想用万能的Python实现一个自动下载文献的功能。<br><a name=\"toc-heading-1\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p><a name=\"toc-heading-2\"></a></p>\n<h3 id=\"安装Anaconda\"><a href=\"#安装Anaconda\" class=\"headerlink\" title=\"安装Anaconda\"></a>安装Anaconda</h3><p>安装完成后，打开<code>Jupyter Notebook</code><br /><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/hUSk4uLHjMycmrd.png\"\n                     \n                ><br /><strong>新建一个空白Python3文件</strong>，保存为<code>pyhub.py</code><br />输入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> webbrowser <span class=\"comment\">#打开默认浏览器的标准库</span></span><br><span class=\"line\">hub = <span class=\"string\">&quot;http://sci-hub.tw/&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Please enter DOI&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">True</span>):</span><br><span class=\"line\">    doi = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">    paper = hub+doi</span><br><span class=\"line\">    webbrowser.<span class=\"built_in\">open</span>(paper)</span><br></pre></td></tr></table></figure>\n<p>点击运行后会自动打开默认浏览器，打开一个类似<code>http://sci-hub.tw/10.1038/s41586-019-1497-4</code>这样的链接，点击下载即可。<br><a name=\"toc-heading-3\"></a></p>\n<h2 id=\"打包成exe\"><a href=\"#打包成exe\" class=\"headerlink\" title=\"打包成exe\"></a>打包成exe</h2><p>为了让程序运行更方便，我们可以利用python的<a class=\"link\"   href=\"http://www.pyinstaller.org/\" >PyInstaller<i class=\"fas fa-external-link-alt\"></i></a>库将程序打包成exe。<br />Python 默认并不包含 PyInstaller 模块，因此需要自行安装 PyInstaller 模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyinstaller</span><br></pre></td></tr></table></figure>\n<p>PyInstaller <strong>语法如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyinstaller 选项 Python源文件</span><br></pre></td></tr></table></figure>\n<p><a name=\"toc-heading-4\"></a></p>\n<h3 id=\"PyInstaller-支持的常用选项\"><a href=\"#PyInstaller-支持的常用选项\" class=\"headerlink\" title=\"PyInstaller 支持的常用选项\"></a>PyInstaller 支持的常用选项</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://vip1.loli.io/2022/01/25/CrkYnTVylIOUeK1.png\"\n                     \n                ><br />因此，我们可以在pyhub.py的目录下执行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pyinstaller -F -w pyhub.py</span><br></pre></td></tr></table></figure>\n<p>执行完毕，便可以看我们生成的exe文件，点击即可执行。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckyxwrmm0000euwvfgq8m8h4i","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmmf000luwvff37v0roq"},{"post_id":"ckyxwrmlt0009uwvf41c03kv5","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmmu000zuwvfbk3j9nyc"},{"post_id":"ckyxwrmlt0009uwvf41c03kv5","category_id":"ckyxwrmmg000muwvf67fq7r65","_id":"ckyxwrmmy0013uwvfazbde52p"},{"post_id":"ckyxwrmml000ruwvf7dnj461i","category_id":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmn00017uwvfaffl8hki"},{"post_id":"ckyxwrml60001uwvf036ra13g","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmn2001buwvf7hxe08i6"},{"post_id":"ckyxwrml60001uwvf036ra13g","category_id":"ckyxwrmmg000muwvf67fq7r65","_id":"ckyxwrmn4001euwvfgd6a7nvp"},{"post_id":"ckyxwrmms000xuwvf63hs2qgv","category_id":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmn6001iuwvf728f4fe3"},{"post_id":"ckyxwrmmv0011uwvf1tr9dhhh","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmna001muwvf98h60sdq"},{"post_id":"ckyxwrmmv0011uwvf1tr9dhhh","category_id":"ckyxwrmmg000muwvf67fq7r65","_id":"ckyxwrmnd001quwvfavp78z1x"},{"post_id":"ckyxwrmlv000auwvf1drzea23","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmnf001uuwvfbco9hjmb"},{"post_id":"ckyxwrmlv000auwvf1drzea23","category_id":"ckyxwrmmg000muwvf67fq7r65","_id":"ckyxwrmnj001yuwvfc0kr863c"},{"post_id":"ckyxwrmmy0015uwvf8mwv1whf","category_id":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmnk0021uwvfahbtgff9"},{"post_id":"ckyxwrmn10019uwvf154o47we","category_id":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmnk0024uwvf329hd37o"},{"post_id":"ckyxwrmlf0003uwvf6yps9lv9","category_id":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmnl0027uwvfawedglao"},{"post_id":"ckyxwrmlf0003uwvf6yps9lv9","category_id":"ckyxwrmn00016uwvf50jb4oqc","_id":"ckyxwrmnm002auwvfh0w4b620"},{"post_id":"ckyxwrmn3001duwvf9u8gf27q","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmnn002cuwvf8wvnex7c"},{"post_id":"ckyxwrmn5001huwvfgyrjals4","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmnw002guwvf2d2xc5jq"},{"post_id":"ckyxwrmn5001huwvfgyrjals4","category_id":"ckyxwrmmg000muwvf67fq7r65","_id":"ckyxwrmnx002iuwvf89fkcqzu"},{"post_id":"ckyxwrmn7001luwvf4i4kdn8y","category_id":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmny002kuwvf6ez45c11"},{"post_id":"ckyxwrmm3000guwvfda504vor","category_id":"ckyxwrmn4001fuwvf60d5heu2","_id":"ckyxwrmny002luwvfe2wcfajk"},{"post_id":"ckyxwrmnb001ouwvfc5g24x2c","category_id":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmo0002nuwvf3gvnbnce"},{"post_id":"ckyxwrmne001tuwvf9ilh24at","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmo0002ouwvfc5wzdgby"},{"post_id":"ckyxwrmm8000juwvf55m30v8k","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmo1002quwvf5akzcct5"},{"post_id":"ckyxwrmm8000juwvf55m30v8k","category_id":"ckyxwrmmg000muwvf67fq7r65","_id":"ckyxwrmo2002ruwvfa8px00og"},{"post_id":"ckyxwrmng001wuwvf6rjm3l31","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmo2002suwvf6jrqfhox"},{"post_id":"ckyxwrmng001wuwvf6rjm3l31","category_id":"ckyxwrmmg000muwvf67fq7r65","_id":"ckyxwrmo4002uuwvfhdyu1ulj"},{"post_id":"ckyxwrmlq0007uwvfhbtrfmxg","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmo4002vuwvfbhsr354i"},{"post_id":"ckyxwrmlq0007uwvfhbtrfmxg","category_id":"ckyxwrmnh001xuwvf4g2whkh8","_id":"ckyxwrmo5002xuwvffnr39ucm"},{"post_id":"ckyxwrmmb000kuwvf2vud51ha","category_id":"ckyxwrmlj0004uwvf5pz4ghl2","_id":"ckyxwrmo5002zuwvffee61z1x"},{"post_id":"ckyxwrmmb000kuwvf2vud51ha","category_id":"ckyxwrmmg000muwvf67fq7r65","_id":"ckyxwrmo60032uwvf72jp6nrv"},{"post_id":"ckyxwrmmi000puwvf7h8o87iy","category_id":"ckyxwrmlx000buwvf8us7cy2s","_id":"ckyxwrmo70034uwvfalha4gkb"},{"post_id":"ckyxwrmmi000puwvf7h8o87iy","category_id":"ckyxwrmn00016uwvf50jb4oqc","_id":"ckyxwrmo80037uwvf5x7g7o6e"},{"post_id":"ckyxwrmmq000vuwvf0e8new22","category_id":"ckyxwrmn4001fuwvf60d5heu2","_id":"ckyxwrmo80039uwvf2uv46go0"}],"PostTag":[{"post_id":"ckyxwrmlt0009uwvf41c03kv5","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmm0000duwvfe458d0nb"},{"post_id":"ckyxwrml60001uwvf036ra13g","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmm3000fuwvfh8j22sdd"},{"post_id":"ckyxwrmm8000juwvf55m30v8k","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmmi000ouwvf494l6brr"},{"post_id":"ckyxwrmlf0003uwvf6yps9lv9","tag_id":"ckyxwrmly000cuwvfao9tcbsh","_id":"ckyxwrmmk000quwvf10c30vqk"},{"post_id":"ckyxwrmlf0003uwvf6yps9lv9","tag_id":"ckyxwrmm5000iuwvfdw3ravsn","_id":"ckyxwrmmn000tuwvf7c3c0i4v"},{"post_id":"ckyxwrmmi000puwvf7h8o87iy","tag_id":"ckyxwrmly000cuwvfao9tcbsh","_id":"ckyxwrmms000wuwvfb96r503m"},{"post_id":"ckyxwrmlq0007uwvfhbtrfmxg","tag_id":"ckyxwrmmh000nuwvfebk294vd","_id":"ckyxwrmmu0010uwvf9ltx2cd3"},{"post_id":"ckyxwrmlv000auwvf1drzea23","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmmy0014uwvf8ewphps0"},{"post_id":"ckyxwrmlv000auwvf1drzea23","tag_id":"ckyxwrmmo000uuwvf50or2xmp","_id":"ckyxwrmn10018uwvff5en90ir"},{"post_id":"ckyxwrmmv0011uwvf1tr9dhhh","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmn3001cuwvfg45n2gv0"},{"post_id":"ckyxwrmmv0011uwvf1tr9dhhh","tag_id":"ckyxwrmmo000uuwvf50or2xmp","_id":"ckyxwrmn4001guwvfan3r5jdp"},{"post_id":"ckyxwrmm0000euwvfgq8m8h4i","tag_id":"ckyxwrmmw0012uwvf3fhr13hd","_id":"ckyxwrmn7001kuwvf5ts22tf7"},{"post_id":"ckyxwrmm0000euwvfgq8m8h4i","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmna001nuwvf9rch5syq"},{"post_id":"ckyxwrmn3001duwvf9u8gf27q","tag_id":"ckyxwrmmh000nuwvfebk294vd","_id":"ckyxwrmne001suwvf9pd420zh"},{"post_id":"ckyxwrmn5001huwvfgyrjals4","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmng001vuwvf4qytbut0"},{"post_id":"ckyxwrmm3000guwvfda504vor","tag_id":"ckyxwrmn2001auwvf5yiogp3x","_id":"ckyxwrmnj001zuwvf5k0jc0ux"},{"post_id":"ckyxwrmm3000guwvfda504vor","tag_id":"ckyxwrmn6001juwvf4jglc8vv","_id":"ckyxwrmnk0022uwvfendybw11"},{"post_id":"ckyxwrmng001wuwvf6rjm3l31","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmnl0025uwvf1j57hbpi"},{"post_id":"ckyxwrmmb000kuwvf2vud51ha","tag_id":"ckyxwrmln0005uwvfgj9af9v6","_id":"ckyxwrmnm0028uwvf6r0sduhq"},{"post_id":"ckyxwrmmb000kuwvf2vud51ha","tag_id":"ckyxwrmnd001ruwvf0ier5pp7","_id":"ckyxwrmnn002buwvf1vm67z6e"},{"post_id":"ckyxwrmml000ruwvf7dnj461i","tag_id":"ckyxwrmnj0020uwvf8ru142w2","_id":"ckyxwrmnu002euwvf5uzs0zi7"},{"post_id":"ckyxwrmmq000vuwvf0e8new22","tag_id":"ckyxwrmnl0026uwvf803g2qiw","_id":"ckyxwrmnw002huwvfawmeax1z"},{"post_id":"ckyxwrmms000xuwvf63hs2qgv","tag_id":"ckyxwrmnn002duwvf292gak41","_id":"ckyxwrmo5002yuwvf5gif07iy"},{"post_id":"ckyxwrmms000xuwvf63hs2qgv","tag_id":"ckyxwrmnx002juwvfdmvb1j3i","_id":"ckyxwrmo60030uwvfd6rd9qhq"},{"post_id":"ckyxwrmms000xuwvf63hs2qgv","tag_id":"ckyxwrmny002muwvf6gzt4c5p","_id":"ckyxwrmo70033uwvf3ktl75ke"},{"post_id":"ckyxwrmms000xuwvf63hs2qgv","tag_id":"ckyxwrmo1002puwvf2fz0cy80","_id":"ckyxwrmo70035uwvf0dz3cle5"},{"post_id":"ckyxwrmms000xuwvf63hs2qgv","tag_id":"ckyxwrmo3002tuwvf7ftg9y9x","_id":"ckyxwrmo80038uwvfbl10azvr"},{"post_id":"ckyxwrmmy0015uwvf8mwv1whf","tag_id":"ckyxwrmo4002wuwvfdbe92cp1","_id":"ckyxwrmo9003auwvfdof8hnxd"},{"post_id":"ckyxwrmmy0015uwvf8mwv1whf","tag_id":"ckyxwrmo60031uwvf8tdaeg06","_id":"ckyxwrmoa003cuwvf1fbs67bj"},{"post_id":"ckyxwrmn10019uwvf154o47we","tag_id":"ckyxwrmo70036uwvfejm672j7","_id":"ckyxwrmob003euwvf9o5pdrmo"},{"post_id":"ckyxwrmn10019uwvf154o47we","tag_id":"ckyxwrmly000cuwvfao9tcbsh","_id":"ckyxwrmoc003fuwvfh8l94bp4"},{"post_id":"ckyxwrmn10019uwvf154o47we","tag_id":"ckyxwrmo9003buwvfd3mydp19","_id":"ckyxwrmoc003huwvfbnhngy6k"},{"post_id":"ckyxwrmn7001luwvf4i4kdn8y","tag_id":"ckyxwrmob003duwvf3gxv2csp","_id":"ckyxwrmoe003kuwvfh7411ujl"},{"post_id":"ckyxwrmn7001luwvf4i4kdn8y","tag_id":"ckyxwrmoc003guwvfd3t5e6k3","_id":"ckyxwrmoe003luwvf67nfdxo1"},{"post_id":"ckyxwrmn7001luwvf4i4kdn8y","tag_id":"ckyxwrmod003iuwvfggoc2jkb","_id":"ckyxwrmof003nuwvf3xu5hj9w"},{"post_id":"ckyxwrmnb001ouwvfc5g24x2c","tag_id":"ckyxwrmob003duwvf3gxv2csp","_id":"ckyxwrmog003ouwvfgakm3pon"},{"post_id":"ckyxwrmnb001ouwvfc5g24x2c","tag_id":"ckyxwrmly000cuwvfao9tcbsh","_id":"ckyxwrmog003puwvfgmwyeupy"},{"post_id":"ckyxwrmne001tuwvf9ilh24at","tag_id":"ckyxwrmoe003muwvfdmtv64rj","_id":"ckyxwrmog003quwvf33k40367"}],"Tag":[{"name":"Python","_id":"ckyxwrmln0005uwvfgj9af9v6"},{"name":"Hexo","_id":"ckyxwrmly000cuwvfao9tcbsh"},{"name":"matery","_id":"ckyxwrmm5000iuwvfdw3ravsn"},{"name":"Linux","_id":"ckyxwrmmh000nuwvfebk294vd"},{"name":"正则表达式","_id":"ckyxwrmmo000uuwvf50or2xmp"},{"name":"virtualenv","_id":"ckyxwrmmw0012uwvf3fhr13hd"},{"name":"Typora","_id":"ckyxwrmn2001auwvf5yiogp3x"},{"name":"Vue","_id":"ckyxwrmn6001juwvf4jglc8vv"},{"name":"scrapy","_id":"ckyxwrmnd001ruwvf0ier5pp7"},{"name":"谷歌广告","_id":"ckyxwrmnj0020uwvf8ru142w2"},{"name":"万彩办公大师","_id":"ckyxwrmnl0026uwvf803g2qiw"},{"name":"jsdeliver","_id":"ckyxwrmnn002duwvf292gak41"},{"name":"Github","_id":"ckyxwrmnx002juwvfdmvb1j3i"},{"name":"CDN","_id":"ckyxwrmny002muwvf6gzt4c5p"},{"name":"PicX","_id":"ckyxwrmo1002puwvf2fz0cy80"},{"name":"SM.MS","_id":"ckyxwrmo3002tuwvf7ftg9y9x"},{"name":"Aria2","_id":"ckyxwrmo4002wuwvfdbe92cp1"},{"name":"Rclone","_id":"ckyxwrmo60031uwvf8tdaeg06"},{"name":"Github Actions","_id":"ckyxwrmo70036uwvfejm672j7"},{"name":"Github Pages","_id":"ckyxwrmo9003buwvfd3mydp19"},{"name":"宝塔","_id":"ckyxwrmob003duwvf3gxv2csp"},{"name":"clouddreve","_id":"ckyxwrmoc003guwvfd3t5e6k3"},{"name":"网盘","_id":"ckyxwrmod003iuwvfggoc2jkb"},{"name":"数组","_id":"ckyxwrmoe003muwvfdmtv64rj"}]}}